{"交通运输": {"sqlite": "CREATE TABLE Passengers on rail transport (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Railway operations mileage DATETIME, -- 铁路营业里程\n  The mileage rises the same as the rest of the year INTEGER, -- 里程同比增长\n  Iron mileage ratio INTEGER, -- 高铁里程占比\n  Passengers ' dispatches INTEGER, -- 旅客发送量\n  Traveler growth over time INTEGER, -- 旅客同比增长\n  Portfolio turnover INTEGER, -- 客运周转量\n  Growth in liquidity on a one-year basis INTEGER, -- 周转量同比增长\n  High Iron Carrier Ratio INTEGER, -- 高铁承运占比\n);\nCREATE TABLE Goods transported by rail (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Shipment volume DATETIME, -- 货运发送量\n  Sends increase on the same basis INTEGER, -- 发送量同比增长\n  Freight turnover INTEGER, -- 货运周转量\n  Growth in liquidity on a one-year basis INTEGER, -- 周转量同比增长\n);\nCREATE TABLE Civil aviation routes (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of civil aviation certified airports DATETIME, -- 民用航空颁证机场数量\n  Number of regular air access airports INTEGER, -- 定期通航机场数量\n  Number of navigable cities INTEGER, -- 通航城市数量\n  Number of aircraft INTEGER, -- 飞机数量\n  Course miles INTEGER, -- 航线里程\n  Urban coverage at the local level INTEGER, -- 地级市覆盖率\n  District coverage INTEGER, -- 县覆盖率\n  Number of international routes INTEGER, -- 国际航线数量\n  Number of shipping countries INTEGER, -- 通航国家数量\n);\nCREATE TABLE Passengers transported by civil aviation (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Passenger traffic DATETIME, -- 旅客运输量\n  Traveler growth over time INTEGER, -- 旅客同比增长\n  Passenger turnover INTEGER, -- 旅客周转量\n  Growth in liquidity on a one-year basis INTEGER, -- 周转量同比增长\n);\nCREATE TABLE Transport of goods by civil aviation (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Postage traffic DATETIME, -- 货邮运输量\n  Increase in volume of transport on a par INTEGER, -- 运输量同比增长\n  Postage turnover INTEGER, -- 货邮周转量\n  Growth in liquidity on a one-year basis INTEGER, -- 周转量同比增长\n);\n", "columns_en": {"年份": "Year", "铁路营业里程": "Railway_operations_mileage", "里程同比增长": "The_mileage_rises_the_same_as_the_rest_of_the_year", "高铁里程占比": "Iron_mileage_ratio", "旅客发送量": "Passengers_'_dispatches", "旅客同比增长": "Traveler_growth_over_time", "客运周转量": "Portfolio_turnover", "周转量同比增长": "Growth_in_liquidity_on_a_one-year_basis", "高铁承运占比": "High_Iron_Carrier_Ratio", "货运发送量": "Shipment_volume", "发送量同比增长": "Sends_increase_on_the_same_basis", "货运周转量": "Freight_turnover", "民用航空颁证机场数量": "Number_of_civil_aviation_certified_airports", "定期通航机场数量": "Number_of_regular_air_access_airports", "通航城市数量": "Number_of_navigable_cities", "飞机数量": "Number_of_aircraft", "航线里程": "Course_miles", "地级市覆盖率": "Urban_coverage_at_the_local_level", "县覆盖率": "District_coverage", "国际航线数量": "Number_of_international_routes", "通航国家数量": "Number_of_shipping_countries", "旅客运输量": "Passenger_traffic", "旅客周转量": "Passenger_turnover", "货邮运输量": "Postage_traffic", "运输量同比增长": "Increase_in_volume_of_transport_on_a_par", "货邮周转量": "Postage_turnover"}, "table_en": {"铁路运输旅客": "Passengers_on_rail_transport", "铁路运输货物": "Goods_transported_by_rail", "民航航线": "Civil_aviation_routes", "民航运输旅客": "Passengers_transported_by_civil_aviation", "民航运输货物": "Transport_of_goods_by_civil_aviation"}}, "水果": {"sqlite": "CREATE TABLE Fruit (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Features VARCHAR(50), -- 特性\n  It's fit for the season VARCHAR(50), -- 适合季节\n  Per 100 grams of heat VARCHAR(50), -- 每100克热量\n  Per 100 grams of water INTEGER, -- 每100克水分\n);\nCREATE TABLE Province (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Climate VARCHAR(50), -- 气候\n  Organisation VARCHAR(50), -- 所属区域\n);\nCREATE TABLE Fruit-producing areas (\n  Fruitid VARCHAR(50) PRIMARY KEY, -- 水果id\n  Province id INTEGER, -- 省份id\n  Is it special? INTEGER, -- 是否特产\n  Average annual production BINARY, -- 年平均产量\n  Forms of sale INTEGER, -- 销售形式\n);\nCREATE TABLE Fruit sales city (\n  Fruitid VARCHAR(50) PRIMARY KEY, -- 水果id\n  Province of origind INTEGER, -- 原产省份id\n  To the provinceid INTEGER, -- 销往省份id\n  Annual sales INTEGER, -- 年销售量\n);\n-- Fruit-producing areas.Fruitid can be joined with Fruit.Phrase id -- 水果产地.水果id 与 水果.词条id\n-- Fruit sales city.Province of origind can be joined with Province.Phrase id -- 水果销售城市.原产省份id 与 省份.词条id\n-- Fruit sales city.To the provinceid can be joined with Province.Phrase id -- 水果销售城市.销往省份id 与 省份.词条id\n-- Fruit-producing areas.Province id can be joined with Province.Phrase id -- 水果产地.省份id 与 省份.词条id\n-- Fruit sales city.Fruitid can be joined with Fruit.Phrase id -- 水果销售城市.水果id 与 水果.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "特性": "Features", "适合季节": "It's_fit_for_the_season", "每100克热量": "Per_100_grams_of_heat", "每100克水分": "Per_100_grams_of_water", "气候": "Climate", "所属区域": "Organisation", "水果id": "Fruitid", "省份id": "Province_id", "是否特产": "Is_it_special?", "年平均产量": "Average_annual_production", "销售形式": "Forms_of_sale", "原产省份id": "Province_of_origind", "销往省份id": "To_the_provinceid", "年销售量": "Annual_sales"}, "table_en": {"水果": "Fruit", "省份": "Province", "水果产地": "Fruit-producing_areas", "水果销售城市": "Fruit_sales_city"}}, "大麦网演唱会": {"sqlite": "CREATE TABLE A concert (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Singer VARCHAR(50), -- 歌手\n  Showtime VARCHAR(50), -- 演出场次\n  The length of a single show INTEGER, -- 单场演出时长\n  Play a song INTEGER, -- 演出曲目\n);\nCREATE TABLE The courtyard (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Urban VARCHAR(50), -- 城市\n  Number of persons accommodated VARCHAR(50), -- 容纳人数\n  Area of land area INTEGER, -- 占地面积\n);\nCREATE TABLE The concert hall (\n  concert id INTEGER PRIMARY KEY, -- 演唱会id\n  Field id INTEGER, -- 场馆id\n  Date of performance INTEGER, -- 演出日期\n   Other Organiser DATETIME, -- 开始时间\n  Number of votes DATETIME, -- 票数\n  Number of sales INTEGER, -- 售出数量\n  Minimum fare INTEGER, -- 最低票价\n  Highest fare INTEGER, -- 最高票价\n);\n-- The concert hall.concert id can be joined with A concert.Phrase id -- 演唱会场馆.演唱会id 与 演唱会.词条id\n-- The concert hall.Field id can be joined with The courtyard.Phrase id -- 演唱会场馆.场馆id 与 场馆.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "歌手": "Singer", "演出场次": "Showtime", "单场演出时长": "The_length_of_a_single_show", "演出曲目": "Play_a_song", "城市": "Urban", "容纳人数": "Number_of_persons_accommodated", "占地面积": "Area_of_land_area", "演唱会id": "concert_id", "场馆id": "Field_id", "演出日期": "Date_of_performance", "开始时间": "_Other_Organiser", "票数": "Number_of_votes", "售出数量": "Number_of_sales", "最低票价": "Minimum_fare", "最高票价": "Highest_fare"}, "table_en": {"演唱会": "A_concert", "场馆": "The_courtyard", "演唱会场馆": "The_concert_hall"}}, "食物功效": {"sqlite": "CREATE TABLE Food (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Effectiveness VARCHAR(50), -- 功效\n);\nCREATE TABLE Psych food (\n  Foodid VARCHAR(50) PRIMARY KEY, -- 食物id\n  Sang-kuk Foodid INTEGER, -- 相克食物id\n  Reason INTEGER, -- 原因\n  Is it fatal? VARCHAR(50), -- 是否致命\n);\nCREATE TABLE Complementarity of foods (\n  Foodid BINARY PRIMARY KEY, -- 食物id\n  ♪ Complementary foodid ♪ INTEGER, -- 互补食物id\n  Benefits of eating together INTEGER, -- 同食益处\n  Recommended practices VARCHAR(50), -- 推荐做法\n);\n-- Psych food.Sang-kuk Foodid can be joined with Food.Phrase id -- 相克食物.相克食物id 与 食物.词条id\n-- Complementarity of foods.Foodid can be joined with Food.Phrase id -- 互补食物.食物id 与 食物.词条id\n-- Complementarity of foods.♪ Complementary foodid ♪ can be joined with Food.Phrase id -- 互补食物.互补食物id 与 食物.词条id\n-- Psych food.Foodid can be joined with Food.Phrase id -- 相克食物.食物id 与 食物.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "功效": "Effectiveness", "食物id": "Foodid", "相克食物id": "Sang-kuk_Foodid", "原因": "Reason", "是否致命": "Is_it_fatal?", "互补食物id": "♪_Complementary_foodid_♪", "同食益处": "Benefits_of_eating_together", "推荐做法": "Recommended_practices"}, "table_en": {"食物": "Food", "相克食物": "Psych_food", "互补食物": "Complementarity_of_foods"}}, "诗词": {"sqlite": "CREATE TABLE Poets (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Where you're headed VARCHAR(50), -- 所处朝代\n  Age VARCHAR(50), -- 年龄\n  Number of works INTEGER, -- 作品数量\n  Title INTEGER, -- 称号\n);\nCREATE TABLE Poetry (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Poetry name INTEGER, -- 诗词名\n  Authorid VARCHAR(50), -- 作者id\n  Literary style INTEGER, -- 文学体裁\n  Dissemination VARCHAR(50), -- 传播度\n);\nCREATE TABLE I'm a poet (\n  Poet id INTEGER PRIMARY KEY, -- 诗人id\n  The number of the year in which you were born INTEGER, -- 所处年号\n  It's official time VARCHAR(50), -- 做官时间\n);\nCREATE TABLE Monument sites (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  City to which you belong VARCHAR(50), -- 所属城市\n  Address VARCHAR(50), -- 地址\n  Memorialist id VARCHAR(50), -- 纪念人物id\n);\n-- Monument sites.Memorialist id can be joined with Poets.Phrase id -- 纪念景点.纪念人物id 与 诗人.词条id\n-- Poetry.Authorid can be joined with Poets.Phrase id -- 诗词.作者id 与 诗人.词条id\n-- I'm a poet.Poet id can be joined with Poets.Phrase id -- 做官的诗人.诗人id 与 诗人.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "所处朝代": "Where_you're_headed", "年龄": "Age", "作品数量": "Number_of_works", "称号": "Title", "诗词名": "Poetry_name", "作者id": "Authorid", "文学体裁": "Literary_style", "传播度": "Dissemination", "诗人id": "Poet_id", "所处年号": "The_number_of_the_year_in_which_you_were_born", "做官时间": "It's_official_time", "名称": "Name", "所属城市": "City_to_which_you_belong", "地址": "Address", "纪念人物id": "Memorialist_id"}, "table_en": {"诗人": "Poets", "诗词": "Poetry", "做官的诗人": "I'm_a_poet", "纪念景点": "Monument_sites"}}, "基金公司": {"sqlite": "CREATE TABLE Foundation (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Registered capital VARCHAR(50), -- 注册资本\n  Number of closed funds INTEGER, -- 封闭式基金数量\n  Number of open funds INTEGER, -- 开放式基金数量\n  Number of Asian Bond Funds INTEGER, -- 亚洲债券基金数量\n  Number of funds ranked INTEGER, -- 基金数量排名\n  Ranking of fund varieties INTEGER, -- 基金品种数排名\n);\nCREATE TABLE Shareholders of the Foundation (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Shareholders INTEGER, -- 股东公司\n  Percentage of funding VARCHAR(50), -- 出资比例\n);\nCREATE TABLE Fund company income (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Companyid DATETIME, -- 公司id\n  Size of assets INTEGER, -- 资产规模\n  Total profits INTEGER, -- 利润合计\n  Total management costs INTEGER, -- 管理费合计\n);\n-- Shareholders of the Foundation.Companyid can be joined with Foundation.Phrase id -- 基金公司的股东公司.公司id 与 基金公司.词条id\n-- Fund company income.Companyid can be joined with Foundation.Phrase id -- 基金公司收入.公司id 与 基金公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "注册资本": "Registered_capital", "封闭式基金数量": "Number_of_closed_funds", "开放式基金数量": "Number_of_open_funds", "亚洲债券基金数量": "Number_of_Asian_Bond_Funds", "基金数量排名": "Number_of_funds_ranked", "基金品种数排名": "Ranking_of_fund_varieties", "公司id": "Companyid", "股东公司": "Shareholders", "出资比例": "Percentage_of_funding", "年份": "Year", "资产规模": "Size_of_assets", "利润合计": "Total_profits", "管理费合计": "Total_management_costs"}, "table_en": {"基金公司": "Foundation", "基金公司的股东公司": "Shareholders_of_the_Foundation", "基金公司收入": "Fund_company_income"}}, "坚果": {"sqlite": "CREATE TABLE Nuts (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Saturated fat content VARCHAR(50), -- 饱和脂肪含量\n  Unsaturated fat content INTEGER, -- 不饱和脂肪含量\n  Per 100 grams of heat INTEGER, -- 每100克热量\n);\nCREATE TABLE Nutritional composition per 100 grams of nuts (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  Nutritional component INTEGER, -- 营养成分\n  Content VARCHAR(50), -- 含量\n);\nCREATE TABLE Nuts (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  Country of origin INTEGER, -- 产地\n  Market share VARCHAR(50), -- 市场占比\n);\nCREATE TABLE Nut intake (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  National INTEGER, -- 国家\n  Per capita intake VARCHAR(50), -- 人均摄入量\n  World per capita intake INTEGER, -- 世界人均摄入量\n);\nCREATE TABLE Per capita consumption of nuts in China (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  Number of consumption INTEGER, -- 消费次数\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE Seasonal operating income from nuts (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  Season INTEGER, -- 季节\n  Operating income VARCHAR(50), -- 营业收入\n  Percentage of total year INTEGER, -- 全年占比\n);\nCREATE TABLE Nut sales channels (\n  Nut id INTEGER PRIMARY KEY, -- 坚果id\n  Year INTEGER, -- 年份\n  Revenue from online sales DATETIME, -- 线上销售收入\n  Underline sales revenue INTEGER, -- 线下销售收入\n);\n-- Nut intake.Nut id can be joined with Nuts.Phrase id -- 坚果摄入量.坚果id 与 坚果.词条id\n-- Nutritional composition per 100 grams of nuts.Nut id can be joined with Nuts.Phrase id -- 每100克坚果营养成分.坚果id 与 坚果.词条id\n-- Seasonal operating income from nuts.Nut id can be joined with Nuts.Phrase id -- 坚果季节性营业收入.坚果id 与 坚果.词条id\n-- Nut sales channels.Nut id can be joined with Nuts.Phrase id -- 坚果销售渠道.坚果id 与 坚果.词条id\n-- Nuts.Nut id can be joined with Nuts.Phrase id -- 坚果产地.坚果id 与 坚果.词条id\n-- Per capita consumption of nuts in China.Nut id can be joined with Nuts.Phrase id -- 坚果中国人均消费.坚果id 与 坚果.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "饱和脂肪含量": "Saturated_fat_content", "不饱和脂肪含量": "Unsaturated_fat_content", "每100克热量": "Per_100_grams_of_heat", "坚果id": "Nut_id", "营养成分": "Nutritional_component", "含量": "Content", "产地": "Country_of_origin", "市场占比": "Market_share", "国家": "National", "人均摄入量": "Per_capita_intake", "世界人均摄入量": "World_per_capita_intake", "消费次数": "Number_of_consumption", "占比": "Percentage", "季节": "Season", "营业收入": "Operating_income", "全年占比": "Percentage_of_total_year", "年份": "Year", "线上销售收入": "Revenue_from_online_sales", "线下销售收入": "Underline_sales_revenue"}, "table_en": {"坚果": "Nuts", "每100克坚果营养成分": "Nutritional_composition_per_100_grams_of_nuts", "坚果产地": "Nuts", "坚果摄入量": "Nut_intake", "坚果中国人均消费": "Per_capita_consumption_of_nuts_in_China", "坚果季节性营业收入": "Seasonal_operating_income_from_nuts", "坚果销售渠道": "Nut_sales_channels"}}, "文集": {"sqlite": "CREATE TABLE Author (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Graduate schools VARCHAR(50), -- 毕业院校\n  Nationalities VARCHAR(50), -- 民族\n);\nCREATE TABLE Book (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Authorid VARCHAR(50), -- 作者id\n  Pages INTEGER, -- 页数\n  Pricing INTEGER, -- 定价\n  Publications INTEGER, -- 出版社\n  Publication time VARCHAR(50), -- 出版时间\n  It's a book DATETIME, -- 开本\n);\n-- Book.Authorid can be joined with Author.Phrase id -- 文集.作者id 与 作者.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "国籍": "Nationality", "毕业院校": "Graduate_schools", "民族": "Nationalities", "名称": "Name", "作者id": "Authorid", "页数": "Pages", "定价": "Pricing", "出版社": "Publications", "出版时间": "Publication_time", "开本": "It's_a_book"}, "table_en": {"作者": "Author", "文集": "Book"}}, "AI峰会": {"sqlite": "CREATE TABLE Summit (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Host VARCHAR(50), -- 主办单位\n  Date of holding VARCHAR(50), -- 举办时间\n  Days of service DATETIME, -- 历时天数\n  Location INTEGER, -- 举办地点\n  Number of sub-forums VARCHAR(50), -- 分论坛数量\n  Price of tickets INTEGER, -- 门票价格\n  Number of tickets INTEGER, -- 门票数量\n  Number of persons registered INTEGER, -- 报名人数\n  Number of live viewers INTEGER, -- 直播观看人数\n);\nCREATE TABLE Guests (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Encumbered VARCHAR(50), -- 任职单位\n  Positions VARCHAR(50), -- 职位\n);\nCREATE TABLE Guests of the Summit (\n  Hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey VARCHAR(50) PRIMARY KEY, -- 嘉宾id\n  Summit id INTEGER, -- 峰会id\n  Themes for the presentation INTEGER, -- 演讲主题\n  Forum VARCHAR(50), -- 论坛\n   Other Organiser VARCHAR(50), -- 开始时间\n  The length of the speech DATETIME, -- 演讲时长\n);\nCREATE TABLE Summit Sponsors (\n  Summit id INTEGER PRIMARY KEY, -- 峰会id\n  Company INTEGER, -- 公司\n  Sponsorship level VARCHAR(50), -- 赞助级别\n);\n-- Guests of the Summit.Hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey  hey can be joined with Guests.Phrase id -- 峰会嘉宾.嘉宾id 与 嘉宾.词条id\n-- Guests of the Summit.Summit id can be joined with Summit.Phrase id -- 峰会嘉宾.峰会id 与 峰会.词条id\n-- Summit Sponsors.Summit id can be joined with Summit.Phrase id -- 峰会赞助公司.峰会id 与 峰会.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "主办单位": "Host", "举办时间": "Date_of_holding", "历时天数": "Days_of_service", "举办地点": "Location", "分论坛数量": "Number_of_sub-forums", "门票价格": "Price_of_tickets", "门票数量": "Number_of_tickets", "报名人数": "Number_of_persons_registered", "直播观看人数": "Number_of_live_viewers", "姓名": "Name", "任职单位": "Encumbered", "职位": "Positions", "嘉宾id": "Hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey__hey", "峰会id": "Summit_id", "演讲主题": "Themes_for_the_presentation", "论坛": "Forum", "开始时间": "_Other_Organiser", "演讲时长": "The_length_of_the_speech", "公司": "Company", "赞助级别": "Sponsorship_level"}, "table_en": {"峰会": "Summit", "嘉宾": "Guests", "峰会嘉宾": "Guests_of_the_Summit", "峰会赞助公司": "Summit_Sponsors"}}, "明星富豪": {"sqlite": "CREATE TABLE Star (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Gender VARCHAR(50), -- 性别\n  Occupation VARCHAR(50), -- 职业\n  Age VARCHAR(50), -- 年龄\n  Remuneration INTEGER, -- 薪酬\n  Ticket room INTEGER, -- 票房\n);\nCREATE TABLE Treasure ranking in 2018 (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Rank INTEGER, -- 排名\n  Assets INTEGER, -- 资产\n);\nCREATE TABLE Treasure ranking  2017 (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Rank INTEGER, -- 排名\n  Assets INTEGER, -- 资产\n);\n-- Treasure ranking  2017.Starid can be joined with Star.Phrase id -- 2017年财富排名.明星id 与 明星.词条id\n-- Treasure ranking in 2018.Starid can be joined with Star.Phrase id -- 2018年财富排名.明星id 与 明星.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "国籍": "Nationality", "性别": "Gender", "职业": "Occupation", "年龄": "Age", "薪酬": "Remuneration", "票房": "Ticket_room", "明星id": "Starid", "排名": "Rank", "资产": "Assets"}, "table_en": {"明星": "Star", "2018年财富排名": "Treasure_ranking_in_2018", "2017年财富排名": "Treasure_ranking__2017"}}, "手机": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Founder VARCHAR(50), -- 创始人\n  Country of nationality VARCHAR(50), -- 所属国家\n  Annual turnover VARCHAR(50), -- 年营业额\n);\nCREATE TABLE Mobile brand (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Release Time VARCHAR(50), -- 发布时间\n  R & D companyd DATETIME, -- 研发公司id\n);\nCREATE TABLE Cell phone type (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Main frequency size VARCHAR(50), -- 主频尺寸\n  Pixels INTEGER, -- 像素\n  Memory Capacity INTEGER, -- 内存容量\n  Operating system INTEGER, -- 操作系统\n  Unlock Method VARCHAR(50), -- 解锁方式\n  Price of sale VARCHAR(50), -- 售价\n  Sales INTEGER, -- 售出量\n  Brandid INTEGER, -- 品牌id\n);\nCREATE TABLE The model uses the population (\n  Model id INTEGER PRIMARY KEY, -- 型号id\n  The crowd INTEGER, -- 人群\n  Use percentage VARCHAR(50), -- 使用占比\n);\n-- Cell phone type.Brandid can be joined with Mobile brand.Phrase id -- 手机型号.品牌id 与 手机品牌.词条id\n-- The model uses the population.Model id can be joined with Cell phone type.Phrase id -- 型号使用人群.型号id 与 手机型号.词条id\n-- Mobile brand.R & D companyd can be joined with Company.Phrase id -- 手机品牌.研发公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "创始人": "Founder", "所属国家": "Country_of_nationality", "年营业额": "Annual_turnover", "发布时间": "Release_Time", "研发公司id": "R_&_D_companyd", "主频尺寸": "Main_frequency_size", "像素": "Pixels", "内存容量": "Memory_Capacity", "操作系统": "Operating_system", "解锁方式": "Unlock_Method", "售价": "Price_of_sale", "售出量": "Sales", "品牌id": "Brandid", "型号id": "Model_id", "人群": "The_crowd", "使用占比": "Use_percentage"}, "table_en": {"公司": "Company", "手机品牌": "Mobile_brand", "手机型号": "Cell_phone_type", "型号使用人群": "The_model_uses_the_population"}}, "豆瓣音乐人": {"sqlite": "CREATE TABLE Musicians (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Number of songs VARCHAR(50), -- 歌曲数量\n  Number of concerns INTEGER, -- 关注数量\n);\nCREATE TABLE Songs (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Song Name INTEGER, -- 歌曲名称\n  Musician id VARCHAR(50), -- 音乐人id\n  Playbacks INTEGER, -- 播放次数\n  Number of downloads INTEGER, -- 下载次数\n);\nCREATE TABLE The sheet (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  List Name INTEGER, -- 歌单名称\n  Type VARCHAR(50), -- 类型\n  Number of songs VARCHAR(50), -- 歌曲数量\n  Collections INTEGER, -- 收藏次数\n  Playbacks INTEGER, -- 播放次数\n);\nCREATE TABLE A song sheet (\n  Songid INTEGER PRIMARY KEY, -- 歌曲id\n  ♪ The songlist id ♪ INTEGER, -- 歌单id\n);\n-- A song sheet.Songid can be joined with Songs.Phrase id -- 歌曲歌单.歌曲id 与 歌曲.词条id\n-- A song sheet.♪ The songlist id ♪ can be joined with The sheet.Phrase id -- 歌曲歌单.歌单id 与 歌单.词条id\n-- Songs.Musician id can be joined with Musicians.Phrase id -- 歌曲.音乐人id 与 音乐人.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "歌曲数量": "Number_of_songs", "关注数量": "Number_of_concerns", "歌曲名称": "Song_Name", "音乐人id": "Musician_id", "播放次数": "Playbacks", "下载次数": "Number_of_downloads", "歌单名称": "List_Name", "类型": "Type", "收藏次数": "Collections", "歌曲id": "Songid", "歌单id": "♪_The_songlist_id_♪"}, "table_en": {"音乐人": "Musicians", "歌曲": "Songs", "歌单": "The_sheet", "歌曲歌单": "A_song_sheet"}}, "中国旅行社": {"sqlite": "CREATE TABLE Travel agency (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Level VARCHAR(50), -- 级别\n  Number of countries travelling abroad VARCHAR(50), -- 出境游国家数量\n  Number of cities in the country INTEGER, -- 国内游城市数量\n  Number of exit routes INTEGER, -- 出境游路线数量\n  Number of internal routes INTEGER, -- 国内游路线数量\n  Asian ranking INTEGER, -- 亚洲排名\n  Number of overseas visitors INTEGER, -- 接待海外游客数量\n  Number of offshore companies INTEGER, -- 境外公司数量\n  Number of holding subsidiaries INTEGER, -- 控股子公司数量\n  Number of travellers in business relationship INTEGER, -- 有业务关系的旅行商数量\n  Number of duty-free shops INTEGER, -- 免税店数量\n);\nCREATE TABLE Outbound route (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Route Name INTEGER, -- 路线名称\n  Travel agencyid VARCHAR(50), -- 旅行社id\n  Let's go to the city INTEGER, -- 出发城市\n  Days VARCHAR(50), -- 天数\n  Adult price INTEGER, -- 成人价格\n  Child price INTEGER, -- 儿童价格\n  Number of countries INTEGER, -- 国家数量\n  Viewpoints INTEGER, -- 景点数\n  Total ticket prices INTEGER, -- 门票总价格\n);\nCREATE TABLE Countries covered by travel abroad (\n  Route id INTEGER PRIMARY KEY, -- 路线id\n  National INTEGER, -- 国家\n  Days of travel VARCHAR(50), -- 旅行天数\n  Number of sites INTEGER, -- 景点数量\n);\nCREATE TABLE Internal routes (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Route Name INTEGER, -- 路线名称\n  Travel agencyid VARCHAR(50), -- 旅行社id\n  Let's go to the city INTEGER, -- 出发城市\n  Days VARCHAR(50), -- 天数\n  Pre-sale price INTEGER, -- 预售价格\n  Panel price INTEGER, -- 参团价格\n  Number of people starting a mission INTEGER, -- 起团人数\n  Personal price INTEGER, -- 个人价格\n  Viewpoints INTEGER, -- 景点数\n);\nCREATE TABLE Cruise route (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Route Name INTEGER, -- 路线名称\n  Travel agencyid VARCHAR(50), -- 旅行社id\n  Let's go to the city INTEGER, -- 出发城市\n  Days VARCHAR(50), -- 天数\n  Indoor room prices INTEGER, -- 内舱房价格\n  Seaview House Prices INTEGER, -- 海景房价格\n  Price of balcony room INTEGER, -- 阳台房价格\n  Navigation area INTEGER, -- 航行区域\n  Cruise Company VARCHAR(50), -- 邮轮公司\n);\n-- Cruise route.Travel agencyid can be joined with Travel agency.Phrase id -- 邮轮路线.旅行社id 与 旅行社.词条id\n-- Countries covered by travel abroad.Route id can be joined with Outbound route.Phrase id -- 出境游所含国家.路线id 与 出境游路线.词条id\n-- Internal routes.Travel agencyid can be joined with Travel agency.Phrase id -- 国内游路线.旅行社id 与 旅行社.词条id\n-- Outbound route.Travel agencyid can be joined with Travel agency.Phrase id -- 出境游路线.旅行社id 与 旅行社.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "级别": "Level", "出境游国家数量": "Number_of_countries_travelling_abroad", "国内游城市数量": "Number_of_cities_in_the_country", "出境游路线数量": "Number_of_exit_routes", "国内游路线数量": "Number_of_internal_routes", "亚洲排名": "Asian_ranking", "接待海外游客数量": "Number_of_overseas_visitors", "境外公司数量": "Number_of_offshore_companies", "控股子公司数量": "Number_of_holding_subsidiaries", "有业务关系的旅行商数量": "Number_of_travellers_in_business_relationship", "免税店数量": "Number_of_duty-free_shops", "路线名称": "Route_Name", "旅行社id": "Travel_agencyid", "出发城市": "Let's_go_to_the_city", "天数": "Days", "成人价格": "Adult_price", "儿童价格": "Child_price", "国家数量": "Number_of_countries", "景点数": "Viewpoints", "门票总价格": "Total_ticket_prices", "路线id": "Route_id", "国家": "National", "旅行天数": "Days_of_travel", "景点数量": "Number_of_sites", "预售价格": "Pre-sale_price", "参团价格": "Panel_price", "起团人数": "Number_of_people_starting_a_mission", "个人价格": "Personal_price", "内舱房价格": "Indoor_room_prices", "海景房价格": "Seaview_House_Prices", "阳台房价格": "Price_of_balcony_room", "航行区域": "Navigation_area", "邮轮公司": "Cruise_Company"}, "table_en": {"旅行社": "Travel_agency", "出境游路线": "Outbound_route", "出境游所含国家": "Countries_covered_by_travel_abroad", "国内游路线": "Internal_routes", "邮轮路线": "Cruise_route"}}, "世界经济峰会": {"sqlite": "CREATE TABLE G20 Summit (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Year VARCHAR(50), -- 年份\n  Session DATETIME, -- 届次\n  Host country INTEGER, -- 主办国\n  Host city VARCHAR(50), -- 主办城市\n  Number of countries participating VARCHAR(50), -- 参加国家数量\n);\nCREATE TABLE World Economic Forum (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Session DATETIME, -- 届次\n  Number of countries participating INTEGER, -- 参加国家数量\n  Number of Führers participating INTEGER, -- 参加的元首人数\n  Total number of participants INTEGER, -- 参加总人数\n  Number of seminars INTEGER, -- 研讨会数量\n);\nCREATE TABLE World Property Networking Expo (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Year VARCHAR(50), -- 年份\n  Number of summit forums DATETIME, -- 高峰论坛数量\n  Number of guests INTEGER, -- 参会嘉宾数\n  Number of participating enterprises INTEGER, -- 参会企业数\n  Number of visitors INTEGER, -- 观展人数\n);\nCREATE TABLE China International Import Fair (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Year VARCHAR(50), -- 年份\n  Number of enterprises participating DATETIME, -- 参加企业数\n  I'm willing to make a deal INTEGER, -- 意向成交额\n  Growth rate of turnover INTEGER, -- 成交额增长率\n);\n", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "年份": "Year", "届次": "Session", "主办国": "Host_country", "主办城市": "Host_city", "参加国家数量": "Number_of_countries_participating", "参加的元首人数": "Number_of_Führers_participating", "参加总人数": "Total_number_of_participants", "研讨会数量": "Number_of_seminars", "高峰论坛数量": "Number_of_summit_forums", "参会嘉宾数": "Number_of_guests", "参会企业数": "Number_of_participating_enterprises", "观展人数": "Number_of_visitors", "参加企业数": "Number_of_enterprises_participating", "意向成交额": "I'm_willing_to_make_a_deal", "成交额增长率": "Growth_rate_of_turnover"}, "table_en": {"G20峰会": "G20_Summit", "世界经济论坛": "World_Economic_Forum", "世界物联网博览会": "World_Property_Networking_Expo", "中国国际进口博览会": "China_International_Import_Fair"}}, "中国城市": {"sqlite": "CREATE TABLE Province (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of Bailiwicks VARCHAR(50), -- 下辖区数量\n  Area INTEGER, -- 面积\n  Population INTEGER, -- 人口\n  Climate conditions INTEGER, -- 气候条件\n  Save the flowers VARCHAR(50), -- 省花\n  - No  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no VARCHAR(50), -- 省树\n);\nCREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area VARCHAR(50), -- 面积\n  Population INTEGER, -- 人口\n  The market flower INTEGER, -- 市花\n  Departmental id VARCHAR(50), -- 所属省id\n);\nCREATE TABLE Total provincial production (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Province id DATETIME, -- 省份id\n  GDP INTEGER, -- GDP\n  GDP per capita INTEGER, -- 人均GDP\n);\nCREATE TABLE Gross municipal product (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Urban id DATETIME, -- 城市id\n  GDP INTEGER, -- GDP\n  GDP per capita INTEGER, -- 人均GDP\n);\n-- Gross municipal product.Urban id can be joined with Urban.Phrase id -- 市生产总值.城市id 与 城市.词条id\n-- Urban.Departmental id can be joined with Province.Phrase id -- 城市.所属省id 与 省份.词条id\n-- Total provincial production.Province id can be joined with Province.Phrase id -- 省生产总值.省份id 与 省份.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "下辖区数量": "Number_of_Bailiwicks", "面积": "Area", "人口": "Population", "气候条件": "Climate_conditions", "省花": "Save_the_flowers", "省树": "-_No__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no__no", "市花": "The_market_flower", "所属省id": "Departmental_id", "年份": "Year", "省份id": "Province_id", "GDP": "GDP", "人均GDP": "GDP_per_capita", "城市id": "Urban_id"}, "table_en": {"省份": "Province", "城市": "Urban", "省生产总值": "Total_provincial_production", "市生产总值": "Gross_municipal_product"}}, "中国菜系": {"sqlite": "CREATE TABLE It's a vegetable department (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Region of origin VARCHAR(50), -- 起源地区\n  Time of origin VARCHAR(50), -- 起源时间\n  Taste VARCHAR(50), -- 口味\n  Is it the four major dishes? VARCHAR(50), -- 是否是四大菜系\n  Is it the 8th class? VARCHAR(50), -- 是否是八大菜系\n);\nCREATE TABLE Vegetables distributed in urban areas (\n  It's the id VARCHAR(50) PRIMARY KEY, -- 菜系id\n  Urban INTEGER, -- 城市\n  Level of popularity VARCHAR(50), -- 受欢迎程度\n  Number of main restaurants INTEGER, -- 主要餐厅数量\n  Distribution Density INTEGER, -- 分布密度\n  Version Type INTEGER, -- 版本类型\n);\nCREATE TABLE Vegetables (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Place of origin VARCHAR(50), -- 起源地\n  Version Number VARCHAR(50), -- 版本数量\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE It's a dish-reciprocal department (\n  Vegetable id INTEGER PRIMARY KEY, -- 菜品id\n  It's the id INTEGER, -- 菜系id\n  Taste INTEGER, -- 口味\n);\n-- It's a dish-reciprocal department.It's the id can be joined with It's a vegetable department.Phrase id -- 菜品对应菜系.菜系id 与 菜系.词条id\n-- Vegetables distributed in urban areas.It's the id can be joined with It's a vegetable department.Phrase id -- 菜系分布城市.菜系id 与 菜系.词条id\n-- It's a dish-reciprocal department.Vegetable id can be joined with Vegetables.Phrase id -- 菜品对应菜系.菜品id 与 菜品.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "起源地区": "Region_of_origin", "起源时间": "Time_of_origin", "口味": "Taste", "是否是四大菜系": "Is_it_the_four_major_dishes?", "是否是八大菜系": "Is_it_the_8th_class?", "菜系id": "It's_the_id", "城市": "Urban", "受欢迎程度": "Level_of_popularity", "主要餐厅数量": "Number_of_main_restaurants", "分布密度": "Distribution_Density", "版本类型": "Version_Type", "起源地": "Place_of_origin", "版本数量": "Version_Number", "排名": "Rank", "菜品id": "Vegetable_id"}, "table_en": {"菜系": "It's_a_vegetable_department", "菜系分布城市": "Vegetables_distributed_in_urban_areas", "菜品": "Vegetables", "菜品对应菜系": "It's_a_dish-reciprocal_department"}}, "智能音箱": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  Number of smart sound boxes VARCHAR(50), -- 智能音箱款数\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE Soundbox Products (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which Id belongs VARCHAR(50), -- 所属公司id\n  Price of sale INTEGER, -- 售价\n  Rank INTEGER, -- 排名\n  Upgrade INTEGER, -- 上升名次\n);\nCREATE TABLE Sale of products (\n  Product id INTEGER PRIMARY KEY, -- 产品id\n  Quarterly INTEGER, -- 季度\n  Sales VARCHAR(50), -- 销售量\n  Growth in sales INTEGER, -- 销售量增长\n);\n-- Soundbox Products.Company to which Id belongs can be joined with Company.Phrase id -- 音箱产品.所属公司id 与 公司.词条id\n-- Sale of products.Product id can be joined with Soundbox Products.Phrase id -- 产品销售.产品id 与 音箱产品.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属国家": "Country_of_nationality", "智能音箱款数": "Number_of_smart_sound_boxes", "排名": "Rank", "所属公司id": "Company_to_which_Id_belongs", "售价": "Price_of_sale", "上升名次": "Upgrade", "产品id": "Product_id", "季度": "Quarterly", "销售量": "Sales", "销售量增长": "Growth_in_sales"}, "table_en": {"公司": "Company", "音箱产品": "Soundbox_Products", "产品销售": "Sale_of_products"}}, "各学校假期": {"sqlite": "CREATE TABLE Primary and secondary school holidays in the provinces (\n  Province VARCHAR(50) PRIMARY KEY, -- 省份\n  Grade VARCHAR(50), -- 年级\n  Days of cold leave VARCHAR(50), -- 寒假天数\n  Days of summer vacation INTEGER, -- 暑假天数\n);\nCREATE TABLE University holidays (\n  School INTEGER PRIMARY KEY, -- 学校\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Days of cold leave VARCHAR(50), -- 寒假天数\n  Days of summer vacation INTEGER, -- 暑假天数\n);\n", "columns_en": {"省份": "Province", "年级": "Grade", "寒假天数": "Days_of_cold_leave", "暑假天数": "Days_of_summer_vacation", "学校": "School", "所属省份": "Provinces_to_which_they_belong"}, "table_en": {"各省中小学假期": "Primary_and_secondary_school_holidays_in_the_provinces", "大学假期": "University_holidays"}}, "建筑类奖项": {"sqlite": "CREATE TABLE Construction Award (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Launch Time VARCHAR(50), -- 发起时间\n  Launcher DATETIME, -- 发起人\n  Title VARCHAR(50), -- 称号\n  Total bonus VARCHAR(50), -- 总奖金\n  Years between selections INTEGER, -- 评选间隔年数\n  Number of sessions held INTEGER, -- 举办届数\n);\nCREATE TABLE List of countries that have received construction awards (\n  Award id INTEGER PRIMARY KEY, -- 奖项id\n  National INTEGER, -- 国家\n  Number VARCHAR(50), -- 数量\n);\nCREATE TABLE Architect (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Graduate schools VARCHAR(50), -- 毕业院校\n  Number of works VARCHAR(50), -- 作品数量\n);\nCREATE TABLE List of awards for the Plyzek Award (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Laureate id INTEGER, -- 获奖人id\n  Nationality VARCHAR(50), -- 国籍\n);\nCREATE TABLE Akahan Building Award Winners (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Name of award-winning building INTEGER, -- 获奖建筑名称\n  It's in the city VARCHAR(50), -- 位于城市\n   Other Organiser VARCHAR(50), -- 位于国家\n  Designerid VARCHAR(50), -- 设计者id\n);\n-- List of countries that have received construction awards.Award id can be joined with Construction Award.Phrase id -- 建筑奖各国名单.奖项id 与 建筑奖项.词条id\n-- List of awards for the Plyzek Award.Laureate id can be joined with Architect.Phrase id -- 普利兹克奖获奖名单.获奖人id 与 建筑师.词条id\n-- Akahan Building Award Winners.Designerid can be joined with Architect.Phrase id -- 阿卡汗建筑奖获奖名单.设计者id 与 建筑师.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "发起时间": "Launch_Time", "发起人": "Launcher", "称号": "Title", "总奖金": "Total_bonus", "评选间隔年数": "Years_between_selections", "举办届数": "Number_of_sessions_held", "奖项id": "Award_id", "国家": "National", "数量": "Number", "姓名": "Name", "国籍": "Nationality", "毕业院校": "Graduate_schools", "作品数量": "Number_of_works", "年份": "Year", "届数": "Number_of_sessions", "获奖人id": "Laureate_id", "获奖建筑名称": "Name_of_award-winning_building", "位于城市": "It's_in_the_city", "位于国家": "_Other_Organiser", "设计者id": "Designerid"}, "table_en": {"建筑奖项": "Construction_Award", "建筑奖各国名单": "List_of_countries_that_have_received_construction_awards", "建筑师": "Architect", "普利兹克奖获奖名单": "List_of_awards_for_the_Plyzek_Award", "阿卡汗建筑奖获奖名单": "Akahan_Building_Award_Winners"}}, "足球欧洲杯": {"sqlite": "CREATE TABLE Football players (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Nationality VARCHAR(50), -- 国籍\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Height DATETIME, -- 身高\n  body weight INTEGER, -- 体重\n  Professional characteristics INTEGER, -- 专业特点\n  Field position VARCHAR(50), -- 场上位置\n  Use your feet VARCHAR(50), -- 惯用脚\n);\nCREATE TABLE The Eunuchs (\n  Season VARCHAR(50) PRIMARY KEY, -- 赛季\n  Player id INTEGER, -- 球员id\n  It's part of the team INTEGER, -- 所属球队\n  Number of appearances VARCHAR(50), -- 出场次数\n  Number of goals INTEGER, -- 进球次数\n  Number of offensives INTEGER, -- 助攻次数\n);\nCREATE TABLE Euclid's best player (\n  Number of sessions INTEGER PRIMARY KEY, -- 届数\n  Year INTEGER, -- 年份\n  Best player id DATETIME, -- 最佳球员id\n  National INTEGER, -- 国家\n  Field position VARCHAR(50), -- 场上位置\n  Team scores VARCHAR(50), -- 球队成绩\n);\nCREATE TABLE Euclid's best shot (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Year INTEGER, -- 年份\n  Best shooter id DATETIME, -- 最佳射手id\n  National INTEGER, -- 国家\n  Field position VARCHAR(50), -- 场上位置\n  Goal VARCHAR(50), -- 进球数\n);\nCREATE TABLE Number of sportspersons on the field (\n  Synchronising folder INTEGER PRIMARY KEY, -- 名次\n  Number of appearances INTEGER, -- 出场次数\n  Athlete id INTEGER, -- 运动员id\n  National INTEGER, -- 国家\n  Field position VARCHAR(50), -- 场上位置\n);\n-- Euclid's best player.Best player id can be joined with Football players.Phrase id -- 欧冠最佳球员.最佳球员id 与 足球运动员.词条id\n-- Euclid's best shot.Best shooter id can be joined with Football players.Phrase id -- 欧冠最佳射手.最佳射手id 与 足球运动员.词条id\n-- Number of sportspersons on the field.Athlete id can be joined with Football players.Phrase id -- 运动员欧冠出场次数.运动员id 与 足球运动员.词条id\n-- The Eunuchs.Player id can be joined with Football players.Phrase id -- 欧冠赛事.球员id 与 足球运动员.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "国籍": "Nationality", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "身高": "Height", "体重": "body_weight", "专业特点": "Professional_characteristics", "场上位置": "Field_position", "惯用脚": "Use_your_feet", "赛季": "Season", "球员id": "Player_id", "所属球队": "It's_part_of_the_team", "出场次数": "Number_of_appearances", "进球次数": "Number_of_goals", "助攻次数": "Number_of_offensives", "届数": "Number_of_sessions", "年份": "Year", "最佳球员id": "Best_player_id", "国家": "National", "球队成绩": "Team_scores", "最佳射手id": "Best_shooter_id", "进球数": "Goal", "名次": "Synchronising_folder", "运动员id": "Athlete_id"}, "table_en": {"足球运动员": "Football_players", "欧冠赛事": "The_Eunuchs", "欧冠最佳球员": "Euclid's_best_player", "欧冠最佳射手": "Euclid's_best_shot", "运动员欧冠出场次数": "Number_of_sportspersons_on_the_field"}}, "中国民族": {"sqlite": "CREATE TABLE Nationalities (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Population VARCHAR(50), -- 人口\n  Languages INTEGER, -- 语言\n  Religion VARCHAR(50), -- 宗教信仰\n);\nCREATE TABLE National cities (\n  National id VARCHAR(50) PRIMARY KEY, -- 民族id\n  Name of city INTEGER, -- 城市名称\n  Population VARCHAR(50), -- 人口\n  Percentage INTEGER, -- 比例\n);\nCREATE TABLE Folk festivals (\n  Holidays INTEGER PRIMARY KEY, -- 节日\n  National id VARCHAR(50), -- 民族id\n  Time INTEGER, -- 时间\n  Memorial DATETIME, -- 纪念\n);\n-- Folk festivals.National id can be joined with Nationalities.Phrase id -- 民俗节日.民族id 与 民族.词条id\n-- National cities.National id can be joined with Nationalities.Phrase id -- 民族城市.民族id 与 民族.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "人口": "Population", "语言": "Languages", "宗教信仰": "Religion", "民族id": "National_id", "城市名称": "Name_of_city", "比例": "Percentage", "节日": "Holidays", "时间": "Time", "纪念": "Memorial"}, "table_en": {"民族": "Nationalities", "民族城市": "National_cities", "民俗节日": "Folk_festivals"}}, "医美APP": {"sqlite": "CREATE TABLE Medical APP (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Cognitive Rating VARCHAR(50), -- 认知度排名\n  Market occupancy rate INTEGER, -- 市场占有率\n  Number of health-care beauty institutions in place INTEGER, -- 入驻的医疗美容机构数量\n);\nCREATE TABLE Beauty products (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  National VARCHAR(50), -- 国家\n  Cognitiveness VARCHAR(50), -- 认知度\n);\nCREATE TABLE National beauty markets (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  National INTEGER, -- 国家\n  Comfort penetration rate VARCHAR(50), -- 美容渗透率\n  Number of beauty doctors INTEGER, -- 美容医生数量\n  Number of beauty products INTEGER, -- 美容产品数量\n  Number of cosmetic items INTEGER, -- 整容项目数\n);\nCREATE TABLE Age of prosthetic personnel (\n  Country id INTEGER PRIMARY KEY, -- 国家id\n  Gender INTEGER, -- 性别\n  Age group VARCHAR(50), -- 年龄段\n  Comfort penetration rate VARCHAR(50), -- 美容渗透率\n  Percentage of persons intending to be plasticized INTEGER, -- 整容意向人群占比\n  Number of prosthetics INTEGER, -- 整容人数\n  Amount of consumption INTEGER, -- 消费金额\n);\nCREATE TABLE Distribution of all forms of beauty (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Country id DATETIME, -- 国家id\n  Surgical plastic surgery as a percentage INTEGER, -- 手术整容占比\n  Growth rate of surgical demand INTEGER, -- 手术需求增长率\n  Micro orthopaedic ratio INTEGER, -- 微整形占比\n  Microstructured demand growth rate INTEGER, -- 微整形需求增长率\n);\nCREATE TABLE Chinese beauty is concerned (\n  Platform INTEGER PRIMARY KEY, -- 平台\n  Number of articles published VARCHAR(50), -- 发布文章数量\n  Reader of articles INTEGER, -- 文章阅读人次\n  Coptics INTEGER, -- 科普视频数\n  Video viewing times INTEGER, -- 视频观看人次\n);\n-- Age of prosthetic personnel.Country id can be joined with National beauty markets.Phrase id -- 整容人员年龄.国家id 与 各国美容市场.词条id\n-- Distribution of all forms of beauty.Country id can be joined with National beauty markets.Phrase id -- 各类美容形式分布.国家id 与 各国美容市场.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "认知度排名": "Cognitive_Rating", "市场占有率": "Market_occupancy_rate", "入驻的医疗美容机构数量": "Number_of_health-care_beauty_institutions_in_place", "国家": "National", "认知度": "Cognitiveness", "美容渗透率": "Comfort_penetration_rate", "美容医生数量": "Number_of_beauty_doctors", "美容产品数量": "Number_of_beauty_products", "整容项目数": "Number_of_cosmetic_items", "国家id": "Country_id", "性别": "Gender", "年龄段": "Age_group", "整容意向人群占比": "Percentage_of_persons_intending_to_be_plasticized", "整容人数": "Number_of_prosthetics", "消费金额": "Amount_of_consumption", "年份": "Year", "手术整容占比": "Surgical_plastic_surgery_as_a_percentage", "手术需求增长率": "Growth_rate_of_surgical_demand", "微整形占比": "Micro_orthopaedic_ratio", "微整形需求增长率": "Microstructured_demand_growth_rate", "平台": "Platform", "发布文章数量": "Number_of_articles_published", "文章阅读人次": "Reader_of_articles", "科普视频数": "Coptics", "视频观看人次": "Video_viewing_times"}, "table_en": {"医美APP": "Medical_APP", "美容产品": "Beauty_products", "各国美容市场": "National_beauty_markets", "整容人员年龄": "Age_of_prosthetic_personnel", "各类美容形式分布": "Distribution_of_all_forms_of_beauty", "中国美容关注": "Chinese_beauty_is_concerned"}}, "枪击事件": {"sqlite": "CREATE TABLE National (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of population VARCHAR(50), -- 人口数量\n  Number of guns used for civilian purposes INTEGER, -- 民用枪支数\n  Number of military firearms INTEGER, -- 军用枪支数\n  Number of civilian firearms held per 100 population INTEGER, -- 每100人持有的民用枪支数\n);\nCREATE TABLE Shots (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Country id DATETIME, -- 国家id\n  Number of shootings INTEGER, -- 枪击事件数量\n  Number of deaths INTEGER, -- 死亡人数\n  Number of injuries INTEGER, -- 受伤人数\n);\nCREATE TABLE School shootings in the United States in recent years (\n  Year INTEGER PRIMARY KEY, -- 年份\n  The city is happening DATETIME, -- 发生城市\n  Number of students affected VARCHAR(50), -- 受影响学生数量\n  Casualties INTEGER, -- 伤亡人数\n  Age of shooter INTEGER, -- 枪击者年龄\n  Nationality of the shooter INTEGER, -- 枪击者国籍\n);\nCREATE TABLE South Korea's suicide entertainment star (\n  Name VARCHAR(50) PRIMARY KEY, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Age VARCHAR(50), -- 年龄\n  Time of death INTEGER, -- 死亡时间\n  Are you depressed? DATETIME, -- 是否患抑郁症\n);\n-- Shots.Country id can be joined with National.Phrase id -- 枪击事件.国家id 与 国家.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "人口数量": "Number_of_population", "民用枪支数": "Number_of_guns_used_for_civilian_purposes", "军用枪支数": "Number_of_military_firearms", "每100人持有的民用枪支数": "Number_of_civilian_firearms_held_per_100_population", "年份": "Year", "国家id": "Country_id", "枪击事件数量": "Number_of_shootings", "死亡人数": "Number_of_deaths", "受伤人数": "Number_of_injuries", "发生城市": "The_city_is_happening", "受影响学生数量": "Number_of_students_affected", "伤亡人数": "Casualties", "枪击者年龄": "Age_of_shooter", "枪击者国籍": "Nationality_of_the_shooter", "姓名": "Name", "性别": "Gender", "年龄": "Age", "死亡时间": "Time_of_death", "是否患抑郁症": "Are_you_depressed?"}, "table_en": {"国家": "National", "枪击事件": "Shots", "美国近几年校园枪击事件": "School_shootings_in_the_United_States_in_recent_years", "韩国自杀的娱乐明星": "South_Korea's_suicide_entertainment_star"}}, "冬季奥运会": {"sqlite": "CREATE TABLE Winter Olympics (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of sessions VARCHAR(50), -- 届数\n  Host city INTEGER, -- 举办城市\n  Host country VARCHAR(50), -- 举办国家\n  Time VARCHAR(50), -- 时间\n  Number of countries participating DATETIME, -- 参赛国家数量\n  Number of competitions INTEGER, -- 比赛项目数量\n  Number of athletes participating INTEGER, -- 参赛运动员数量\n);\nCREATE TABLE Olympics sponsors (\n  Name of sponsor INTEGER PRIMARY KEY, -- 赞助商名称\n  Olympic id VARCHAR(50), -- 奥运会id\n);\nCREATE TABLE The 2018 medals (\n  Rank INTEGER PRIMARY KEY, -- 排名\n  National INTEGER, -- 国家\n  Number of gold medals VARCHAR(50), -- 金牌数\n  Number of silver medals INTEGER, -- 银牌数\n  Number of bronze medals INTEGER, -- 铜牌数\n  Total number of medals INTEGER, -- 奖牌总数\n);\n-- Olympics sponsors.Olympic id can be joined with Winter Olympics.Phrase id -- 奥运会赞助商.奥运会id 与 冬季奥运会.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "届数": "Number_of_sessions", "举办城市": "Host_city", "举办国家": "Host_country", "时间": "Time", "参赛国家数量": "Number_of_countries_participating", "比赛项目数量": "Number_of_competitions", "参赛运动员数量": "Number_of_athletes_participating", "赞助商名称": "Name_of_sponsor", "奥运会id": "Olympic_id", "排名": "Rank", "国家": "National", "金牌数": "Number_of_gold_medals", "银牌数": "Number_of_silver_medals", "铜牌数": "Number_of_bronze_medals", "奖牌总数": "Total_number_of_medals"}, "table_en": {"冬季奥运会": "Winter_Olympics", "奥运会赞助商": "Olympics_sponsors", "2018年奖牌榜": "The_2018_medals"}}, "中国戏剧": {"sqlite": "CREATE TABLE Theatre (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Non-suffering level VARCHAR(50), -- 非遗级别\n  Origin VARCHAR(50), -- 发源地\n  Time of origin VARCHAR(50), -- 起源时间\n);\nCREATE TABLE Theatrical distribution of cities (\n  Dramaid VARCHAR(50) PRIMARY KEY, -- 戏剧id\n  Urban INTEGER, -- 城市\n  Welcomer Heat VARCHAR(50), -- 受欢迎热度\n  Number of fans INTEGER, -- 戏迷数量\n  Number of activities INTEGER, -- 活动数量\n);\nCREATE TABLE Theatrical performances (\n  Name of activity INTEGER PRIMARY KEY, -- 活动名称\n  Dramaid VARCHAR(50), -- 戏剧id\n  Urban INTEGER, -- 城市\n  Show time VARCHAR(50), -- 演出时间\n  Number of votes sold DATETIME, -- 售出票数\n  Highest fare INTEGER, -- 最高票价\n  Minimum fare INTEGER, -- 最低票价\n);\n-- Theatrical distribution of cities.Dramaid can be joined with Theatre.Phrase id -- 戏剧分布城市.戏剧id 与 戏剧.词条id\n-- Theatrical performances.Dramaid can be joined with Theatre.Phrase id -- 戏剧演出活动.戏剧id 与 戏剧.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "非遗级别": "Non-suffering_level", "发源地": "Origin", "起源时间": "Time_of_origin", "戏剧id": "Dramaid", "城市": "Urban", "受欢迎热度": "Welcomer_Heat", "戏迷数量": "Number_of_fans", "活动数量": "Number_of_activities", "活动名称": "Name_of_activity", "演出时间": "Show_time", "售出票数": "Number_of_votes_sold", "最高票价": "Highest_fare", "最低票价": "Minimum_fare"}, "table_en": {"戏剧": "Theatre", "戏剧分布城市": "Theatrical_distribution_of_cities", "戏剧演出活动": "Theatrical_performances"}}, "NBA奖项": {"sqlite": "CREATE TABLE Basketball player (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  We're going to the audition year VARCHAR(50), -- 参加选秀年\n  Whether or not to be a mound DATETIME, -- 是否状元\n  Get the team BINARY, -- 获得球队\n  Graduate schools VARCHAR(50), -- 毕业院校\n);\nCREATE TABLE MVP Records (\n  Season VARCHAR(50) PRIMARY KEY, -- 赛季\n  Player id INTEGER, -- 球员id\n  Nationality INTEGER, -- 国籍\n  It's part of the team VARCHAR(50), -- 所属球队\n);\nCREATE TABLE Team (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Team Name INTEGER, -- 中文队名\n  Chai District VARCHAR(50), -- 赛区\n  Union to which they belong VARCHAR(50), -- 所属联盟\n  Number of crowns VARCHAR(50), -- 夺冠次数\n);\nCREATE TABLE The NBA champion (\n  Season INTEGER PRIMARY KEY, -- 赛季\n  Team id INTEGER, -- 球队id\n  Chief coach INTEGER, -- 总教练\n);\n-- MVP Records.Player id can be joined with Basketball player.Phrase id -- MVP记录.球员id 与 篮球运动员.词条id\n-- The NBA champion.Team id can be joined with Team.Phrase id -- NBA总冠军.球队id 与 球队.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "参加选秀年": "We're_going_to_the_audition_year", "是否状元": "Whether_or_not_to_be_a_mound", "获得球队": "Get_the_team", "毕业院校": "Graduate_schools", "赛季": "Season", "球员id": "Player_id", "国籍": "Nationality", "所属球队": "It's_part_of_the_team", "中文队名": "Chinese_Team_Name", "赛区": "Chai_District", "所属联盟": "Union_to_which_they_belong", "夺冠次数": "Number_of_crowns", "球队id": "Team_id", "总教练": "Chief_coach"}, "table_en": {"篮球运动员": "Basketball_player", "MVP记录": "MVP_Records", "球队": "Team", "NBA总冠军": "The_NBA_champion"}}, "植物经济价值": {"sqlite": "CREATE TABLE Plants (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Acupuncture INTEGER, -- 学名\n  Observing value VARCHAR(50), -- 观赏价值\n  Value of medicines BINARY, -- 药用价值\n  Practical value BINARY, -- 实用价值\n);\nCREATE TABLE The most expensive plant (\n  Plant id BINARY PRIMARY KEY, -- 植物id\n  Monochrome value INTEGER, -- 单株价值\n  Nurturing Time INTEGER, -- 培养时间\n  Number INTEGER, -- 数量\n);\nCREATE TABLE Botanical plant collection (\n  Plant id INTEGER PRIMARY KEY, -- 植物id\n  Year INTEGER, -- 年份\n  Areas under cultivation DATETIME, -- 种植面积\n  Number of sales INTEGER, -- 销售数量\n  Amount of sale INTEGER, -- 销售金额\n  Amount of export INTEGER, -- 出口金额\n);\nCREATE TABLE China Desert (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Region VARCHAR(50), -- 地区\n  Desert area DATETIME, -- 沙漠面积\n  Shading area INTEGER, -- 沙化面积\n);\nCREATE TABLE Desert plants (\n  Plant id INTEGER PRIMARY KEY, -- 植物id\n  Desert id INTEGER, -- 沙漠id\n  Areas under cultivation INTEGER, -- 种植面积\n);\n-- Desert plants.Plant id can be joined with Plants.Phrase id -- 沙漠植物.植物id 与 植物.词条id\n-- The most expensive plant.Plant id can be joined with Plants.Phrase id -- 最贵的植物.植物id 与 植物.词条id\n-- Botanical plant collection.Plant id can be joined with Plants.Phrase id -- 盆栽植物营收.植物id 与 植物.词条id\n-- Desert plants.Desert id can be joined with China Desert.Phrase id -- 沙漠植物.沙漠id 与 中国沙漠.词条id", "columns_en": {"词条id": "Phrase_id", "学名": "Acupuncture", "观赏价值": "Observing_value", "药用价值": "Value_of_medicines", "实用价值": "Practical_value", "植物id": "Plant_id", "单株价值": "Monochrome_value", "培养时间": "Nurturing_Time", "数量": "Number", "年份": "Year", "种植面积": "Areas_under_cultivation", "销售数量": "Number_of_sales", "销售金额": "Amount_of_sale", "出口金额": "Amount_of_export", "地区": "Region", "沙漠面积": "Desert_area", "沙化面积": "Shading_area", "沙漠id": "Desert_id"}, "table_en": {"植物": "Plants", "最贵的植物": "The_most_expensive_plant", "盆栽植物营收": "Botanical_plant_collection", "中国沙漠": "China_Desert", "沙漠植物": "Desert_plants"}}, "X公司工资": {"sqlite": "CREATE TABLE Professional groups (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Officer-in-Charge VARCHAR(50), -- 负责人\n  Number of employees VARCHAR(50), -- 员工数量\n  Target collection INTEGER, -- 目标营收\n  Cost expenditure INTEGER, -- 成本支出\n);\nCREATE TABLE Sector (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name of department INTEGER, -- 部门名称\n  Duties VARCHAR(50), -- 职责\n  %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 VARCHAR(50), -- 所属群id\n);\nCREATE TABLE Staff (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Functional title VARCHAR(50), -- 职称\n  Salaries VARCHAR(50), -- 薪资\n  Age INTEGER, -- 年龄\n  Length of service INTEGER, -- 工龄\n  Department to which id INTEGER, -- 所属部门id\n);\nCREATE TABLE Departmental personnel (\n  Sector id INTEGER PRIMARY KEY, -- 部门id\n  Year INTEGER, -- 年份\n  Number of employees DATETIME, -- 员工数量\n  Separations INTEGER, -- 离职人数\n  Number of recruits INTEGER, -- 招聘人数\n);\n-- Staff.Department to which id can be joined with Sector.Phrase id -- 员工.所属部门id 与 部门.词条id\n-- Departmental personnel.Sector id can be joined with Sector.Phrase id -- 部门人员.部门id 与 部门.词条id\n-- Sector.%1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1 can be joined with Professional groups.Phrase id -- 部门.所属群id 与 事业群.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "负责人": "Officer-in-Charge", "员工数量": "Number_of_employees", "目标营收": "Target_collection", "成本支出": "Cost_expenditure", "部门名称": "Name_of_department", "职责": "Duties", "所属群id": "%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1_%1", "姓名": "Name", "职称": "Functional_title", "薪资": "Salaries", "年龄": "Age", "工龄": "Length_of_service", "所属部门id": "Department_to_which_id", "部门id": "Sector_id", "年份": "Year", "离职人数": "Separations", "招聘人数": "Number_of_recruits"}, "table_en": {"事业群": "Professional_groups", "部门": "Sector", "员工": "Staff", "部门人员": "Departmental_personnel"}}, "中国卫视频道": {"sqlite": "CREATE TABLE Television (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's time to start VARCHAR(50), -- 开播时间\n  Online time DATETIME, -- 上线时间\n  Affiliated institutions DATETIME, -- 隶属机构\n);\nCREATE TABLE A TV show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time of delivery VARCHAR(50), -- 出品时间\n  It's a product company DATETIME, -- 出品公司\n  Issuer VARCHAR(50), -- 发行公司\n  Launch platform id VARCHAR(50), -- 首播平台id\n);\nCREATE TABLE The TV show's on (\n  TV dramad INTEGER PRIMARY KEY, -- 电视剧id\n  Platformid INTEGER, -- 平台id\n  Period INTEGER, -- 时间段\n  Rate of viewing VARCHAR(50), -- 收视率\n);\n-- A TV show.Launch platform id can be joined with Television.Phrase id -- 电视剧.首播平台id 与 电视台.词条id\n-- The TV show's on.Platformid can be joined with Television.Phrase id -- 电视剧收视.平台id 与 电视台.词条id\n-- The TV show's on.TV dramad can be joined with A TV show.Phrase id -- 电视剧收视.电视剧id 与 电视剧.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "开播时间": "It's_time_to_start", "上线时间": "Online_time", "隶属机构": "Affiliated_institutions", "出品时间": "Time_of_delivery", "出品公司": "It's_a_product_company", "发行公司": "Issuer", "首播平台id": "Launch_platform_id", "电视剧id": "TV_dramad", "平台id": "Platformid", "时间段": "Period", "收视率": "Rate_of_viewing"}, "table_en": {"电视台": "Television", "电视剧": "A_TV_show", "电视剧收视": "The_TV_show's_on"}}, "国家与宗教": {"sqlite": "CREATE TABLE National (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Organisation VARCHAR(50), -- 时区\n  National symbols INTEGER, -- 国家象征\n);\nCREATE TABLE Religion (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Founder VARCHAR(50), -- 创始人物\n  Founding location VARCHAR(50), -- 创始地点\n  Religious claims VARCHAR(50), -- 宗教主张\n  Proportion of followers VARCHAR(50), -- 教徒比例\n);\nCREATE TABLE Religions in all countries (\n  Religion id INTEGER PRIMARY KEY, -- 宗教id\n  Country id INTEGER, -- 国家id\n  Population of faith INTEGER, -- 信仰人口\n);\nCREATE TABLE Religious % (\n  Month INTEGER PRIMARY KEY, -- 月份\n  Country id DATETIME, -- 国家id\n  Percentage INTEGER, -- 比例\n);\n-- Religious %.Country id can be joined with National.Phrase id -- 信教比例.国家id 与 国家.词条id\n-- Religions in all countries.Country id can be joined with National.Phrase id -- 各国宗教.国家id 与 国家.词条id\n-- Religions in all countries.Religion id can be joined with Religion.Phrase id -- 各国宗教.宗教id 与 宗教.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "时区": "Organisation", "国家象征": "National_symbols", "创始人物": "Founder", "创始地点": "Founding_location", "宗教主张": "Religious_claims", "教徒比例": "Proportion_of_followers", "宗教id": "Religion_id", "国家id": "Country_id", "信仰人口": "Population_of_faith", "月份": "Month", "比例": "Percentage"}, "table_en": {"国家": "National", "宗教": "Religion", "各国宗教": "Religions_in_all_countries", "信教比例": "Religious_%"}}, "体育明星商业活动": {"sqlite": "CREATE TABLE Brand (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Brand name INTEGER, -- 品牌名\n   Other Organiser VARCHAR(50), -- 成立时间\n  Scope of operation DATETIME, -- 经营范围\n  Annual sales VARCHAR(50), -- 年销量\n);\nCREATE TABLE Sports star (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Nationality VARCHAR(50), -- 国籍\n  Create brandid VARCHAR(50), -- 创建品牌id\n);\nCREATE TABLE The voice of the athletes (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Propaganda id INTEGER, -- 代言品牌id\n  Year INTEGER, -- 年份\n  Advocacy costs DATETIME, -- 代言费\n);\n-- The voice of the athletes.Propaganda id can be joined with Brand.Phrase id -- 运动员的代言.代言品牌id 与 品牌.词条id\n-- The voice of the athletes.Starid can be joined with Sports star.Phrase id -- 运动员的代言.明星id 与 体育明星.词条id\n-- Sports star.Create brandid can be joined with Brand.Phrase id -- 体育明星.创建品牌id 与 品牌.词条id", "columns_en": {"词条id": "Phrase_id", "品牌名": "Brand_name", "成立时间": "_Other_Organiser", "经营范围": "Scope_of_operation", "年销量": "Annual_sales", "中文名": "Chinese_Name", "国籍": "Nationality", "创建品牌id": "Create_brandid", "明星id": "Starid", "代言品牌id": "Propaganda_id", "年份": "Year", "代言费": "Advocacy_costs"}, "table_en": {"品牌": "Brand", "体育明星": "Sports_star", "运动员的代言": "The_voice_of_the_athletes"}}, "中国CBA": {"sqlite": "CREATE TABLE Basketball team (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Team name INTEGER, -- 队名\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n   Other Organiser VARCHAR(50), -- 成立时间\n  Main premises DATETIME, -- 主场馆\n  Number of persons accommodated VARCHAR(50), -- 容纳人数\n  Master Coach INTEGER, -- 主教练\n  Sponsor VARCHAR(50), -- 赞助商家\n);\nCREATE TABLE Basketball player (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Nationalities VARCHAR(50), -- 民族\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Height DATETIME, -- 身高\n  body weight INTEGER, -- 体重\n  Part of the team  id INTEGER, -- 所属球队id\n  Field position INTEGER, -- 场上位置\n);\nCREATE TABLE Athlete record (\n  Player id VARCHAR(50) PRIMARY KEY, -- 球员id\n  The race INTEGER, -- 赛事\n  Category VARCHAR(50), -- 类别\n);\nCREATE TABLE CBA Champion-in-Chief (\n  Season VARCHAR(50) PRIMARY KEY, -- 赛季\n  ♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ INTEGER, -- 冠军球队id\n  Yakuza id INTEGER, -- 亚军球队id\n);\nCREATE TABLE The most valuable player (\n  Season INTEGER PRIMARY KEY, -- 赛季\n  Player id INTEGER, -- 球员id\n  Team id INTEGER, -- 球队id\n);\n-- Athlete record.Player id can be joined with Basketball player.Phrase id -- 运动员赛事记录.球员id 与 篮球运动员.词条id\n-- CBA Champion-in-Chief.♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ can be joined with Basketball team.Phrase id -- CBA总冠军.冠军球队id 与 篮球队.词条id\n-- Basketball player.Part of the team  id can be joined with Basketball team.Phrase id -- 篮球运动员.所属球队id 与 篮球队.词条id\n-- CBA Champion-in-Chief.Yakuza id can be joined with Basketball team.Phrase id -- CBA总冠军.亚军球队id 与 篮球队.词条id\n-- The most valuable player.Player id can be joined with Basketball player.Phrase id -- 最有价值球员.球员id 与 篮球运动员.词条id\n-- The most valuable player.Team id can be joined with Basketball team.Phrase id -- 最有价值球员.球队id 与 篮球队.词条id", "columns_en": {"词条id": "Phrase_id", "队名": "Team_name", "所属地区": "Territory_to_which_it_belongs", "成立时间": "_Other_Organiser", "主场馆": "Main_premises", "容纳人数": "Number_of_persons_accommodated", "主教练": "Master_Coach", "赞助商家": "Sponsor", "姓名": "Name", "国籍": "Nationality", "民族": "Nationalities", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "身高": "Height", "体重": "body_weight", "所属球队id": "Part_of_the_team__id", "场上位置": "Field_position", "球员id": "Player_id", "赛事": "The_race", "类别": "Category", "赛季": "Season", "冠军球队id": "♪_The_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪", "亚军球队id": "Yakuza_id", "球队id": "Team_id"}, "table_en": {"篮球队": "Basketball_team", "篮球运动员": "Basketball_player", "运动员赛事记录": "Athlete_record", "CBA总冠军": "CBA_Champion-in-Chief", "最有价值球员": "The_most_valuable_player"}}, "笔记本电脑": {"sqlite": "CREATE TABLE Notebooks (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Founder VARCHAR(50), -- 创始人\n  Country of nationality VARCHAR(50), -- 所属国家\n  The world's top 500 VARCHAR(50), -- 世界500强排名\n);\nCREATE TABLE Notebook products (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Advocate VARCHAR(50), -- 代言人\n  Companyid VARCHAR(50), -- 公司id\n);\nCREATE TABLE Notebook Model Series (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Screen Size VARCHAR(50), -- 屏幕尺寸\n  Resolution INTEGER, -- 分辨率\n  Memory Capacity INTEGER, -- 内存容量\n  Hard Disk Capacity INTEGER, -- 硬盘容量\n  CPU Main Frequency INTEGER, -- CPU主频\n  CPU model INTEGER, -- CPU型号\n  Price of sale VARCHAR(50), -- 售价\n  Time to go to the market INTEGER, -- 上市时间\n  Product id DATETIME, -- 产品id\n);\nCREATE TABLE It's a laptop-type platform for sale (\n  Model id INTEGER PRIMARY KEY, -- 型号id\n  Platform INTEGER, -- 平台\n  Sales VARCHAR(50), -- 售卖量\n  Rating INTEGER, -- 评分\n  Best evaluation INTEGER, -- 最好评价\n  Worst evaluation DATETIME, -- 最差评价\n);\n-- It's a laptop-type platform for sale.Model id can be joined with Notebook Model Series.Phrase id -- 笔记本型号平台售卖.型号id 与 笔记本型号系列.词条id\n-- Notebook Model Series.Product id can be joined with Notebook products.Phrase id -- 笔记本型号系列.产品id 与 笔记本产品.词条id\n-- Notebook products.Companyid can be joined with Notebooks.Phrase id -- 笔记本产品.公司id 与 笔记本公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "创始人": "Founder", "所属国家": "Country_of_nationality", "世界500强排名": "The_world's_top_500", "代言人": "Advocate", "公司id": "Companyid", "屏幕尺寸": "Screen_Size", "分辨率": "Resolution", "内存容量": "Memory_Capacity", "硬盘容量": "Hard_Disk_Capacity", "CPU主频": "CPU_Main_Frequency", "CPU型号": "CPU_model", "售价": "Price_of_sale", "上市时间": "Time_to_go_to_the_market", "产品id": "Product_id", "型号id": "Model_id", "平台": "Platform", "售卖量": "Sales", "评分": "Rating", "最好评价": "Best_evaluation", "最差评价": "Worst_evaluation"}, "table_en": {"笔记本公司": "Notebooks", "笔记本产品": "Notebook_products", "笔记本型号系列": "Notebook_Model_Series", "笔记本型号平台售卖": "It's_a_laptop-type_platform_for_sale"}}, "打车软件": {"sqlite": "CREATE TABLE Taxi APP (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  App Name INTEGER, -- app名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  Online time VARCHAR(50), -- 上线时间\n  Number of cities covered DATETIME, -- 覆盖城市数\n  Number of service users INTEGER, -- 服务用户数量\n);\nCREATE TABLE I'll take a cab (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Ideas VARCHAR(50), -- 理念\n  Price per kilometre VARCHAR(50), -- 每公里价格\n);\nCREATE TABLE The way the cars are supported by the APP (\n  Appid INTEGER PRIMARY KEY, -- appid\n  Modeid INTEGER, -- 方式id\n  Number of vehicles INTEGER, -- 车数量\n  Number of taxi calls per day INTEGER, -- 每日打车单数\n  Daily collection INTEGER, -- 每日营收\n  Market share INTEGER, -- 市场份额\n);\nCREATE TABLE Car-drive software to open the city (\n  Appid INTEGER PRIMARY KEY, -- appid\n  Urban INTEGER, -- 城市\n  Start time VARCHAR(50), -- 开通时间\n  Share of cities DATETIME, -- 占所在城市份额\n);\nCREATE TABLE Support for rental of vehicles by software (\n  Appid INTEGER PRIMARY KEY, -- appid\n  Urban INTEGER, -- 城市\n  Support for rental of vehicles VARCHAR(50), -- 是否支持租车\n  Do you support the return of vehicles? BINARY, -- 是否支持异地还车\n);\n-- The way the cars are supported by the APP.Modeid can be joined with I'll take a cab.Phrase id -- 各打车APP支持的方式.方式id 与 打车方式.词条id", "columns_en": {"词条id": "Phrase_id", "app名称": "App_Name", "所属公司": "Company_to_which_it_belongs", "上线时间": "Online_time", "覆盖城市数": "Number_of_cities_covered", "服务用户数量": "Number_of_service_users", "名称": "Name", "理念": "Ideas", "每公里价格": "Price_per_kilometre", "appid": "Appid", "方式id": "Modeid", "车数量": "Number_of_vehicles", "每日打车单数": "Number_of_taxi_calls_per_day", "每日营收": "Daily_collection", "市场份额": "Market_share", "城市": "Urban", "开通时间": "Start_time", "占所在城市份额": "Share_of_cities", "是否支持租车": "Support_for_rental_of_vehicles", "是否支持异地还车": "Do_you_support_the_return_of_vehicles?"}, "table_en": {"打车APP": "Taxi_APP", "打车方式": "I'll_take_a_cab", "各打车APP支持的方式": "The_way_the_cars_are_supported_by_the_APP", "打车软件开通城市": "Car-drive_software_to_open_the_city", "软件对租车的支持": "Support_for_rental_of_vehicles_by_software"}}, "奥斯卡金像奖": {"sqlite": "CREATE TABLE Filmworks (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Video Name INTEGER, -- 影片名\n  Director VARCHAR(50), -- 导演\n  National VARCHAR(50), -- 国家\n  Number of nominations VARCHAR(50), -- 提名次数\n  Number of awards INTEGER, -- 获奖次数\n);\nCREATE TABLE List of winning countries (\n  Year INTEGER PRIMARY KEY, -- 年份\n  The video shoots the country INTEGER, -- 影片拍摄国家\n  Number of awards VARCHAR(50), -- 获奖次数\n);\nCREATE TABLE Number of awards by actor (\n  Name INTEGER PRIMARY KEY, -- 姓名\n  Awards VARCHAR(50), -- 奖项\n  Number of nominations VARCHAR(50), -- 提名次数\n  Number of awards INTEGER, -- 获奖次数\n);\nCREATE TABLE The names of all the world's backs and backs (\n  Year INTEGER PRIMARY KEY, -- 年份\n  The Emperor's name DATETIME, -- 帝后姓名\n  ♪ The Emperor came from work id ♪ VARCHAR(50), -- 帝后来自作品id\n  Post-record name INTEGER, -- 影后姓名\n  It's from the film id VARCHAR(50), -- 影后来自作品id\n);\n-- The names of all the world's backs and backs.It's from the film id can be joined with Filmworks.Phrase id -- 历届帝后影后名单.影后来自作品id 与 电影作品.词条id\n-- The names of all the world's backs and backs.♪ The Emperor came from work id ♪ can be joined with Filmworks.Phrase id -- 历届帝后影后名单.帝后来自作品id 与 电影作品.词条id", "columns_en": {"词条id": "Phrase_id", "影片名": "Video_Name", "导演": "Director", "国家": "National", "提名次数": "Number_of_nominations", "获奖次数": "Number_of_awards", "年份": "Year", "影片拍摄国家": "The_video_shoots_the_country", "姓名": "Name", "奖项": "Awards", "帝后姓名": "The_Emperor's_name", "帝后来自作品id": "♪_The_Emperor_came_from_work_id_♪", "影后姓名": "Post-record_name", "影后来自作品id": "It's_from_the_film_id"}, "table_en": {"电影作品": "Filmworks", "获奖国家名单": "List_of_winning_countries", "各演员获奖次数": "Number_of_awards_by_actor", "历届帝后影后名单": "The_names_of_all_the_world's_backs_and_backs"}}, "游泳比赛": {"sqlite": "CREATE TABLE Swimming (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Invent time VARCHAR(50), -- 发明时间\n  Join the Olympics DATETIME, -- 加入奥运会时间\n);\nCREATE TABLE We're going to the swimming tables (\n  Swimming liked DATETIME PRIMARY KEY, -- 泳姿id\n  50 meters INTEGER, -- 50米\n  100 meters BINARY, -- 100米\n  200 meters BINARY, -- 200米\n  400 meters BINARY, -- 400米\n  800 meters BINARY, -- 800米\n  1500 meters BINARY, -- 1500米\n  5 000 meters BINARY, -- 5000米\n  10000 meters BINARY, -- 10000米\n  The race BINARY, -- 赛事\n);\nCREATE TABLE The name of the swimmers (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Height VARCHAR(50), -- 身高\n  body weight INTEGER, -- 体重\n  Professional characteristicsd INTEGER, -- 专业特点id\n);\nCREATE TABLE The track record (\n  Swimming liked INTEGER PRIMARY KEY, -- 泳姿id\n  Length INTEGER, -- 长度\n  Type of event INTEGER, -- 赛事类型\n  Athlete id VARCHAR(50), -- 运动员id\n  Time INTEGER, -- 用时\n  Recorded year INTEGER, -- 破记录年份\n);\n-- We're going to the swimming tables.Swimming liked can be joined with Swimming.Phrase id -- 各泳姿参赛项目.泳姿id 与 游泳泳姿.词条id\n-- The name of the swimmers.Professional characteristicsd can be joined with Swimming.Phrase id -- 泳坛名将.专业特点id 与 游泳泳姿.词条id\n-- The track record.Swimming liked can be joined with Swimming.Phrase id -- 赛事记录.泳姿id 与 游泳泳姿.词条id\n-- The track record.Athlete id can be joined with The name of the swimmers.Phrase id -- 赛事记录.运动员id 与 泳坛名将.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "发明时间": "Invent_time", "加入奥运会时间": "Join_the_Olympics", "泳姿id": "Swimming_liked", "50米": "50_meters", "100米": "100_meters", "200米": "200_meters", "400米": "400_meters", "800米": "800_meters", "1500米": "1500_meters", "5000米": "5_000_meters", "10000米": "10000_meters", "赛事": "The_race", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "身高": "Height", "体重": "body_weight", "专业特点id": "Professional_characteristicsd", "长度": "Length", "赛事类型": "Type_of_event", "运动员id": "Athlete_id", "用时": "Time", "破记录年份": "Recorded_year"}, "table_en": {"游泳泳姿": "Swimming", "各泳姿参赛项目": "We're_going_to_the_swimming_tables", "泳坛名将": "The_name_of_the_swimmers", "赛事记录": "The_track_record"}}, "赛事运动项目": {"sqlite": "CREATE TABLE Sports (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  State of origin VARCHAR(50), -- 起源国家\n  Form of the game VARCHAR(50), -- 比赛形式\n  Number of competitions VARCHAR(50), -- 比赛人数\n  Year of membership in the Olympic Games INTEGER, -- 加入奥运会年份\n);\nCREATE TABLE Project prevalence countries (\n  Item id DATETIME PRIMARY KEY, -- 项目id\n  National INTEGER, -- 国家\n  Total gold medals received VARCHAR(50), -- 所获金牌总数\n  Total number of medals won INTEGER, -- 所获奖牌总数\n);\nCREATE TABLE Number of sports medals (\n  Item id INTEGER PRIMARY KEY, -- 项目id\n  Type of event INTEGER, -- 赛事类型\n  Total number of small projects VARCHAR(50), -- 小项目总数\n  Total number of medals INTEGER, -- 奖牌总数\n);\n-- Number of sports medals.Item id can be joined with Sports.Phrase id -- 运动项目奖牌数.项目id 与 运动项目.词条id\n-- Project prevalence countries.Item id can be joined with Sports.Phrase id -- 项目流行国家.项目id 与 运动项目.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "起源国家": "State_of_origin", "比赛形式": "Form_of_the_game", "比赛人数": "Number_of_competitions", "加入奥运会年份": "Year_of_membership_in_the_Olympic_Games", "项目id": "Item_id", "国家": "National", "所获金牌总数": "Total_gold_medals_received", "所获奖牌总数": "Total_number_of_medals_won", "赛事类型": "Type_of_event", "小项目总数": "Total_number_of_small_projects", "奖牌总数": "Total_number_of_medals"}, "table_en": {"运动项目": "Sports", "项目流行国家": "Project_prevalence_countries", "运动项目奖牌数": "Number_of_sports_medals"}}, "房屋中介软件": {"sqlite": "CREATE TABLE Beijing Region (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Organisation VARCHAR(50), -- 所属区域\n  Number of buildings VARCHAR(50), -- 楼栋数\n  Households INTEGER, -- 户数\n  Number of primary schools in the vicinity INTEGER, -- 周边小学数量\n  Number of supermarkets around the perimeter INTEGER, -- 周边超市数量\n  Number of hospitals in the vicinity INTEGER, -- 周边医院数量\n);\nCREATE TABLE It's a month-by-month deal (\n  Regionid INTEGER PRIMARY KEY, -- 小区id\n  Month INTEGER, -- 月份\n  Deal VARCHAR(50), -- 成交量\n  Increase in the number of transactions on a par INTEGER, -- 成交量同比增长\n  It's a deal INTEGER, -- 成交均价\n  It's a match-on-the-moment increase INTEGER, -- 成交价同比增长\n);\nCREATE TABLE Deal (\n  House ID id INTEGER PRIMARY KEY, -- 房屋编号id\n  Construction area INTEGER, -- 建筑面积\n  Area of use INTEGER, -- 使用面积\n  Number of bedrooms INTEGER, -- 卧室数量\n  Number of offices INTEGER, -- 厅数量\n  Total price INTEGER, -- 总价\n  Unit price INTEGER, -- 单价\n   Other Organiserid INTEGER, -- 所属小区id\n);\nCREATE TABLE Housing intermediaries (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of shops VARCHAR(50), -- 门店数量\n  Number of housing agents INTEGER, -- 房屋经纪人数量\n  Number of cities covered INTEGER, -- 覆盖城市数量\n  Total amount of home purchase INTEGER, -- 购房成交总量\n  Total number of rentals paid INTEGER, -- 租房成交总量\n  It's a deal INTEGER, -- 成交排名\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE Intermediary deal (\n  Brokerid INTEGER PRIMARY KEY, -- 中介id\n  Regionid INTEGER, -- 小区id\n  Year INTEGER, -- 年份\n  We've got a deal on the house DATETIME, -- 购房成交量\n  Contributory as a percentage INTEGER, -- 成交量占比\n);\n-- Intermediary deal.Regionid can be joined with Beijing Region.Phrase id -- 中介成交.小区id 与 北京小区.词条id\n-- Intermediary deal.Brokerid can be joined with Housing intermediaries.Phrase id -- 中介成交.中介id 与 房屋中介.词条id\n-- It's a month-by-month deal.Regionid can be joined with Beijing Region.Phrase id -- 小区各月成交量.小区id 与 北京小区.词条id\n-- Deal. Other Organiserid can be joined with Beijing Region.Phrase id -- 成交房屋.所属小区id 与 北京小区.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属区域": "Organisation", "楼栋数": "Number_of_buildings", "户数": "Households", "周边小学数量": "Number_of_primary_schools_in_the_vicinity", "周边超市数量": "Number_of_supermarkets_around_the_perimeter", "周边医院数量": "Number_of_hospitals_in_the_vicinity", "小区id": "Regionid", "月份": "Month", "成交量": "Deal", "成交量同比增长": "Increase_in_the_number_of_transactions_on_a_par", "成交均价": "It's_a_deal", "成交价同比增长": "It's_a_match-on-the-moment_increase", "房屋编号id": "House_ID_id", "建筑面积": "Construction_area", "使用面积": "Area_of_use", "卧室数量": "Number_of_bedrooms", "厅数量": "Number_of_offices", "总价": "Total_price", "单价": "Unit_price", "所属小区id": "_Other_Organiserid", "门店数量": "Number_of_shops", "房屋经纪人数量": "Number_of_housing_agents", "覆盖城市数量": "Number_of_cities_covered", "购房成交总量": "Total_amount_of_home_purchase", "租房成交总量": "Total_number_of_rentals_paid", "成交排名": "It's_a_deal", "评分": "Rating", "中介id": "Brokerid", "年份": "Year", "购房成交量": "We've_got_a_deal_on_the_house", "成交量占比": "Contributory_as_a_percentage"}, "table_en": {"北京小区": "Beijing_Region", "小区各月成交量": "It's_a_month-by-month_deal", "成交房屋": "Deal", "房屋中介": "Housing_intermediaries", "中介成交": "Intermediary_deal"}}, "古代人物": {"sqlite": "CREATE TABLE Emperor (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Year VARCHAR(50), -- 年号\n  Where you're headed VARCHAR(50), -- 所处朝代\n  Number of children VARCHAR(50), -- 子女数量\n  Number of Queens INTEGER, -- 皇后数量\n  Number of Princesses INTEGER, -- 妃子数量\n);\nCREATE TABLE The queen and the princess (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Quill INTEGER, -- 谥号\n  Master id VARCHAR(50), -- 夫君id\n  Age INTEGER, -- 年龄\n  Number of Crown Princes INTEGER, -- 皇子数量\n  Number of Princesses INTEGER, -- 公主数量\n);\nCREATE TABLE The Queen of the Emperor is buried together (\n  Emperor id INTEGER PRIMARY KEY, -- 皇帝id\n  Queen id INTEGER, -- 皇后id\n  The place of burial INTEGER, -- 葬地\n);\nCREATE TABLE The image of the Emperor's Queen (\n  Works VARCHAR(50) PRIMARY KEY, -- 作品\n  Emperor id VARCHAR(50), -- 皇帝id\n  The emperor's decorator INTEGER, -- 皇帝饰演者\n  Queen id VARCHAR(50), -- 皇后id\n  Queen's Decorator INTEGER, -- 皇后饰演者\n);\n-- The Queen of the Emperor is buried together.Emperor id can be joined with Emperor.Phrase id -- 皇帝皇后合葬.皇帝id 与 皇帝.词条id\n-- The Queen of the Emperor is buried together.Queen id can be joined with The queen and the princess.Phrase id -- 皇帝皇后合葬.皇后id 与 皇后和妃子.词条id\n-- The image of the Emperor's Queen.Queen id can be joined with The queen and the princess.Phrase id -- 皇帝皇后影视形象.皇后id 与 皇后和妃子.词条id\n-- The queen and the princess.Master id can be joined with Emperor.Phrase id -- 皇后和妃子.夫君id 与 皇帝.词条id\n-- The image of the Emperor's Queen.Emperor id can be joined with Emperor.Phrase id -- 皇帝皇后影视形象.皇帝id 与 皇帝.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "年号": "Year", "所处朝代": "Where_you're_headed", "子女数量": "Number_of_children", "皇后数量": "Number_of_Queens", "妃子数量": "Number_of_Princesses", "谥号": "Quill", "夫君id": "Master_id", "年龄": "Age", "皇子数量": "Number_of_Crown_Princes", "公主数量": "Number_of_Princesses", "皇帝id": "Emperor_id", "皇后id": "Queen_id", "葬地": "The_place_of_burial", "作品": "Works", "皇帝饰演者": "The_emperor's_decorator", "皇后饰演者": "Queen's_Decorator"}, "table_en": {"皇帝": "Emperor", "皇后和妃子": "The_queen_and_the_princess", "皇帝皇后合葬": "The_Queen_of_the_Emperor_is_buried_together", "皇帝皇后影视形象": "The_image_of_the_Emperor's_Queen"}}, "国庆假期旅游数据": {"sqlite": "CREATE TABLE Tourism consumption (\n  Consumption segment VARCHAR(50) PRIMARY KEY, -- 消费段\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE Number of trips (\n  Outbound Quarters INTEGER PRIMARY KEY, -- 出游数量段\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE Type of tourism (\n  Site Type INTEGER PRIMARY KEY, -- 景点类型\n  Percentage VARCHAR(50), -- 占比\n);\nCREATE TABLE Routes of travel (\n  Travel mode INTEGER PRIMARY KEY, -- 出行方式\n  Percentage VARCHAR(50), -- 占比\n  Year-on-year growth INTEGER, -- 同比增长\n);\nCREATE TABLE Tourism (\n  Tourism INTEGER PRIMARY KEY, -- 旅游方式\n  Percentage VARCHAR(50), -- 占比\n);\nCREATE TABLE Tourism revenue rankings by province (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Tourists (millions) VARCHAR(50), -- 游客(万人次)\n  Tourism income (millions of yuan) INTEGER, -- 旅游收入(亿元)\n  Rank INTEGER, -- 排名\n);\n", "columns_en": {"消费段": "Consumption_segment", "占比": "Percentage", "出游数量段": "Outbound_Quarters", "景点类型": "Site_Type", "出行方式": "Travel_mode", "同比增长": "Year-on-year_growth", "旅游方式": "Tourism", "省份": "Province", "游客(万人次)": "Tourists_(millions)", "旅游收入(亿元)": "Tourism_income_(millions_of_yuan)", "排名": "Rank"}, "table_en": {"旅游消费": "Tourism_consumption", "出游次数": "Number_of_trips", "旅游类型": "Type_of_tourism", "出行交通方式": "Routes_of_travel", "旅游方式": "Tourism", "各省旅游收入排名": "Tourism_revenue_rankings_by_province"}}, "人物传记": {"sqlite": "CREATE TABLE Celebrities (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Occupation VARCHAR(50), -- 职业\n  Main achievements VARCHAR(50), -- 主要成就\n);\nCREATE TABLE Biography (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Author VARCHAR(50), -- 作者\n  Pages VARCHAR(50), -- 页数\n  Publications INTEGER, -- 出版社\n  Publication time VARCHAR(50), -- 出版时间\n);\nCREATE TABLE Famous biography (\n  Biographical id DATETIME PRIMARY KEY, -- 传记id\n  Personal id INTEGER, -- 人物id\n  Record time INTEGER, -- 记录时间\n);\n-- Famous biography.Personal id can be joined with Celebrities.Phrase id -- 名人传记.人物id 与 名人.词条id\n-- Famous biography.Biographical id can be joined with Biography.Phrase id -- 名人传记.传记id 与 传记.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "国籍": "Nationality", "职业": "Occupation", "主要成就": "Main_achievements", "书名": "Title", "作者": "Author", "页数": "Pages", "出版社": "Publications", "出版时间": "Publication_time", "传记id": "Biographical_id", "人物id": "Personal_id", "记录时间": "Record_time"}, "table_en": {"名人": "Celebrities", "传记": "Biography", "名人传记": "Famous_biography"}}, "综艺节目": {"sqlite": "CREATE TABLE Phenomenal programmes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Program Name INTEGER, -- 节目名称\n  Series VARCHAR(50), -- 系列名\n  Director VARCHAR(50), -- 导演\n  Launch time VARCHAR(50), -- 首播时间\n  Channels DATETIME, -- 播出频道\n  Airtime VARCHAR(50), -- 播出时间\n  Term DATETIME, -- 期数\n  Credential INTEGER, -- 冠名商\n);\nCREATE TABLE Star (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationalities VARCHAR(50), -- 民族\n  Height VARCHAR(50), -- 身高\n  body weight INTEGER, -- 体重\n  Place of birth INTEGER, -- 出生地\n  Age VARCHAR(50), -- 年龄\n  Occupation INTEGER, -- 职业\n);\nCREATE TABLE Rate of viewing (\n  Programid VARCHAR(50) PRIMARY KEY, -- 节目id\n  Online platform INTEGER, -- 在线平台\n  Play VARCHAR(50), -- 播放数\n  Rate of viewing INTEGER, -- 收视率\n  Share of ratings INTEGER, -- 收视份额\n);\nCREATE TABLE \"Accompanied program \" (\n  Programid INTEGER PRIMARY KEY, -- 节目id\n  Track id INTEGER, -- 接档节目id\n  ♪ Become a part of the program ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ INTEGER, -- 被接档节目id\n);\nCREATE TABLE Guests for the ecclesiastical show (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Programid INTEGER, -- 节目id\n  Identity INTEGER, -- 身份\n  Number of trips VARCHAR(50), -- 出场期数\n);\n-- \"Accompanied program \".♪ Become a part of the program ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ ♪ I'm a part of the show ♪ can be joined with Phenomenal programmes.Phrase id -- 接档节目.被接档节目id 与 综艺节目.词条id\n-- Rate of viewing.Programid can be joined with Phenomenal programmes.Phrase id -- 收视率.节目id 与 综艺节目.词条id\n-- Guests for the ecclesiastical show.Starid can be joined with Star.Phrase id -- 综艺节目嘉宾.明星id 与 明星.词条id\n-- \"Accompanied program \".Programid can be joined with Phenomenal programmes.Phrase id -- 接档节目.节目id 与 综艺节目.词条id\n-- \"Accompanied program \".Track id can be joined with Phenomenal programmes.Phrase id -- 接档节目.接档节目id 与 综艺节目.词条id\n-- Guests for the ecclesiastical show.Programid can be joined with Phenomenal programmes.Phrase id -- 综艺节目嘉宾.节目id 与 综艺节目.词条id", "columns_en": {"词条id": "Phrase_id", "节目名称": "Program_Name", "系列名": "Series", "导演": "Director", "首播时间": "Launch_time", "播出频道": "Channels", "播出时间": "Airtime", "期数": "Term", "冠名商": "Credential", "姓名": "Name", "民族": "Nationalities", "身高": "Height", "体重": "body_weight", "出生地": "Place_of_birth", "年龄": "Age", "职业": "Occupation", "节目id": "Programid", "在线平台": "Online_platform", "播放数": "Play", "收视率": "Rate_of_viewing", "收视份额": "Share_of_ratings", "接档节目id": "Track_id", "被接档节目id": "♪_Become_a_part_of_the_program_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪_♪_I'm_a_part_of_the_show_♪", "明星id": "Starid", "身份": "Identity", "出场期数": "Number_of_trips"}, "table_en": {"综艺节目": "Phenomenal_programmes", "明星": "Star", "收视率": "Rate_of_viewing", "接档节目": "\"Accompanied_program_\"", "综艺节目嘉宾": "Guests_for_the_ecclesiastical_show"}}, "中国城市体育活动": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Area of land area VARCHAR(50), -- 占地面积\n  Number of gymnasiums INTEGER, -- 体育馆数量\n);\nCREATE TABLE Sports (\n  Organization of city id INTEGER PRIMARY KEY, -- 举办城市id\n  Sports type INTEGER, -- 运动会类型\n  Number of sessions VARCHAR(50), -- 届数\n  Year INTEGER, -- 年份\n  Number of athletes participating DATETIME, -- 参赛运动员数量\n  Number of projects INTEGER, -- 项目数量\n  Number of gold medals INTEGER, -- 金牌数量\n  Number of medals INTEGER, -- 奖牌数量\n);\n-- Sports.Organization of city id can be joined with Urban.Phrase id -- 运动会.举办城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "占地面积": "Area_of_land_area", "体育馆数量": "Number_of_gymnasiums", "举办城市id": "Organization_of_city_id", "运动会类型": "Sports_type", "届数": "Number_of_sessions", "年份": "Year", "参赛运动员数量": "Number_of_athletes_participating", "项目数量": "Number_of_projects", "金牌数量": "Number_of_gold_medals", "奖牌数量": "Number_of_medals"}, "table_en": {"城市": "Urban", "运动会": "Sports"}}, "北京小学": {"sqlite": "CREATE TABLE Beijing School (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n   Other Organiser VARCHAR(50), -- 创办时间\n  Category DATETIME, -- 类别\n  Number of schools VARCHAR(50), -- 学校人数\n  Number of teaching staff INTEGER, -- 教职工人数\n  Number of classes INTEGER, -- 教学班数量\n);\nCREATE TABLE Rate of promotion to primary school (\n  Year INTEGER PRIMARY KEY, -- 年份\n  School id DATETIME, -- 学校id\n  Number of graduates INTEGER, -- 毕业人数\n  Transition rates in priority secondary schools INTEGER, -- 重点中学升学率\n  Top10 Transition Rate to Secondary School INTEGER, -- top10中学升学率\n);\nCREATE TABLE Teachers (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Functional title VARCHAR(50), -- 职称\n  As-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa VARCHAR(50), -- 任教学校id\n);\nCREATE TABLE Subdirectorate (\n  Name of branch INTEGER PRIMARY KEY, -- 分校名称\n  City to which you belong VARCHAR(50), -- 所属城市\n   Other Organiser VARCHAR(50), -- 创办时间\n  School id DATETIME, -- 学校id\n);\n-- Teachers.As-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa can be joined with Beijing School.Phrase id -- 教师.任教学校id 与 北京学校.词条id\n-- Rate of promotion to primary school.School id can be joined with Beijing School.Phrase id -- 小升初升学率.学校id 与 北京学校.词条id\n-- Subdirectorate.School id can be joined with Beijing School.Phrase id -- 分校.学校id 与 北京学校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属地区": "Territory_to_which_it_belongs", "创办时间": "_Other_Organiser", "类别": "Category", "学校人数": "Number_of_schools", "教职工人数": "Number_of_teaching_staff", "教学班数量": "Number_of_classes", "年份": "Year", "学校id": "School_id", "毕业人数": "Number_of_graduates", "重点中学升学率": "Transition_rates_in_priority_secondary_schools", "top10中学升学率": "Top10_Transition_Rate_to_Secondary_School", "姓名": "Name", "职称": "Functional_title", "任教学校id": "As-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa-Sa", "分校名称": "Name_of_branch", "所属城市": "City_to_which_you_belong"}, "table_en": {"北京学校": "Beijing_School", "小升初升学率": "Rate_of_promotion_to_primary_school", "教师": "Teachers", "分校": "Subdirectorate"}}, "在线学习平台": {"sqlite": "CREATE TABLE School (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  National VARCHAR(50), -- 国家\n  World ranking VARCHAR(50), -- 世界排名\n);\nCREATE TABLE Courses (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Professional affiliation VARCHAR(50), -- 所属专业\n  Suitable for type of scholar VARCHAR(50), -- 适合学者类型\n);\nCREATE TABLE Platform (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of courses VARCHAR(50), -- 课程数量\n  Number of co-operative schools INTEGER, -- 合作学校数量\n  Is it free? INTEGER, -- 是否免费\n);\nCREATE TABLE Platform Cooperative Schools (\n  Platformid BINARY PRIMARY KEY, -- 平台id\n  School id INTEGER, -- 学校id\n  Number of cooperative courses INTEGER, -- 合作课程数量\n);\nCREATE TABLE Open-source courses in schools (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Open Source Course Name INTEGER, -- 开源课程名称\n  Course id VARCHAR(50), -- 课程id\n  School id INTEGER, -- 学校id\n  Classes INTEGER, -- 课时\n  Teacher INTEGER, -- 主讲教师\n);\nCREATE TABLE Platform courses (\n  Open source courseid VARCHAR(50) PRIMARY KEY, -- 开源课程id\n  Platformid INTEGER, -- 平台id\n  Is it live or not? INTEGER, -- 是否直播\n  Length of the course BINARY, -- 课程时长\n  Prices INTEGER, -- 价格\n);\n-- Open-source courses in schools.Course id can be joined with Courses.Phrase id -- 学校的开源课程.课程id 与 课程.词条id\n-- Open-source courses in schools.School id can be joined with School.Phrase id -- 学校的开源课程.学校id 与 学校.词条id\n-- Platform courses.Open source courseid can be joined with Open-source courses in schools.Phrase id -- 平台课程.开源课程id 与 学校的开源课程.词条id\n-- Platform courses.Platformid can be joined with Platform.Phrase id -- 平台课程.平台id 与 平台.词条id\n-- Platform Cooperative Schools.School id can be joined with School.Phrase id -- 平台合作学校.学校id 与 学校.词条id\n-- Platform Cooperative Schools.Platformid can be joined with Platform.Phrase id -- 平台合作学校.平台id 与 平台.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "类型": "Type", "国家": "National", "世界排名": "World_ranking", "所属专业": "Professional_affiliation", "适合学者类型": "Suitable_for_type_of_scholar", "课程数量": "Number_of_courses", "合作学校数量": "Number_of_co-operative_schools", "是否免费": "Is_it_free?", "平台id": "Platformid", "学校id": "School_id", "合作课程数量": "Number_of_cooperative_courses", "开源课程名称": "Open_Source_Course_Name", "课程id": "Course_id", "课时": "Classes", "主讲教师": "Teacher", "开源课程id": "Open_source_courseid", "是否直播": "Is_it_live_or_not?", "课程时长": "Length_of_the_course", "价格": "Prices"}, "table_en": {"学校": "School", "课程": "Courses", "平台": "Platform", "平台合作学校": "Platform_Cooperative_Schools", "学校的开源课程": "Open-source_courses_in_schools", "平台课程": "Platform_courses"}}, "中国交通": {"sqlite": "CREATE TABLE Airport (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type of airport VARCHAR(50), -- 机场类型\n  Area management VARCHAR(50), -- 地区管理\n  Air terminal area VARCHAR(50), -- 航站楼面积\n  Number of slots INTEGER, -- 机位数量\n  Passenger routes INTEGER, -- 客运航线\n  runway length INTEGER, -- 跑道长度\n  Province INTEGER, -- 省份\n  Date of voyage VARCHAR(50), -- 通航日期\n);\nCREATE TABLE Train station (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Date of application VARCHAR(50), -- 投用日期\n  Construction area DATETIME, -- 建筑面积\n  Site Size INTEGER, -- 站台规模\n  Address INTEGER, -- 地址\n  Province VARCHAR(50), -- 省份\n  Date of application VARCHAR(50), -- 投用日期\n);\nCREATE TABLE Airlines (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name of company INTEGER, -- 公司名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  IATA code DATETIME, -- IATA代码\n  ICAO Code VARCHAR(50), -- ICAO代码\n  Annual turnover VARCHAR(50), -- 年营业额\n  Number of employees INTEGER, -- 员工数\n);\nCREATE TABLE Airline presence at the airport (\n  Airlineid INTEGER PRIMARY KEY, -- 航空公司id\n  Airportd INTEGER, -- 机场id\n  Urban INTEGER, -- 城市\n  No  of shipping points VARCHAR(50), -- 航点数\n);\nCREATE TABLE Airport throughput (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Airportd DATETIME, -- 机场id\n  Passenger throughput INTEGER, -- 旅客吞吐量\n  Number of passenger routes INTEGER, -- 客运航线数量\n);\n-- Airline presence at the airport.Airportd can be joined with Airport.Phrase id -- 航空公司入驻机场.机场id 与 机场.词条id\n-- Airline presence at the airport.Airlineid can be joined with Airlines.Phrase id -- 航空公司入驻机场.航空公司id 与 航空公司.词条id\n-- Airport throughput.Airportd can be joined with Airport.Phrase id -- 机场吞吐量.机场id 与 机场.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "机场类型": "Type_of_airport", "地区管理": "Area_management", "航站楼面积": "Air_terminal_area", "机位数量": "Number_of_slots", "客运航线": "Passenger_routes", "跑道长度": "runway_length", "省份": "Province", "通航日期": "Date_of_voyage", "投用日期": "Date_of_application", "建筑面积": "Construction_area", "站台规模": "Site_Size", "地址": "Address", "公司名称": "Name_of_company", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "IATA代码": "IATA_code", "ICAO代码": "ICAO_Code", "年营业额": "Annual_turnover", "员工数": "Number_of_employees", "航空公司id": "Airlineid", "机场id": "Airportd", "城市": "Urban", "航点数": "No__of_shipping_points", "年份": "Year", "旅客吞吐量": "Passenger_throughput", "客运航线数量": "Number_of_passenger_routes"}, "table_en": {"机场": "Airport", "火车站": "Train_station", "航空公司": "Airlines", "航空公司入驻机场": "Airline_presence_at_the_airport", "机场吞吐量": "Airport_throughput"}}, "2018年各校招生计划": {"sqlite": "CREATE TABLE School (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Where are you from? VARCHAR(50), -- 所在省份\n  Type VARCHAR(50), -- 类型\n  Is it 985? VARCHAR(50), -- 是否985\n  Is it 211? BINARY, -- 是否211\n);\nCREATE TABLE Province (\n  Phrase id BINARY PRIMARY KEY, -- 词条id\n  Name of province INTEGER, -- 省名\n  Number of candidates in 2018 VARCHAR(50), -- 2018年考生数量\n  Number of higher education institutions 985 INTEGER, -- 985高校数量\n  Number of 211 higher education institutions INTEGER, -- 211高校数量\n);\nCREATE TABLE Programme for admission to higher education in the provinces (\n  School id INTEGER PRIMARY KEY, -- 学校id\n  Province id INTEGER, -- 省份id\n  Number of students enrolled INTEGER, -- 招生人数\n);\nCREATE TABLE Professional (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Professional name INTEGER, -- 专业名称\n  Type of discipline VARCHAR(50), -- 学科类型\n  School system VARCHAR(50), -- 学制\n);\nCREATE TABLE Qinghua University Admission Program (\n  Professional id INTEGER PRIMARY KEY, -- 专业id\n  Province id INTEGER, -- 省份id\n  Type of examination INTEGER, -- 招考类型\n  School fees VARCHAR(50), -- 学费\n  Number of students enrolled INTEGER, -- 招生人数\n);\n-- Qinghua University Admission Program.Professional id can be joined with Professional.Phrase id -- 清华大学招生计划.专业id 与 专业.词条id\n-- Qinghua University Admission Program.Province id can be joined with Province.Phrase id -- 清华大学招生计划.省份id 与 省份.词条id\n-- Programme for admission to higher education in the provinces.School id can be joined with School.Phrase id -- 各省高校招生计划.学校id 与 学校.词条id\n-- Programme for admission to higher education in the provinces.Province id can be joined with Province.Phrase id -- 各省高校招生计划.省份id 与 省份.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所在省份": "Where_are_you_from?", "类型": "Type", "是否985": "Is_it_985?", "是否211": "Is_it_211?", "省名": "Name_of_province", "2018年考生数量": "Number_of_candidates_in_2018", "985高校数量": "Number_of_higher_education_institutions_985", "211高校数量": "Number_of_211_higher_education_institutions", "学校id": "School_id", "省份id": "Province_id", "招生人数": "Number_of_students_enrolled", "专业名称": "Professional_name", "学科类型": "Type_of_discipline", "学制": "School_system", "专业id": "Professional_id", "招考类型": "Type_of_examination", "学费": "School_fees"}, "table_en": {"学校": "School", "省份": "Province", "各省高校招生计划": "Programme_for_admission_to_higher_education_in_the_provinces", "专业": "Professional", "清华大学招生计划": "Qinghua_University_Admission_Program"}}, "榜单": {"sqlite": "CREATE TABLE Books (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Author VARCHAR(50), -- 作者\n  Rating VARCHAR(50), -- 评分\n  Total ranking INTEGER, -- 总排名\n);\nCREATE TABLE Five-star list (\n  Book id INTEGER PRIMARY KEY, -- 图书id\n  Number of evaluations INTEGER, -- 评价人数\n);\nCREATE TABLE This month's special book (\n  Book id INTEGER PRIMARY KEY, -- 图书id\n  Current price INTEGER, -- 现价格\n  Original price INTEGER, -- 原价格\n);\nCREATE TABLE People's lists (\n  Book id INTEGER PRIMARY KEY, -- 图书id\n  Number of persons purchased INTEGER, -- 购买人数\n  Number of collectors INTEGER, -- 收藏人数\n);\nCREATE TABLE You have to read the list (\n  Book id INTEGER PRIMARY KEY, -- 图书id\n  Number of recommended INTEGER, -- 推荐人数\n);\n-- People's lists.Book id can be joined with Books.Phrase id -- 人气榜单.图书id 与 图书.词条id\n-- This month's special book.Book id can be joined with Books.Phrase id -- 本月特价书籍.图书id 与 图书.词条id\n-- Five-star list.Book id can be joined with Books.Phrase id -- 五星榜单.图书id 与 图书.词条id\n-- You have to read the list.Book id can be joined with Books.Phrase id -- 必读榜单.图书id 与 图书.词条id", "columns_en": {"词条id": "Phrase_id", "书名": "Title", "作者": "Author", "评分": "Rating", "总排名": "Total_ranking", "图书id": "Book_id", "评价人数": "Number_of_evaluations", "现价格": "Current_price", "原价格": "Original_price", "购买人数": "Number_of_persons_purchased", "收藏人数": "Number_of_collectors", "推荐人数": "Number_of_recommended"}, "table_en": {"图书": "Books", "五星榜单": "Five-star_list", "本月特价书籍": "This_month's_special_book", "人气榜单": "People's_lists", "必读榜单": "You_have_to_read_the_list"}}, "购书平台": {"sqlite": "CREATE TABLE Platform (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Annual turnover DATETIME, -- 年营业额\n  Self-employed or not INTEGER, -- 是否自营\n  Membership fees BINARY, -- 会员费\n);\nCREATE TABLE Books (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Author VARCHAR(50), -- 作者\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE Books and platforms (\n  Book name id VARCHAR(50) PRIMARY KEY, -- 书名id\n  Platformid INTEGER, -- 平台id\n  Price of sale INTEGER, -- 售价\n  Number of persons purchased INTEGER, -- 购买人数\n  Rating INTEGER, -- 评分\n  Ratings INTEGER, -- 评分人数\n  Number of persons enrolled in shopping carts INTEGER, -- 加入购物车人数\n  Number of collectors INTEGER, -- 收藏人数\n  Non-availability of goods INTEGER, -- 缺货\n);\nCREATE TABLE E-books (\n  Book name id BINARY PRIMARY KEY, -- 书名id\n  Platformid INTEGER, -- 平台id\n  E-book sales price INTEGER, -- 电子书售价\n  Member price INTEGER, -- 会员价格\n  Number of persons purchased INTEGER, -- 购买人数\n);\n-- Books and platforms.Book name id can be joined with Books.Phrase id -- 图书与平台.书名id 与 图书.词条id\n-- Books and platforms.Platformid can be joined with Platform.Phrase id -- 图书与平台.平台id 与 平台.词条id\n-- E-books.Book name id can be joined with Books.Phrase id -- 电子书.书名id 与 图书.词条id\n-- E-books.Platformid can be joined with Platform.Phrase id -- 电子书.平台id 与 平台.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "年营业额": "Annual_turnover", "是否自营": "Self-employed_or_not", "会员费": "Membership_fees", "书名": "Title", "作者": "Author", "类型": "Type", "书名id": "Book_name_id", "平台id": "Platformid", "售价": "Price_of_sale", "购买人数": "Number_of_persons_purchased", "评分": "Rating", "评分人数": "Ratings", "加入购物车人数": "Number_of_persons_enrolled_in_shopping_carts", "收藏人数": "Number_of_collectors", "缺货": "Non-availability_of_goods", "电子书售价": "E-book_sales_price", "会员价格": "Member_price"}, "table_en": {"平台": "Platform", "图书": "Books", "图书与平台": "Books_and_platforms", "电子书": "E-books"}}, "友好城市": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Urban INTEGER, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Number of States established VARCHAR(50), -- 建交国家数量\n  Number of cities established INTEGER, -- 建交城市数量\n  Number of foreign embassies in China INTEGER, -- 国外驻华大使馆数量\n  Number of students studying INTEGER, -- 留学生数量\n  Number of TNCs INTEGER, -- 跨国公司数量\n);\nCREATE TABLE A country on a route (\n  National INTEGER PRIMARY KEY, -- 国家\n  Lines VARCHAR(50), -- 线路\n);\nCREATE TABLE All the way to the Chinese city (\n  Urban id VARCHAR(50) PRIMARY KEY, -- 城市id\n  Provinces to which they belong INTEGER, -- 所属省\n  Lines VARCHAR(50), -- 线路\n);\nCREATE TABLE The other side is helping the city (\n  Poor city id VARCHAR(50) PRIMARY KEY, -- 贫困城市id\n  Provinces to which they belong VARCHAR(50), -- 所属省\n  Help the city id VARCHAR(50), -- 帮助城市id\n);\n-- All the way to the Chinese city.Urban id can be joined with Urban.Phrase id -- 一带一路的中国城市.城市id 与 城市.词条id\n-- The other side is helping the city.Poor city id can be joined with Urban.Phrase id -- 对口帮扶城市.贫困城市id 与 城市.词条id\n-- The other side is helping the city.Help the city id can be joined with Urban.Phrase id -- 对口帮扶城市.帮助城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "城市": "Urban", "所属省份": "Provinces_to_which_they_belong", "建交国家数量": "Number_of_States_established", "建交城市数量": "Number_of_cities_established", "国外驻华大使馆数量": "Number_of_foreign_embassies_in_China", "留学生数量": "Number_of_students_studying", "跨国公司数量": "Number_of_TNCs", "国家": "National", "线路": "Lines", "城市id": "Urban_id", "所属省": "Provinces_to_which_they_belong", "贫困城市id": "Poor_city_id", "帮助城市id": "Help_the_city_id"}, "table_en": {"城市": "Urban", "一带一路线路上的国家": "A_country_on_a_route", "一带一路的中国城市": "All_the_way_to_the_Chinese_city", "对口帮扶城市": "The_other_side_is_helping_the_city"}}, "植物": {"sqlite": "CREATE TABLE Plants (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Acupuncture INTEGER, -- 学名\n  Floating period VARCHAR(50), -- 花期\n  Length of time spent INTEGER, -- 花期时长\n  Outcome period INTEGER, -- 果期\n);\nCREATE TABLE Pharmacy plants (\n  Plant id INTEGER PRIMARY KEY, -- 植物id\n  Statement of purpose INTEGER, -- 用途说明\n  Toxicity VARCHAR(50), -- 毒性\n  Method of cultivation VARCHAR(50), -- 种植方式\n);\nCREATE TABLE Plant distribution cities (\n  Plant id VARCHAR(50) PRIMARY KEY, -- 植物id\n  Urban INTEGER, -- 城市\n  Protection level VARCHAR(50), -- 保护级别\n);\nCREATE TABLE Meat-eating plant distribution area (\n  Plant id VARCHAR(50) PRIMARY KEY, -- 植物id\n  Regional INTEGER, -- 区域\n  Number of categories VARCHAR(50), -- 种类数\n);\nCREATE TABLE Plant breeding (\n  Plant id INTEGER PRIMARY KEY, -- 植物id\n  Modalities INTEGER, -- 方式\n);\n-- Pharmacy plants.Plant id can be joined with Plants.Phrase id -- 药用植物.植物id 与 植物.词条id\n-- Plant distribution cities.Plant id can be joined with Plants.Phrase id -- 植物分布城市.植物id 与 植物.词条id\n-- Meat-eating plant distribution area.Plant id can be joined with Plants.Phrase id -- 食肉植物分布区域.植物id 与 植物.词条id\n-- Plant breeding.Plant id can be joined with Plants.Phrase id -- 植物繁殖.植物id 与 植物.词条id", "columns_en": {"词条id": "Phrase_id", "学名": "Acupuncture", "花期": "Floating_period", "花期时长": "Length_of_time_spent", "果期": "Outcome_period", "植物id": "Plant_id", "用途说明": "Statement_of_purpose", "毒性": "Toxicity", "种植方式": "Method_of_cultivation", "城市": "Urban", "保护级别": "Protection_level", "区域": "Regional", "种类数": "Number_of_categories", "方式": "Modalities"}, "table_en": {"植物": "Plants", "药用植物": "Pharmacy_plants", "植物分布城市": "Plant_distribution_cities", "食肉植物分布区域": "Meat-eating_plant_distribution_area", "植物繁殖": "Plant_breeding"}}, "运动员比赛记录": {"sqlite": "CREATE TABLE Basketball player (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Field position VARCHAR(50), -- 场上位置\n  Team VARCHAR(50), -- 球队\n  Age VARCHAR(50), -- 年龄\n);\nCREATE TABLE The record of the game (\n  Season INTEGER PRIMARY KEY, -- 赛季\n  Team INTEGER, -- 球队\n  Type of event VARCHAR(50), -- 赛事类型\n  Player id VARCHAR(50), -- 球员id\n  Number of appearances INTEGER, -- 出场次数\n  Number of initial issuances INTEGER, -- 首发次数\n  Shoot it INTEGER, -- 投篮\n  Strike! INTEGER, -- 罚球\n  Three INTEGER, -- 三分球\n  Total basket INTEGER, -- 总篮板\n  I'll take it INTEGER, -- 抢断\n  Accompaniment INTEGER, -- 助攻\n  Defense INTEGER, -- 防守\n  It's a foul INTEGER, -- 犯规\n  Score INTEGER, -- 得分\n);\nCREATE TABLE It's the best part of my life (\n  Player id INTEGER PRIMARY KEY, -- 球员id\n  Single score INTEGER, -- 单场得分\n  Number of basketballs INTEGER, -- 篮板球次数\n  Number of breakouts INTEGER, -- 抢断次数\n  Number of offensives INTEGER, -- 助攻次数\n  Number of caps INTEGER, -- 盖帽次数\n  Game time INTEGER, -- 比赛时间\n  Fighter DATETIME, -- 比赛对手\n);\n-- The record of the game.Player id can be joined with Basketball player.Phrase id -- 比赛记录.球员id 与 篮球运动员.词条id\n-- It's the best part of my life.Player id can be joined with Basketball player.Phrase id -- 生涯之最.球员id 与 篮球运动员.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "场上位置": "Field_position", "球队": "Team", "年龄": "Age", "赛季": "Season", "赛事类型": "Type_of_event", "球员id": "Player_id", "出场次数": "Number_of_appearances", "首发次数": "Number_of_initial_issuances", "投篮": "Shoot_it", "罚球": "Strike!", "三分球": "Three", "总篮板": "Total_basket", "抢断": "I'll_take_it", "助攻": "Accompaniment", "防守": "Defense", "犯规": "It's_a_foul", "得分": "Score", "单场得分": "Single_score", "篮板球次数": "Number_of_basketballs", "抢断次数": "Number_of_breakouts", "助攻次数": "Number_of_offensives", "盖帽次数": "Number_of_caps", "比赛时间": "Game_time", "比赛对手": "Fighter"}, "table_en": {"篮球运动员": "Basketball_player", "比赛记录": "The_record_of_the_game", "生涯之最": "It's_the_best_part_of_my_life"}}, "智能手机全球占比": {"sqlite": "CREATE TABLE Smartphones (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  Annual turnover VARCHAR(50), -- 年营业额\n  Annual profits INTEGER, -- 年利润\n  World ranking INTEGER, -- 世界排名\n);\nCREATE TABLE Global shipments of smartphones (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Delivery in 2017 INTEGER, -- 2017年出货量\n  Market share  2017 INTEGER, -- 2017年市场占比\n  Delivery in 2018 INTEGER, -- 2018年出货量\n  Market share  2018 INTEGER, -- 2018年市场占比\n  Percentage increase INTEGER, -- 占比提升幅度\n);\nCREATE TABLE Smart phone deployment countries (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Countries deployed INTEGER, -- 部署国家\n  Year of deployment INTEGER, -- 部署年份\n  Sales ranking DATETIME, -- 销售量排名\n);\n-- Smart phone deployment countries.Companyid can be joined with Smartphones.Phrase id -- 智能手机部署国家.公司id 与 智能手机公司.词条id\n-- Global shipments of smartphones.Companyid can be joined with Smartphones.Phrase id -- 智能手机全球出货量.公司id 与 智能手机公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属国家": "Country_of_nationality", "年营业额": "Annual_turnover", "年利润": "Annual_profits", "世界排名": "World_ranking", "公司id": "Companyid", "2017年出货量": "Delivery_in_2017", "2017年市场占比": "Market_share__2017", "2018年出货量": "Delivery_in_2018", "2018年市场占比": "Market_share__2018", "占比提升幅度": "Percentage_increase", "部署国家": "Countries_deployed", "部署年份": "Year_of_deployment", "销售量排名": "Sales_ranking"}, "table_en": {"智能手机公司": "Smartphones", "智能手机全球出货量": "Global_shipments_of_smartphones", "智能手机部署国家": "Smart_phone_deployment_countries"}}, "期刊": {"sqlite": "CREATE TABLE Periodicals (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Languages VARCHAR(50), -- 语言\n  Category VARCHAR(50), -- 类别\n  Host VARCHAR(50), -- 主办单位\n  Date of launch VARCHAR(50), -- 创刊时间\n  National DATETIME, -- 国家\n  Number of publications VARCHAR(50), -- 出版刊数\n);\nCREATE TABLE Bibliography of periodicals (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Periodical id DATETIME, -- 期刊id\n  Statistical platform INTEGER, -- 统计平台\n  Number of publications VARCHAR(50), -- 出版文献数\n  Number of downloads INTEGER, -- 被下载数量\n  Quantity quoted INTEGER, -- 被引数量\n  Combination impact factors INTEGER, -- 复合影响因子\n  Integrated impact factors INTEGER, -- 综合影响因子\n);\nCREATE TABLE Cover character (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Occupation VARCHAR(50), -- 职业\n);\nCREATE TABLE The cover of the journal (\n  Personal id VARCHAR(50) PRIMARY KEY, -- 人物id\n  Periodical id INTEGER, -- 期刊id\n  Number INTEGER, -- 次数\n);\n-- The cover of the journal.Personal id can be joined with Cover character.Phrase id -- 期刊封面人物.人物id 与 封面人物.词条id\n-- Bibliography of periodicals.Periodical id can be joined with Periodicals.Phrase id -- 期刊文献.期刊id 与 期刊.词条id\n-- The cover of the journal.Periodical id can be joined with Periodicals.Phrase id -- 期刊封面人物.期刊id 与 期刊.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "语言": "Languages", "类别": "Category", "主办单位": "Host", "创刊时间": "Date_of_launch", "国家": "National", "出版刊数": "Number_of_publications", "年份": "Year", "期刊id": "Periodical_id", "统计平台": "Statistical_platform", "出版文献数": "Number_of_publications", "被下载数量": "Number_of_downloads", "被引数量": "Quantity_quoted", "复合影响因子": "Combination_impact_factors", "综合影响因子": "Integrated_impact_factors", "姓名": "Name", "职业": "Occupation", "人物id": "Personal_id", "次数": "Number"}, "table_en": {"期刊": "Periodicals", "期刊文献": "Bibliography_of_periodicals", "封面人物": "Cover_character", "期刊封面人物": "The_cover_of_the_journal"}}, "小说": {"sqlite": "CREATE TABLE Author (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Date of birth VARCHAR(50), -- 出生日期\n  Place of birth DATETIME, -- 出生地\n  Date of death VARCHAR(50), -- 逝世日期\n  Number of works DATETIME, -- 作品数量\n);\nCREATE TABLE Novel (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  It's a novel INTEGER, -- 小说名\n  Literary style VARCHAR(50), -- 文学体裁\n  Authorid VARCHAR(50), -- 作者id\n  First release time INTEGER, -- 首版时间\n  Words DATETIME, -- 字数\n);\nCREATE TABLE It's a novel  It's a play (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  novel id VARCHAR(50), -- 小说id\n  Theater INTEGER, -- 演出剧团\n  Director VARCHAR(50), -- 导演\n  Total performance VARCHAR(50), -- 演出总场次\n  Audience scores INTEGER, -- 观众评分\n);\nCREATE TABLE It's a novel  It's a TV show (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  novel id VARCHAR(50), -- 小说id\n  Launch time INTEGER, -- 首播时间\n  Collections DATETIME, -- 集数\n  Bean petals INTEGER, -- 豆瓣评分\n);\n-- Novel.Authorid can be joined with Author.Phrase id -- 小说.作者id 与 作者.词条id\n-- It's a novel  It's a play.novel id can be joined with Novel.Phrase id -- 小说改编话剧.小说id 与 小说.词条id\n-- It's a novel  It's a TV show.novel id can be joined with Novel.Phrase id -- 小说改编电视剧.小说id 与 小说.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "国籍": "Nationality", "出生日期": "Date_of_birth", "出生地": "Place_of_birth", "逝世日期": "Date_of_death", "作品数量": "Number_of_works", "小说名": "It's_a_novel", "文学体裁": "Literary_style", "作者id": "Authorid", "首版时间": "First_release_time", "字数": "Words", "名称": "Name", "小说id": "novel_id", "演出剧团": "Theater", "导演": "Director", "演出总场次": "Total_performance", "观众评分": "Audience_scores", "剧名": "The_title_of_the_play", "首播时间": "Launch_time", "集数": "Collections", "豆瓣评分": "Bean_petals"}, "table_en": {"作者": "Author", "小说": "Novel", "小说改编话剧": "It's_a_novel__It's_a_play", "小说改编电视剧": "It's_a_novel__It's_a_TV_show"}}, "朝代影视剧": {"sqlite": "CREATE TABLE King (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Dynasty! VARCHAR(50), -- 朝代\n  In-in-years VARCHAR(50), -- 在位年数\n);\nCREATE TABLE Film (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Film Name INTEGER, -- 电影名称\n  Show time VARCHAR(50), -- 上映时间\n  King id DATETIME, -- 帝王id\n);\nCREATE TABLE A TV show (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  Launch time VARCHAR(50), -- 首播时间\n  Theater DATETIME, -- 剧集\n  King id INTEGER, -- 帝王id\n);\n-- Film.King id can be joined with King.Phrase id -- 电影.帝王id 与 帝王.词条id\n-- A TV show.King id can be joined with King.Phrase id -- 电视剧.帝王id 与 帝王.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "朝代": "Dynasty!", "在位年数": "In-in-years", "电影名称": "Film_Name", "上映时间": "Show_time", "帝王id": "King_id", "剧名": "The_title_of_the_play", "首播时间": "Launch_time", "剧集": "Theater"}, "table_en": {"帝王": "King", "电影": "Film", "电视剧": "A_TV_show"}}, "汉语词语": {"sqlite": "CREATE TABLE Words (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Meaning VARCHAR(50), -- 含义\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE Synonyms (\n  Word id VARCHAR(50) PRIMARY KEY, -- 词语id\n  Synonym id INTEGER, -- 近义词id\n);\nCREATE TABLE Adjective (\n  Word id INTEGER PRIMARY KEY, -- 词语id\n  Adjective id INTEGER, -- 反义词id\n);\n-- Synonyms.Word id can be joined with Words.Phrase id -- 近义词.词语id 与 词语.词条id\n-- Adjective.Adjective id can be joined with Words.Phrase id -- 反义词.反义词id 与 词语.词条id\n-- Synonyms.Synonym id can be joined with Words.Phrase id -- 近义词.近义词id 与 词语.词条id\n-- Adjective.Word id can be joined with Words.Phrase id -- 反义词.词语id 与 词语.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "含义": "Meaning", "类型": "Type", "词语id": "Word_id", "近义词id": "Synonym_id", "反义词id": "Adjective_id"}, "table_en": {"词语": "Words", "近义词": "Synonyms", "反义词": "Adjective"}}, "游戏": {"sqlite": "CREATE TABLE Game company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  National VARCHAR(50), -- 国家\n  Nature of the company VARCHAR(50), -- 公司性质\n  Annual income VARCHAR(50), -- 年收益\n  Number of games INTEGER, -- 游戏数量\n);\nCREATE TABLE Game (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of registered players VARCHAR(50), -- 注册玩家数量\n  Number of Day Online Players INTEGER, -- 日在线玩家数量\n  Game Image Rating INTEGER, -- 游戏画面评分\n  Game Music Rating INTEGER, -- 游戏音乐评分\n  Game Rating INTEGER, -- 游戏性评分\n  Game Character Rating INTEGER, -- 游戏特色评分\n  Rating of related services INTEGER, -- 相关服务评分\n);\nCREATE TABLE Company and Game (\n  Gameid INTEGER PRIMARY KEY, -- 游戏id\n  Companyid INTEGER, -- 公司id\n  Circulation INTEGER, -- 发行形式\n  Amount of proceeds VARCHAR(50), -- 收益额\n  Proceeds as a proportion of companies INTEGER, -- 收益占公司比例\n);\n-- Company and Game.Gameid can be joined with Game.Phrase id -- 公司和游戏.游戏id 与 游戏.词条id\n-- Company and Game.Companyid can be joined with Game company.Phrase id -- 公司和游戏.公司id 与 游戏公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "国家": "National", "公司性质": "Nature_of_the_company", "年收益": "Annual_income", "游戏数量": "Number_of_games", "注册玩家数量": "Number_of_registered_players", "日在线玩家数量": "Number_of_Day_Online_Players", "游戏画面评分": "Game_Image_Rating", "游戏音乐评分": "Game_Music_Rating", "游戏性评分": "Game_Rating", "游戏特色评分": "Game_Character_Rating", "相关服务评分": "Rating_of_related_services", "游戏id": "Gameid", "公司id": "Companyid", "发行形式": "Circulation", "收益额": "Amount_of_proceeds", "收益占公司比例": "Proceeds_as_a_proportion_of_companies"}, "table_en": {"游戏公司": "Game_company", "游戏": "Game", "公司和游戏": "Company_and_Game"}}, "购物城": {"sqlite": "CREATE TABLE The mall (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n  Opening hours VARCHAR(50), -- 开业时间\n);\nCREATE TABLE Business (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE Businesses in malls (\n  Business id VARCHAR(50) PRIMARY KEY, -- 商家id\n  Mall INTEGER, -- 商场id\n  Floor INTEGER, -- 楼层\n  Area of land area INTEGER, -- 占地面积\n);\n-- Businesses in malls.Mall can be joined with The mall.Phrase id -- 商家入驻商场.商场id 与 商场.词条id\n-- Businesses in malls.Business id can be joined with Business.Phrase id -- 商家入驻商场.商家id 与 商家.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "地址": "Address", "开业时间": "Opening_hours", "类型": "Type", "商家id": "Business_id", "商场id": "Mall", "楼层": "Floor", "占地面积": "Area_of_land_area"}, "table_en": {"商场": "The_mall", "商家": "Business", "商家入驻商场": "Businesses_in_malls"}}, "诺贝尔奖项": {"sqlite": "CREATE TABLE Nobel Prize (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area VARCHAR(50), -- 领域\n  It's the first time VARCHAR(50), -- 第一次颁奖时间\n  Age of winners DATETIME, -- 获奖者最大年龄\n  Minimum Age of Recipients INTEGER, -- 获奖者最小年龄\n  Average age of winners INTEGER, -- 获奖者平均年龄\n);\nCREATE TABLE Colleges of higher education (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  World ranking VARCHAR(50), -- 世界排名\n  Number of independent scientific institutions INTEGER, -- 独立科研机构数量\n  Number of priority disciplines INTEGER, -- 重点学科数量\n);\nCREATE TABLE Award-winning list of institutions of higher learning (\n  Higher education id INTEGER PRIMARY KEY, -- 高校id\n  Award id INTEGER, -- 奖项id\n  Number INTEGER, -- 人数\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE List of prizes awarded to States (\n  National INTEGER PRIMARY KEY, -- 国家\n  Award id INTEGER, -- 奖项id\n  Number INTEGER, -- 人数\n);\nCREATE TABLE Scientists (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Date of birth VARCHAR(50), -- 出生日期\n  Occupation DATETIME, -- 职业\n);\nCREATE TABLE Graduate schools (\n  Scientist id VARCHAR(50) PRIMARY KEY, -- 科学家id\n  Higher education id INTEGER, -- 高校id\n  Obtaining a degree INTEGER, -- 获得学位\n);\nCREATE TABLE The list of Nobel Prize scientists (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Award id DATETIME, -- 奖项id\n  Scientist id INTEGER, -- 科学家id\n  Rationale INTEGER, -- 理由\n);\n-- The list of Nobel Prize scientists.Scientist id can be joined with Scientists.Phrase id -- 诺贝尔奖科学家名单.科学家id 与 科学家.词条id\n-- Award-winning list of institutions of higher learning.Higher education id can be joined with Colleges of higher education.Phrase id -- 高校获奖名单.高校id 与 高校.词条id\n-- List of prizes awarded to States.Award id can be joined with Nobel Prize.Phrase id -- 各国获奖名单.奖项id 与 诺贝尔奖项.词条id\n-- Graduate schools.Scientist id can be joined with Scientists.Phrase id -- 毕业院校.科学家id 与 科学家.词条id\n-- Award-winning list of institutions of higher learning.Award id can be joined with Nobel Prize.Phrase id -- 高校获奖名单.奖项id 与 诺贝尔奖项.词条id\n-- Graduate schools.Higher education id can be joined with Colleges of higher education.Phrase id -- 毕业院校.高校id 与 高校.词条id\n-- The list of Nobel Prize scientists.Award id can be joined with Nobel Prize.Phrase id -- 诺贝尔奖科学家名单.奖项id 与 诺贝尔奖项.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "领域": "Area", "第一次颁奖时间": "It's_the_first_time", "获奖者最大年龄": "Age_of_winners", "获奖者最小年龄": "Minimum_Age_of_Recipients", "获奖者平均年龄": "Average_age_of_winners", "所属国家": "Country_of_nationality", "世界排名": "World_ranking", "独立科研机构数量": "Number_of_independent_scientific_institutions", "重点学科数量": "Number_of_priority_disciplines", "高校id": "Higher_education_id", "奖项id": "Award_id", "人数": "Number", "排名": "Rank", "国家": "National", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "出生日期": "Date_of_birth", "职业": "Occupation", "科学家id": "Scientist_id", "获得学位": "Obtaining_a_degree", "年份": "Year", "理由": "Rationale"}, "table_en": {"诺贝尔奖项": "Nobel_Prize", "高校": "Colleges_of_higher_education", "高校获奖名单": "Award-winning_list_of_institutions_of_higher_learning", "各国获奖名单": "List_of_prizes_awarded_to_States", "科学家": "Scientists", "毕业院校": "Graduate_schools", "诺贝尔奖科学家名单": "The_list_of_Nobel_Prize_scientists"}}, "世界高校": {"sqlite": "CREATE TABLE Continent (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area ranking VARCHAR(50), -- 面积排名\n  Population ranking INTEGER, -- 人口排名\n);\nCREATE TABLE National (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Official languages DATETIME, -- 官方语言\n   Other Organiser VARCHAR(50), -- 所属洲id\n);\nCREATE TABLE Colleges of higher education (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  Country of nationalityd VARCHAR(50), -- 所属国家id\n  The world's soft class INTEGER, -- 世界软科排名\n  The Times INTEGER, -- 泰晤士排名\n  QS ranking INTEGER, -- QS排名\n  USNews ranking INTEGER, -- USNews排名\n);\n-- Colleges of higher education.Country of nationalityd can be joined with National.Phrase id -- 高校.所属国家id 与 国家.词条id\n-- National. Other Organiser can be joined with Continent.Phrase id -- 国家.所属洲id 与 大洲.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "面积排名": "Area_ranking", "人口排名": "Population_ranking", "成立时间": "_Other_Organiser", "官方语言": "Official_languages", "所属洲id": "_Other_Organiser", "类型": "Type", "所属国家id": "Country_of_nationalityd", "世界软科排名": "The_world's_soft_class", "泰晤士排名": "The_Times", "QS排名": "QS_ranking", "USNews排名": "USNews_ranking"}, "table_en": {"大洲": "Continent", "国家": "National", "高校": "Colleges_of_higher_education"}}, "朝代货币": {"sqlite": "CREATE TABLE Dynasty! (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time of rule VARCHAR(50), -- 统治时间\n);\nCREATE TABLE It's a year-long rule (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Year INTEGER, -- 年号\n  ♪ Where the dynasty is id ♪ VARCHAR(50), -- 所处朝代id\n  Time of rule INTEGER, -- 统治时间\n);\nCREATE TABLE The currencies of the dynasty (\n  Dynasty id INTEGER PRIMARY KEY, -- 朝代id\n  Currency INTEGER, -- 货币\n  Time used VARCHAR(50), -- 使用时间\n);\n-- The currencies of the dynasty.Dynasty id can be joined with Dynasty!.Phrase id -- 各朝代货币.朝代id 与 朝代.词条id\n-- It's a year-long rule.♪ Where the dynasty is id ♪ can be joined with Dynasty!.Phrase id -- 各年号统治时间.所处朝代id 与 朝代.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "统治时间": "Time_of_rule", "年号": "Year", "所处朝代id": "♪_Where_the_dynasty_is_id_♪", "朝代id": "Dynasty_id", "货币": "Currency", "使用时间": "Time_used"}, "table_en": {"朝代": "Dynasty!", "各年号统治时间": "It's_a_year-long_rule", "各朝代货币": "The_currencies_of_the_dynasty"}}, "两院院士": {"sqlite": "CREATE TABLE List of schools of the two chambers (\n  School VARCHAR(50) PRIMARY KEY, -- 学校\n  He's in the city and province VARCHAR(50), -- 所在省市\n  It's in the city VARCHAR(50), -- 所在城市\n  Number of cadets VARCHAR(50), -- 院士人数\n);\nCREATE TABLE National list of the members of the two chambers (\n  Nationalities INTEGER PRIMARY KEY, -- 民族\n  Number of cadets VARCHAR(50), -- 院士人数\n  Percentage INTEGER, -- 所占比例\n);\nCREATE TABLE Proportion of female cadets per country (\n  National INTEGER PRIMARY KEY, -- 国家\n  Number of women VARCHAR(50), -- 女院士人数\n  Percentage INTEGER, -- 所占比例\n);\nCREATE TABLE B A  distribution by science department (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Faculty DATETIME, -- 学部\n  Number of cadets VARCHAR(50), -- 院士人数\n  Percentage INTEGER, -- 所占比例\n);\n", "columns_en": {"学校": "School", "所在省市": "He's_in_the_city_and_province", "所在城市": "It's_in_the_city", "院士人数": "Number_of_cadets", "民族": "Nationalities", "所占比例": "Percentage", "国家": "National", "女院士人数": "Number_of_women", "年份": "Year", "学部": "Faculty"}, "table_en": {"两院院士学校名单": "List_of_schools_of_the_two_chambers", "两院院士民族名单": "National_list_of_the_members_of_the_two_chambers", "各国女院士比例": "Proportion_of_female_cadets_per_country", "各学部院士分布": "B_A__distribution_by_science_department"}}, "网易云阅读": {"sqlite": "CREATE TABLE Author (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Age VARCHAR(50), -- 年龄\n  Number of works published INTEGER, -- 出版作品数\n  Number of webworks INTEGER, -- 网络作品数\n);\nCREATE TABLE Publication of books (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Authorid VARCHAR(50), -- 作者id\n  Rating INTEGER, -- 评分\n  Number of evaluations INTEGER, -- 评价人数\n  Words INTEGER, -- 字数\n  Number of clicks INTEGER, -- 点击数\n  Type INTEGER, -- 类型\n);\nCREATE TABLE Network novels (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Authorid VARCHAR(50), -- 作者id\n  Rating INTEGER, -- 评分\n  Type INTEGER, -- 类型\n  Status VARCHAR(50), -- 状态\n  Prices VARCHAR(50), -- 价格\n);\nCREATE TABLE Bestselling List (\n  Network novelid INTEGER PRIMARY KEY, -- 网络小说id\n  Week Ratings INTEGER, -- 周排名\n  Monthly rankings INTEGER, -- 月排名\n  Total ranking INTEGER, -- 总排名\n);\nCREATE TABLE Collection List (\n  Network novelid INTEGER PRIMARY KEY, -- 网络小说id\n  Week Ratings INTEGER, -- 周排名\n  Monthly rankings INTEGER, -- 月排名\n  Total ranking INTEGER, -- 总排名\n);\n-- Collection List.Network novelid can be joined with Network novels.Phrase id -- 收藏榜.网络小说id 与 网络小说.词条id\n-- Publication of books.Authorid can be joined with Author.Phrase id -- 出版图书.作者id 与 作者.词条id\n-- Bestselling List.Network novelid can be joined with Network novels.Phrase id -- 畅销榜.网络小说id 与 网络小说.词条id\n-- Network novels.Authorid can be joined with Author.Phrase id -- 网络小说.作者id 与 作者.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "年龄": "Age", "出版作品数": "Number_of_works_published", "网络作品数": "Number_of_webworks", "书名": "Title", "作者id": "Authorid", "评分": "Rating", "评价人数": "Number_of_evaluations", "字数": "Words", "点击数": "Number_of_clicks", "类型": "Type", "状态": "Status", "价格": "Prices", "网络小说id": "Network_novelid", "周排名": "Week_Ratings", "月排名": "Monthly_rankings", "总排名": "Total_ranking"}, "table_en": {"作者": "Author", "出版图书": "Publication_of_books", "网络小说": "Network_novels", "畅销榜": "Bestselling_List", "收藏榜": "Collection_List"}}, "教材辅助参考书": {"sqlite": "CREATE TABLE References (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  Phase of application VARCHAR(50), -- 适用阶段\n  Year of application VARCHAR(50), -- 适用年级\n  Type of subject INTEGER, -- 科目类型\n  Prices VARCHAR(50), -- 价格\n  Characteristics INTEGER, -- 特点\n);\nCREATE TABLE Reference papers (\n  Test id VARCHAR(50) PRIMARY KEY, -- 试卷id\n  Packages INTEGER, -- 套数\n  Winning of the caption VARCHAR(50), -- 押题命中率\n);\nCREATE TABLE City of application (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Reference to test paper id VARCHAR(50), -- 参考试卷id\n  Version INTEGER, -- 版本\n  Number of purchases VARCHAR(50), -- 购买数量\n  Average score INTEGER, -- 平均得分\n);\n-- Reference papers.Test id can be joined with References.Phrase id -- 参考试卷.试卷id 与 参考书.词条id\n-- City of application.Reference to test paper id can be joined with References.Phrase id -- 适用城市.参考试卷id 与 参考书.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "类型": "Type", "适用阶段": "Phase_of_application", "适用年级": "Year_of_application", "科目类型": "Type_of_subject", "价格": "Prices", "特点": "Characteristics", "试卷id": "Test_id", "套数": "Packages", "押题命中率": "Winning_of_the_caption", "省份": "Province", "参考试卷id": "Reference_to_test_paper_id", "版本": "Version", "购买数量": "Number_of_purchases", "平均得分": "Average_score"}, "table_en": {"参考书": "References", "参考试卷": "Reference_papers", "适用城市": "City_of_application"}}, "中国高校": {"sqlite": "CREATE TABLE Colleges of higher education (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 创办时间\n  Category DATETIME, -- 类别\n  City to which you belong VARCHAR(50), -- 所属城市\n  Number of undergraduates VARCHAR(50), -- 本科生数量\n  Number of graduate students INTEGER, -- 研究生数量\n);\nCREATE TABLE Celebrities (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Occupation VARCHAR(50), -- 职业\n  Main achievements DATETIME, -- 主要成就\n  Higher education id VARCHAR(50), -- 高校id\n);\nCREATE TABLE Awards (\n  Name of award INTEGER PRIMARY KEY, -- 奖项名称\n  Higher education id VARCHAR(50), -- 高校id\n  Number of awards INTEGER, -- 奖项数量\n  Statistics time INTEGER, -- 统计时间\n);\nCREATE TABLE University Properties (\n  Higher education id DATETIME PRIMARY KEY, -- 高校id\n  Properties INTEGER, -- 属性\n  Add Time VARCHAR(50), -- 加入时间\n);\n-- Awards.Higher education id can be joined with Colleges of higher education.Phrase id -- 奖项.高校id 与 高校.词条id\n-- University Properties.Higher education id can be joined with Colleges of higher education.Phrase id -- 高校属性.高校id 与 高校.词条id\n-- Celebrities.Higher education id can be joined with Colleges of higher education.Phrase id -- 名人.高校id 与 高校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "创办时间": "_Other_Organiser", "类别": "Category", "所属城市": "City_to_which_you_belong", "本科生数量": "Number_of_undergraduates", "研究生数量": "Number_of_graduate_students", "职业": "Occupation", "主要成就": "Main_achievements", "高校id": "Higher_education_id", "奖项名称": "Name_of_award", "奖项数量": "Number_of_awards", "统计时间": "Statistics_time", "属性": "Properties", "加入时间": "Add_Time"}, "table_en": {"高校": "Colleges_of_higher_education", "名人": "Celebrities", "奖项": "Awards", "高校属性": "University_Properties"}}, "CCTV中国经济年度人物": {"sqlite": "CREATE TABLE Business people (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Age VARCHAR(50), -- 年龄\n  Place of birth INTEGER, -- 出生地\n  Nationalities VARCHAR(50), -- 民族\n  Graduate schools VARCHAR(50), -- 毕业院校\n);\nCREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Annual turnover DATETIME, -- 年营业额\n  Number of employees INTEGER, -- 员工数\n  Market value INTEGER, -- 市值\n  The world's top 500 INTEGER, -- 世界500强排名\n);\nCREATE TABLE People's company positions (\n  Personal id INTEGER PRIMARY KEY, -- 人物id\n  Companyid INTEGER, -- 公司id\n  Positions INTEGER, -- 职位\n);\nCREATE TABLE List of prizes awarded to successive economic figures (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Name of award INTEGER, -- 奖项名称\n  Laureate id VARCHAR(50), -- 获奖人id\n);\n-- People's company positions.Companyid can be joined with Company.Phrase id -- 人物公司职位.公司id 与 公司.词条id\n-- List of prizes awarded to successive economic figures.Laureate id can be joined with Business people.Phrase id -- 历届经济人物获奖名单.获奖人id 与 企业人物.词条id\n-- People's company positions.Personal id can be joined with Business people.Phrase id -- 人物公司职位.人物id 与 企业人物.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "年龄": "Age", "出生地": "Place_of_birth", "民族": "Nationalities", "毕业院校": "Graduate_schools", "名称": "Name", "成立时间": "_Other_Organiser", "年营业额": "Annual_turnover", "员工数": "Number_of_employees", "市值": "Market_value", "世界500强排名": "The_world's_top_500", "人物id": "Personal_id", "公司id": "Companyid", "职位": "Positions", "年份": "Year", "奖项名称": "Name_of_award", "获奖人id": "Laureate_id"}, "table_en": {"企业人物": "Business_people", "公司": "Company", "人物公司职位": "People's_company_positions", "历届经济人物获奖名单": "List_of_prizes_awarded_to_successive_economic_figures"}}, "大麦网话剧": {"sqlite": "CREATE TABLE The play (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The duration of the show VARCHAR(50), -- 演出时长\n  Let's get this show on the air INTEGER, -- 剧目亮点\n  The show team VARCHAR(50), -- 演出团队\n  Director VARCHAR(50), -- 导演\n  VIP Balance VARCHAR(50), -- VIP票余量\n  888 leftovers INTEGER, -- 888票价余量\n  688 ticket balances INTEGER, -- 688票价余量\n  488 ticket balances INTEGER, -- 488票价余量\n  288 leftovers INTEGER, -- 288票价余量\n  188 leftovers INTEGER, -- 188票价余量\n  100 leftovers INTEGER, -- 100票价余量\n);\nCREATE TABLE It's a week's show (\n  Theater id INTEGER PRIMARY KEY, -- 话剧id\n  Date of presentation INTEGER, -- 上映日期\n  Period DATETIME, -- 时间段\n  The show house DATETIME, -- 演出场馆\n);\nCREATE TABLE Show City (\n  Theater id VARCHAR(50) PRIMARY KEY, -- 话剧id\n  Urban INTEGER, -- 城市\n  Show time VARCHAR(50), -- 上映场次\n  Date of presentation INTEGER, -- 上映日期\n);\nCREATE TABLE Musical (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The duration of the show VARCHAR(50), -- 演出时长\n  The show house INTEGER, -- 演出场馆\n  City of the show VARCHAR(50), -- 演出城市\n  Number of ballot papers VARCHAR(50), -- 总票数\n  Language of performance INTEGER, -- 演出语言\n  Director VARCHAR(50), -- 导演\n  Total number of sites VARCHAR(50), -- 总场数\n);\nCREATE TABLE Musical performances (\n  Musical id INTEGER PRIMARY KEY, -- 音乐剧id\n  Fields INTEGER, -- 场次\n  Date of performance INTEGER, -- 演出日期\n  Period of performance DATETIME, -- 演出时间段\n  The lead actor DATETIME, -- 主要演员\n);\n-- It's a week's show.Theater id can be joined with The play.Phrase id -- 话剧一周上映.话剧id 与 话剧.词条id\n-- Musical performances.Musical id can be joined with Musical.Phrase id -- 音乐剧演出.音乐剧id 与 音乐剧.词条id\n-- Show City.Theater id can be joined with The play.Phrase id -- 上映城市.话剧id 与 话剧.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "演出时长": "The_duration_of_the_show", "剧目亮点": "Let's_get_this_show_on_the_air", "演出团队": "The_show_team", "导演": "Director", "VIP票余量": "VIP_Balance", "888票价余量": "888_leftovers", "688票价余量": "688_ticket_balances", "488票价余量": "488_ticket_balances", "288票价余量": "288_leftovers", "188票价余量": "188_leftovers", "100票价余量": "100_leftovers", "话剧id": "Theater_id", "上映日期": "Date_of_presentation", "时间段": "Period", "演出场馆": "The_show_house", "城市": "Urban", "上映场次": "Show_time", "演出城市": "City_of_the_show", "总票数": "Number_of_ballot_papers", "演出语言": "Language_of_performance", "总场数": "Total_number_of_sites", "音乐剧id": "Musical_id", "场次": "Fields", "演出日期": "Date_of_performance", "演出时间段": "Period_of_performance", "主要演员": "The_lead_actor"}, "table_en": {"话剧": "The_play", "话剧一周上映": "It's_a_week's_show", "上映城市": "Show_City", "音乐剧": "Musical", "音乐剧演出": "Musical_performances"}}, "中国餐饮公司": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Catering income VARCHAR(50), -- 餐饮收入\n  Year-on-year growth INTEGER, -- 同比增长\n);\nCREATE TABLE Catering Company (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters cityd VARCHAR(50), -- 总部城市id\n  Groups to which they belong VARCHAR(50), -- 所属集团\n  Listed stock market VARCHAR(50), -- 上市股市\n  Scope of operation VARCHAR(50), -- 经营范围\n  Years of operation VARCHAR(50), -- 经营年数\n);\nCREATE TABLE The catering company's city chain (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Urban id INTEGER, -- 城市id\n  Number of branches INTEGER, -- 分店数量\n  Area of land area INTEGER, -- 占地面积\n  Number of places INTEGER, -- 餐位数量\n  Number of employees INTEGER, -- 员工数量\n);\nCREATE TABLE Municipal consumption of catering companies (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Urban id INTEGER, -- 城市id\n  Total consumption INTEGER, -- 总消费额\n  Consumption per capita INTEGER, -- 人均消费额\n  It's human INTEGER, -- 人气\n  Rank INTEGER, -- 排名\n);\n-- Municipal consumption of catering companies.Urban id can be joined with Urban.Phrase id -- 餐饮公司城市消费.城市id 与 城市.词条id\n-- Catering Company.Headquarters cityd can be joined with Urban.Phrase id -- 餐饮公司.总部城市id 与 城市.词条id\n-- Municipal consumption of catering companies.Companyid can be joined with Catering Company.Phrase id -- 餐饮公司城市消费.公司id 与 餐饮公司.词条id\n-- The catering company's city chain.Companyid can be joined with Catering Company.Phrase id -- 餐饮公司城市连锁.公司id 与 餐饮公司.词条id\n-- The catering company's city chain.Urban id can be joined with Urban.Phrase id -- 餐饮公司城市连锁.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "餐饮收入": "Catering_income", "同比增长": "Year-on-year_growth", "总部城市id": "Headquarters_cityd", "所属集团": "Groups_to_which_they_belong", "上市股市": "Listed_stock_market", "经营范围": "Scope_of_operation", "经营年数": "Years_of_operation", "公司id": "Companyid", "城市id": "Urban_id", "分店数量": "Number_of_branches", "占地面积": "Area_of_land_area", "餐位数量": "Number_of_places", "员工数量": "Number_of_employees", "总消费额": "Total_consumption", "人均消费额": "Consumption_per_capita", "人气": "It's_human", "排名": "Rank"}, "table_en": {"城市": "Urban", "餐饮公司": "Catering_Company", "餐饮公司城市连锁": "The_catering_company's_city_chain", "餐饮公司城市消费": "Municipal_consumption_of_catering_companies"}}, "福利及法规": {"sqlite": "CREATE TABLE National holidays (\n  National VARCHAR(50) PRIMARY KEY, -- 国家\n  Total days of leave VARCHAR(50), -- 假期总天数\n  Annual leave with pay INTEGER, -- 带薪年假\n  Public holidays INTEGER, -- 公共假期\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE National maternity leave (\n  National INTEGER PRIMARY KEY, -- 国家\n  Total number of days of maternity leave VARCHAR(50), -- 产假总天数\n  Proportion of wages INTEGER, -- 工资比例\n);\nCREATE TABLE National tax rates (\n  National INTEGER PRIMARY KEY, -- 国家\n  Total annual tax rate VARCHAR(50), -- 年总税率\n  The maximum tax rate INTEGER, -- 个税最高税率\n  Social security rates INTEGER, -- 社保费率\n  Enterprise income tax rate INTEGER, -- 企业所得税税率\n);\nCREATE TABLE Proportion of health-care expenditure by country (\n  National INTEGER PRIMARY KEY, -- 国家\n  Health expenditure as a percentage of GDP VARCHAR(50), -- 医疗支出占GDP比重\n);\n", "columns_en": {"国家": "National", "假期总天数": "Total_days_of_leave", "带薪年假": "Annual_leave_with_pay", "公共假期": "Public_holidays", "排名": "Rank", "产假总天数": "Total_number_of_days_of_maternity_leave", "工资比例": "Proportion_of_wages", "年总税率": "Total_annual_tax_rate", "个税最高税率": "The_maximum_tax_rate", "社保费率": "Social_security_rates", "企业所得税税率": "Enterprise_income_tax_rate", "医疗支出占GDP比重": "Health_expenditure_as_a_percentage_of_GDP"}, "table_en": {"各国假期": "National_holidays", "各国产假": "National_maternity_leave", "各国税率": "National_tax_rates", "各国医疗支出占比": "Proportion_of_health-care_expenditure_by_country"}}, "NLP会议": {"sqlite": "CREATE TABLE Meetings (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Level DATETIME, -- 级别\n);\nCREATE TABLE Papers at meetings (\n  Session id VARCHAR(50) PRIMARY KEY, -- 会议id\n  Year INTEGER, -- 年份\n  Long file submission DATETIME, -- 长文提交量\n  Enrolment rate in Long Language INTEGER, -- 长文录取率\n  Short submissions INTEGER, -- 短文提交量\n  Enrollment rate in short books INTEGER, -- 短文录取率\n);\nCREATE TABLE Continent distribution of conference papers (\n  Session id INTEGER PRIMARY KEY, -- 会议id\n  Year INTEGER, -- 年份\n  Continent DATETIME, -- 大洲\n  Number of submissions as a percentage VARCHAR(50), -- 提交数量占比\n);\nCREATE TABLE Country distribution of conference papers (\n  Session id INTEGER PRIMARY KEY, -- 会议id\n  Year INTEGER, -- 年份\n  National DATETIME, -- 国家\n  Number of submissions as a percentage VARCHAR(50), -- 提交数量占比\n);\nCREATE TABLE Distribution of meetings in 2019 (\n  Direction Name INTEGER PRIMARY KEY, -- 方向名称\n  Session id VARCHAR(50), -- 会议id\n  Long file submission INTEGER, -- 长文提交量\n  Enrolment rate in Long Language INTEGER, -- 长文录取率\n  Short submissions INTEGER, -- 短文提交量\n  Enrollment rate in short books INTEGER, -- 短文录取率\n);\n-- Papers at meetings.Session id can be joined with Meetings.Phrase id -- 各会议论文.会议id 与 会议.词条id\n-- Continent distribution of conference papers.Session id can be joined with Meetings.Phrase id -- 各会议论文大洲分布.会议id 与 会议.词条id\n-- Country distribution of conference papers.Session id can be joined with Meetings.Phrase id -- 各会议论文国家分布.会议id 与 会议.词条id\n-- Distribution of meetings in 2019.Session id can be joined with Meetings.Phrase id -- 2019年会议各方向分布.会议id 与 会议.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "级别": "Level", "会议id": "Session_id", "年份": "Year", "长文提交量": "Long_file_submission", "长文录取率": "Enrolment_rate_in_Long_Language", "短文提交量": "Short_submissions", "短文录取率": "Enrollment_rate_in_short_books", "大洲": "Continent", "提交数量占比": "Number_of_submissions_as_a_percentage", "国家": "National", "方向名称": "Direction_Name"}, "table_en": {"会议": "Meetings", "各会议论文": "Papers_at_meetings", "各会议论文大洲分布": "Continent_distribution_of_conference_papers", "各会议论文国家分布": "Country_distribution_of_conference_papers", "2019年会议各方向分布": "Distribution_of_meetings_in_2019"}}, "软件排行": {"sqlite": "CREATE TABLE Apply Shops (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of applications VARCHAR(50), -- 应用软件数\n  Cumulative number of downloads INTEGER, -- 累计下载次数\n);\nCREATE TABLE Applied shops to support the country (\n  Appliance shopid INTEGER PRIMARY KEY, -- 应用商店id\n  National INTEGER, -- 国家\n  Whether applications can be purchased by the user VARCHAR(50), -- 用户是否可以购买应用程序\n  Possibility for developers to sell applications BINARY, -- 开发人员是否可以出售应用程序\n);\nCREATE TABLE Software (\n  Phrase id BINARY PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Use VARCHAR(50), -- 用途\n);\nCREATE TABLE Software downloads (\n  Softwareid VARCHAR(50) PRIMARY KEY, -- 软件id\n  Appliance shopid INTEGER, -- 应用商店id\n  Downloads INTEGER, -- 下载量\n  Number of evaluations INTEGER, -- 评价人数\n  Good assessment INTEGER, -- 好评数\n);\n-- Applied shops to support the country.Appliance shopid can be joined with Apply Shops.Phrase id -- 应用商店支持国家.应用商店id 与 应用商店.词条id\n-- Software downloads.Softwareid can be joined with Software.Phrase id -- 软件下载量.软件id 与 软件.词条id\n-- Software downloads.Appliance shopid can be joined with Apply Shops.Phrase id -- 软件下载量.应用商店id 与 应用商店.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "应用软件数": "Number_of_applications", "累计下载次数": "Cumulative_number_of_downloads", "应用商店id": "Appliance_shopid", "国家": "National", "用户是否可以购买应用程序": "Whether_applications_can_be_purchased_by_the_user", "开发人员是否可以出售应用程序": "Possibility_for_developers_to_sell_applications", "用途": "Use", "软件id": "Softwareid", "下载量": "Downloads", "评价人数": "Number_of_evaluations", "好评数": "Good_assessment"}, "table_en": {"应用商店": "Apply_Shops", "应用商店支持国家": "Applied_shops_to_support_the_country", "软件": "Software", "软件下载量": "Software_downloads"}}, "公务员考试": {"sqlite": "CREATE TABLE Enrolment by province (\n  Province VARCHAR(50) PRIMARY KEY, -- 省份\n  Number of posts VARCHAR(50), -- 岗位数\n  Number of candidates INTEGER, -- 招考人数\n  Number of persons registered INTEGER, -- 报名人数\n  Number of job openings INTEGER, -- 0报名职位数量\n  Number of eligible persons INTEGER, -- 合格人数\n  Number of eligible posts INTEGER, -- 0合格职位数量\n  Competition INTEGER, -- 竞争比\n);\nCREATE TABLE Number of persons enrolled in each position (\n  Name of position INTEGER PRIMARY KEY, -- 职位名称\n  Name of department VARCHAR(50), -- 部门名称\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n  Number of candidates VARCHAR(50), -- 招考人数\n  Number of applicants INTEGER, -- 报考人数\n  Number of eligible persons INTEGER, -- 合格人数\n);\nCREATE TABLE Number of pheasant universities in various countries (\n  National INTEGER PRIMARY KEY, -- 国家\n  Number of universities VARCHAR(50), -- 大学数量\n  Number of pheasant universities INTEGER, -- 野鸡大学数量\n);\nCREATE TABLE Number of pheasant universities in Chinese cities (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Number of pheasant universities VARCHAR(50), -- 野鸡大学数量\n  Percentage INTEGER, -- 占比\n);\n-- Number of persons enrolled in each position.Territory to which it belongs can be joined with Enrolment by province.Province -- 各职位报名人数.所属地区 与 各省份报名人数.省份", "columns_en": {"省份": "Province", "岗位数": "Number_of_posts", "招考人数": "Number_of_candidates", "报名人数": "Number_of_persons_registered", "0报名职位数量": "Number_of_job_openings", "合格人数": "Number_of_eligible_persons", "0合格职位数量": "Number_of_eligible_posts", "竞争比": "Competition", "职位名称": "Name_of_position", "部门名称": "Name_of_department", "所属地区": "Territory_to_which_it_belongs", "报考人数": "Number_of_applicants", "国家": "National", "大学数量": "Number_of_universities", "野鸡大学数量": "Number_of_pheasant_universities", "城市": "Urban", "占比": "Percentage"}, "table_en": {"各省份报名人数": "Enrolment_by_province", "各职位报名人数": "Number_of_persons_enrolled_in_each_position", "各国野鸡大学数量": "Number_of_pheasant_universities_in_various_countries", "中国各城市野鸡大学数量": "Number_of_pheasant_universities_in_Chinese_cities"}}, "车展": {"sqlite": "CREATE TABLE Car show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Car show time VARCHAR(50), -- 车展时间\n  Days of exhibition DATETIME, -- 参展天数\n  Location of the vehicle exhibition INTEGER, -- 车展地点\n  It's in the city VARCHAR(50), -- 位于城市\n  Number of display brands VARCHAR(50), -- 参展品牌数\n);\nCREATE TABLE Automobile brand (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  Minimum price VARCHAR(50), -- 最低价格\n  Maximum price INTEGER, -- 最高价格\n  Advocate INTEGER, -- 代言人\n);\nCREATE TABLE Car show brand (\n  Brandid VARCHAR(50) PRIMARY KEY, -- 品牌id\n  Car show id INTEGER, -- 车展id\n  Station model INTEGER, -- 站台模特\n  Heat Rating VARCHAR(50), -- 热度排名\n);\n-- Car show brand.Brandid can be joined with Automobile brand.Phrase id -- 车展参展品牌.品牌id 与 汽车品牌.词条id\n-- Car show brand.Car show id can be joined with Car show.Phrase id -- 车展参展品牌.车展id 与 车展.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "车展时间": "Car_show_time", "参展天数": "Days_of_exhibition", "车展地点": "Location_of_the_vehicle_exhibition", "位于城市": "It's_in_the_city", "参展品牌数": "Number_of_display_brands", "所属公司": "Company_to_which_it_belongs", "最低价格": "Minimum_price", "最高价格": "Maximum_price", "代言人": "Advocate", "品牌id": "Brandid", "车展id": "Car_show_id", "站台模特": "Station_model", "热度排名": "Heat_Rating"}, "table_en": {"车展": "Car_show", "汽车品牌": "Automobile_brand", "车展参展品牌": "Car_show_brand"}}, "中国电视剧奖项": {"sqlite": "CREATE TABLE Chinese TV drama awards (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Host VARCHAR(50), -- 主办单位\n   Other Organiser VARCHAR(50), -- 创办时间\n);\nCREATE TABLE Actor (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Graduate schools DATETIME, -- 毕业院校\n  Occupation VARCHAR(50), -- 职业\n);\nCREATE TABLE A TV show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  Launch time VARCHAR(50), -- 首播时间\n  Collections DATETIME, -- 集数\n  Bean petals INTEGER, -- 豆瓣评分\n);\nCREATE TABLE Successive awards parties (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Television drama prized INTEGER, -- 电视剧奖id\n  Award location INTEGER, -- 颁奖地点\n);\nCREATE TABLE List of prize-winning staff (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Television drama prized INTEGER, -- 电视剧奖id\n  Specific awards INTEGER, -- 具体奖项\n  Laureate id VARCHAR(50), -- 获奖人id\n  From the TV play id INTEGER, -- 来自电视剧id\n);\nCREATE TABLE List of prize-winning films (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Television drama prized INTEGER, -- 电视剧奖id\n  Specific awards INTEGER, -- 具体奖项\n  Award-winning TV dramad VARCHAR(50), -- 获奖电视剧id\n);\n-- Successive awards parties.Television drama prized can be joined with Chinese TV drama awards.Phrase id -- 历届颁奖晚会.电视剧奖id 与 中国电视剧奖.词条id\n-- List of prize-winning staff.Television drama prized can be joined with Chinese TV drama awards.Phrase id -- 历届获奖演职员名单.电视剧奖id 与 中国电视剧奖.词条id\n-- List of prize-winning staff.Laureate id can be joined with Actor.Phrase id -- 历届获奖演职员名单.获奖人id 与 演职员.词条id\n-- List of prize-winning films.Award-winning TV dramad can be joined with A TV show.Phrase id -- 历届获奖影视剧名单.获奖电视剧id 与 电视剧.词条id\n-- List of prize-winning films.Television drama prized can be joined with Chinese TV drama awards.Phrase id -- 历届获奖影视剧名单.电视剧奖id 与 中国电视剧奖.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "主办单位": "Host", "创办时间": "_Other_Organiser", "姓名": "Name", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "毕业院校": "Graduate_schools", "职业": "Occupation", "类型": "Type", "首播时间": "Launch_time", "集数": "Collections", "豆瓣评分": "Bean_petals", "年份": "Year", "届数": "Number_of_sessions", "电视剧奖id": "Television_drama_prized", "颁奖地点": "Award_location", "具体奖项": "Specific_awards", "获奖人id": "Laureate_id", "来自电视剧id": "From_the_TV_play_id", "获奖电视剧id": "Award-winning_TV_dramad"}, "table_en": {"中国电视剧奖": "Chinese_TV_drama_awards", "演职员": "Actor", "电视剧": "A_TV_show", "历届颁奖晚会": "Successive_awards_parties", "历届获奖演职员名单": "List_of_prize-winning_staff", "历届获奖影视剧名单": "List_of_prize-winning_films"}}, "小说改编电视剧": {"sqlite": "CREATE TABLE A TV show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  Launch time VARCHAR(50), -- 首播时间\n  Collections DATETIME, -- 集数\n);\nCREATE TABLE Novel (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  It's a novel INTEGER, -- 小说名\n  Author VARCHAR(50), -- 作者\n  Words VARCHAR(50), -- 字数\n  Status INTEGER, -- 状态\n);\nCREATE TABLE It's a revised TV show (\n  novel id VARCHAR(50) PRIMARY KEY, -- 小说id\n  TV dramad INTEGER, -- 电视剧id\n  Rating INTEGER, -- 评分\n);\n-- It's a revised TV show.TV dramad can be joined with A TV show.Phrase id -- 改编的电视剧.电视剧id 与 电视剧.词条id\n-- It's a revised TV show.novel id can be joined with Novel.Phrase id -- 改编的电视剧.小说id 与 小说.词条id", "columns_en": {"词条id": "Phrase_id", "剧名": "The_title_of_the_play", "首播时间": "Launch_time", "集数": "Collections", "小说名": "It's_a_novel", "作者": "Author", "字数": "Words", "状态": "Status", "小说id": "novel_id", "电视剧id": "TV_dramad", "评分": "Rating"}, "table_en": {"电视剧": "A_TV_show", "小说": "Novel", "改编的电视剧": "It's_a_revised_TV_show"}}, "毕业生薪资": {"sqlite": "CREATE TABLE School (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  It's in the city VARCHAR(50), -- 所在城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  No  985 Colleges VARCHAR(50), -- 是否985院校\n  Is it 211? BINARY, -- 是否211院校\n  Average monthly salary for 2016 BINARY, -- 2016届平均月薪\n  Average monthly salary for 2014 INTEGER, -- 2014届平均月薪\n  Average monthly salary for 2012 INTEGER, -- 2012届平均月薪\n);\nCREATE TABLE Number of school graduates (\n  School id INTEGER PRIMARY KEY, -- 学校id\n  Education INTEGER, -- 学历\n  Number of persons in 2016 VARCHAR(50), -- 2016届人数\n  Number of sessions in 2014 INTEGER, -- 2014届人数\n  Number of sessions held in 2012 INTEGER, -- 2012届人数\n);\nCREATE TABLE Professional (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type of discipline VARCHAR(50), -- 学科类型\n  It's cold and hot VARCHAR(50), -- 冷热门\n);\nCREATE TABLE School specialization (\n  Professional id BINARY PRIMARY KEY, -- 专业id\n  School id INTEGER, -- 学校id\n  Focusing on professions INTEGER, -- 是否重点专业\n);\nCREATE TABLE Professional employment (\n  Professional id BINARY PRIMARY KEY, -- 专业id\n  Average monthly salary for 2016 INTEGER, -- 2016届平均月薪\n  Average monthly salary for 2014 INTEGER, -- 2014届平均月薪\n  Average monthly salary for 2012 INTEGER, -- 2012届平均月薪\n  Employment rate in 2016 INTEGER, -- 2016届就业率\n  Employment rate in 2014 INTEGER, -- 2014届就业率\n  Employment rate in 2012 INTEGER, -- 2012届就业率\n);\n-- Number of school graduates.School id can be joined with School.Phrase id -- 学校毕业人数.学校id 与 学校.词条id\n-- School specialization.Professional id can be joined with Professional.Phrase id -- 学校专业.专业id 与 专业.词条id\n-- Professional employment.Professional id can be joined with Professional.Phrase id -- 专业就业情况.专业id 与 专业.词条id\n-- School specialization.School id can be joined with School.Phrase id -- 学校专业.学校id 与 学校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "类型": "Type", "所在城市": "It's_in_the_city", "所属省份": "Provinces_to_which_they_belong", "是否985院校": "No__985_Colleges", "是否211院校": "Is_it_211?", "2016届平均月薪": "Average_monthly_salary_for_2016", "2014届平均月薪": "Average_monthly_salary_for_2014", "2012届平均月薪": "Average_monthly_salary_for_2012", "学校id": "School_id", "学历": "Education", "2016届人数": "Number_of_persons_in_2016", "2014届人数": "Number_of_sessions_in_2014", "2012届人数": "Number_of_sessions_held_in_2012", "学科类型": "Type_of_discipline", "冷热门": "It's_cold_and_hot", "专业id": "Professional_id", "是否重点专业": "Focusing_on_professions", "2016届就业率": "Employment_rate_in_2016", "2014届就业率": "Employment_rate_in_2014", "2012届就业率": "Employment_rate_in_2012"}, "table_en": {"学校": "School", "学校毕业人数": "Number_of_school_graduates", "专业": "Professional", "学校专业": "School_specialization", "专业就业情况": "Professional_employment"}}, "中国文学奖": {"sqlite": "CREATE TABLE Literary prizes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Establishment VARCHAR(50), -- 设立时间\n  Reasons for establishment DATETIME, -- 设立原因\n  Number of years held VARCHAR(50), -- 举办间隔年限\n);\nCREATE TABLE Awards for literary awards (\n  Literary prized INTEGER PRIMARY KEY, -- 文学奖id\n  Awards INTEGER, -- 奖项\n);\nCREATE TABLE Literary works (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Author VARCHAR(50), -- 作者\n  The time of creation INTEGER, -- 创作年代\n  First release time INTEGER, -- 首版时间\n  Words DATETIME, -- 字数\n);\nCREATE TABLE List of prizes for literature (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Worksid INTEGER, -- 作品id\n  Author INTEGER, -- 作者\n  Publications VARCHAR(50), -- 出版社\n);\n-- List of prizes for literature.Worksid can be joined with Literary works.Phrase id -- 文学奖获奖名单.作品id 与 文学作品.词条id\n-- Awards for literary awards.Literary prized can be joined with Literary prizes.Phrase id -- 文学奖项颁奖奖项.文学奖id 与 文学奖.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "设立时间": "Establishment", "设立原因": "Reasons_for_establishment", "举办间隔年限": "Number_of_years_held", "文学奖id": "Literary_prized", "奖项": "Awards", "作者": "Author", "创作年代": "The_time_of_creation", "首版时间": "First_release_time", "字数": "Words", "届数": "Number_of_sessions", "作品id": "Worksid", "出版社": "Publications"}, "table_en": {"文学奖": "Literary_prizes", "文学奖项颁奖奖项": "Awards_for_literary_awards", "文学作品": "Literary_works", "文学奖获奖名单": "List_of_prizes_for_literature"}}, "互联网企业": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  Founder DATETIME, -- 创始人\n  Chief Executive Officer VARCHAR(50), -- 首席执行官\n  Annual turnover DATETIME, -- 年营业额\n  Number of employees INTEGER, -- 员工数\n);\nCREATE TABLE Brand (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Company to which Id belongs DATETIME, -- 所属公司id\n  Statutory representatives VARCHAR(50), -- 法定代表人\n  Registered capital VARCHAR(50), -- 注册资本\n);\nCREATE TABLE Corporate branding revenue from previous years (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Brandid DATETIME, -- 品牌id\n  Collection INTEGER, -- 营收\n  Profit INTEGER, -- 利润\n  Growth in revenue on a year-on-year basis INTEGER, -- 营收同比增长\n  Profit growth per year INTEGER, -- 利润同比增长\n);\nCREATE TABLE Corporate brand income rankings (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Brandid INTEGER, -- 品牌id\n  Percentage of revenue received INTEGER, -- 营收占比\n  Profit ratio INTEGER, -- 利润占比\n  Expenditure as a percentage INTEGER, -- 支出占比\n);\n-- Brand.Company to which Id belongs can be joined with Company.Phrase id -- 品牌.所属公司id 与 公司.词条id\n-- Corporate brand income rankings.Companyid can be joined with Company.Phrase id -- 公司各品牌收入排名.公司id 与 公司.词条id\n-- Corporate brand income rankings.Brandid can be joined with Brand.Phrase id -- 公司各品牌收入排名.品牌id 与 品牌.词条id\n-- Corporate branding revenue from previous years.Brandid can be joined with Brand.Phrase id -- 公司品牌历年收入.品牌id 与 品牌.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "创始人": "Founder", "首席执行官": "Chief_Executive_Officer", "年营业额": "Annual_turnover", "员工数": "Number_of_employees", "所属公司id": "Company_to_which_Id_belongs", "法定代表人": "Statutory_representatives", "注册资本": "Registered_capital", "年份": "Year", "品牌id": "Brandid", "营收": "Collection", "利润": "Profit", "营收同比增长": "Growth_in_revenue_on_a_year-on-year_basis", "利润同比增长": "Profit_growth_per_year", "公司id": "Companyid", "营收占比": "Percentage_of_revenue_received", "利润占比": "Profit_ratio", "支出占比": "Expenditure_as_a_percentage"}, "table_en": {"公司": "Company", "品牌": "Brand", "公司品牌历年收入": "Corporate_branding_revenue_from_previous_years", "公司各品牌收入排名": "Corporate_brand_income_rankings"}}, "中国传统节日": {"sqlite": "CREATE TABLE Traditional festivals (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Holiday time VARCHAR(50), -- 节日时间\n  Time of origin DATETIME, -- 起源时间\n);\nCREATE TABLE Festivities Populaire Countries (\n  Holidayid VARCHAR(50) PRIMARY KEY, -- 节日id\n  National INTEGER, -- 国家\n  Activities VARCHAR(50), -- 活动\n);\nCREATE TABLE Holiday dietary culture (\n  Holidayid VARCHAR(50) PRIMARY KEY, -- 节日id\n  Urban INTEGER, -- 城市\n  Diet VARCHAR(50), -- 饮食\n);\n-- Festivities Populaire Countries.Holidayid can be joined with Traditional festivals.Phrase id -- 节日流行国家.节日id 与 传统节日.词条id\n-- Holiday dietary culture.Holidayid can be joined with Traditional festivals.Phrase id -- 节日饮食文化.节日id 与 传统节日.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "节日时间": "Holiday_time", "起源时间": "Time_of_origin", "节日id": "Holidayid", "国家": "National", "活动": "Activities", "城市": "Urban", "饮食": "Diet"}, "table_en": {"传统节日": "Traditional_festivals", "节日流行国家": "Festivities_Populaire_Countries", "节日饮食文化": "Holiday_dietary_culture"}}, "各城市天气": {"sqlite": "CREATE TABLE Urban temperature (\n  Urban VARCHAR(50) PRIMARY KEY, -- 城市\n  Average summer temperature VARCHAR(50), -- 夏季平均温度\n  Average winter temperature INTEGER, -- 冬季平均温度\n  Average annual temperature INTEGER, -- 年平均温度\n);\nCREATE TABLE The cities are extremely hot (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Extremely high temperature VARCHAR(50), -- 极端高温\n  Date of occurrence INTEGER, -- 出现日期\n);\nCREATE TABLE The cities are extremely cold (\n  Urban DATETIME PRIMARY KEY, -- 城市\n  Extremely hypothermia VARCHAR(50), -- 极端低温\n  Date of occurrence INTEGER, -- 出现日期\n);\nCREATE TABLE Average monthly temperatures per city (\n  Urban DATETIME PRIMARY KEY, -- 城市\n  January VARCHAR(50), -- 一月\n  February INTEGER, -- 二月\n  March INTEGER, -- 三月\n  April INTEGER, -- 四月\n  May INTEGER, -- 五月\n  June INTEGER, -- 六月\n  July INTEGER, -- 七月\n  August INTEGER, -- 八月\n  September INTEGER, -- 九月\n  October INTEGER, -- 十月\n  November INTEGER, -- 十一月\n  December INTEGER, -- 十二月\n);\nCREATE TABLE Average monthly rainfall per city mm (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  January VARCHAR(50), -- 一月\n  February INTEGER, -- 二月\n  March INTEGER, -- 三月\n  April INTEGER, -- 四月\n  May INTEGER, -- 五月\n  June INTEGER, -- 六月\n  July INTEGER, -- 七月\n  August INTEGER, -- 八月\n  September INTEGER, -- 九月\n  October INTEGER, -- 十月\n  November INTEGER, -- 十一月\n  December INTEGER, -- 十二月\n);\n", "columns_en": {"城市": "Urban", "夏季平均温度": "Average_summer_temperature", "冬季平均温度": "Average_winter_temperature", "年平均温度": "Average_annual_temperature", "极端高温": "Extremely_high_temperature", "出现日期": "Date_of_occurrence", "极端低温": "Extremely_hypothermia", "一月": "January", "二月": "February", "三月": "March", "四月": "April", "五月": "May", "六月": "June", "七月": "July", "八月": "August", "九月": "September", "十月": "October", "十一月": "November", "十二月": "December"}, "table_en": {"城市温度": "Urban_temperature", "各城市极端高温": "The_cities_are_extremely_hot", "各城市极端低温": "The_cities_are_extremely_cold", "各城市各月平均气温": "Average_monthly_temperatures_per_city", "各城市各月平均降水量mm": "Average_monthly_rainfall_per_city_mm"}}, "世界旅游城市": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  National VARCHAR(50), -- 国家\n  World ranking  2017 VARCHAR(50), -- 2017年世界排名\n  World ranking in 2018 INTEGER, -- 2018年世界排名\n  World ranking 2019 INTEGER, -- 2019年世界排名\n);\nCREATE TABLE Number of tourists (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Urban id DATETIME, -- 城市id\n  Population receiving INTEGER, -- 接待人口\n  Income INTEGER, -- 收入\n);\n-- Number of tourists.Urban id can be joined with Urban.Phrase id -- 旅游人数.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "国家": "National", "2017年世界排名": "World_ranking__2017", "2018年世界排名": "World_ranking_in_2018", "2019年世界排名": "World_ranking_2019", "年份": "Year", "城市id": "Urban_id", "接待人口": "Population_receiving", "收入": "Income"}, "table_en": {"城市": "Urban", "旅游人数": "Number_of_tourists"}}, "用户出行用车": {"sqlite": "CREATE TABLE The drop-and-drop trip (\n  Season VARCHAR(50) PRIMARY KEY, -- 季节\n  Could not close temporary folder: %s VARCHAR(50), -- 是否工作日\n  Temperature BINARY, -- 温度\n  Humidity INTEGER, -- 湿度\n  Wind speed INTEGER, -- 风速\n  Number of day orders INTEGER, -- 日订单数量\n  Number of taxis per person INTEGER, -- 人均打车次数\n  Average waiting time INTEGER, -- 平均等待时间\n);\nCREATE TABLE Share bike travels (\n  Season INTEGER PRIMARY KEY, -- 季节\n  Could not close temporary folder: %s VARCHAR(50), -- 是否工作日\n  Temperature BINARY, -- 温度\n  Humidity INTEGER, -- 湿度\n  Wind speed INTEGER, -- 风速\n  Number of cyclings per person INTEGER, -- 人均骑车次数\n  Ride distance per person INTEGER, -- 人均骑车距离\n);\n", "columns_en": {"季节": "Season", "是否工作日": "Could_not_close_temporary_folder:_%s", "温度": "Temperature", "湿度": "Humidity", "风速": "Wind_speed", "日订单数量": "Number_of_day_orders", "人均打车次数": "Number_of_taxis_per_person", "平均等待时间": "Average_waiting_time", "人均骑车次数": "Number_of_cyclings_per_person", "人均骑车距离": "Ride_distance_per_person"}, "table_en": {"滴滴打车出行": "The_drop-and-drop_trip", "共享单车出行": "Share_bike_travels"}}, "劳伦斯世界体育奖": {"sqlite": "CREATE TABLE Athletes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Sports projects VARCHAR(50), -- 体育项目\n);\nCREATE TABLE Lawrence's nomination list (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Nominee id DATETIME, -- 提名人id\n  Nomination of awards INTEGER, -- 提名奖项\n  Reasons for nomination VARCHAR(50), -- 提名理由\n);\nCREATE TABLE Lawrence's winning list (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Awards DATETIME, -- 奖项\n  Laureate id VARCHAR(50), -- 获奖人id\n);\nCREATE TABLE List of countries that received the Lawrence Award (\n  National INTEGER PRIMARY KEY, -- 国家\n  Gender of winners VARCHAR(50), -- 获奖人性别\n  Number of winners VARCHAR(50), -- 获奖人数\n  Percentage INTEGER, -- 所占比例\n);\n-- Lawrence's winning list.Laureate id can be joined with Athletes.Phrase id -- 劳伦斯获奖名单.获奖人id 与 运动员.词条id\n-- Lawrence's nomination list.Nominee id can be joined with Athletes.Phrase id -- 劳伦斯提名名单.提名人id 与 运动员.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "体育项目": "Sports_projects", "年份": "Year", "提名人id": "Nominee_id", "提名奖项": "Nomination_of_awards", "提名理由": "Reasons_for_nomination", "奖项": "Awards", "获奖人id": "Laureate_id", "国家": "National", "获奖人性别": "Gender_of_winners", "获奖人数": "Number_of_winners", "所占比例": "Percentage"}, "table_en": {"运动员": "Athletes", "劳伦斯提名名单": "Lawrence's_nomination_list", "劳伦斯获奖名单": "Lawrence's_winning_list", "劳伦斯获奖国家名单": "List_of_countries_that_received_the_Lawrence_Award"}}, "城市市民市容": {"sqlite": "CREATE TABLE Province (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  North-South region VARCHAR(50), -- 南北区域\n  East and West VARCHAR(50), -- 东西区域\n  5 regions VARCHAR(50), -- 5区域\n);\nCREATE TABLE Average height and lifetime (\n  Province id VARCHAR(50) PRIMARY KEY, -- 省份id\n  Gender INTEGER, -- 性别\n  Average height VARCHAR(50), -- 平均身高\n  Life expectancy INTEGER, -- 平均寿命\n);\nCREATE TABLE Proportion of beautiful women by province (\n  Province id INTEGER PRIMARY KEY, -- 省份id\n  The evaluator came from the region INTEGER, -- 评价者来自区域\n  Proportion of beautiful women VARCHAR(50), -- 美女比例\n  Average color score for beautiful women INTEGER, -- 美女平均颜值分数\n);\nCREATE TABLE Provincial and municipal ratings (\n  Province id INTEGER PRIMARY KEY, -- 省份id\n  The evaluator came from the region INTEGER, -- 评价者来自区域\n  City Conformity Rating VARCHAR(50), -- 市容评分\n  Citizen Quality Rating INTEGER, -- 市民素质评分\n);\nCREATE TABLE The country's ten big cities (\n  Name of city INTEGER PRIMARY KEY, -- 城市名称\n  Province to which id belongs VARCHAR(50), -- 所属省份id\n  Rank INTEGER, -- 排名\n);\n-- The country's ten big cities.Province to which id belongs can be joined with Province.Phrase id -- 民风彪悍十大城市.所属省份id 与 省份.词条id\n-- Provincial and municipal ratings.Province id can be joined with Province.Phrase id -- 各省市容评分.省份id 与 省份.词条id\n-- Average height and lifetime.Province id can be joined with Province.Phrase id -- 平均身高和寿命.省份id 与 省份.词条id\n-- Proportion of beautiful women by province.Province id can be joined with Province.Phrase id -- 各省美女比例.省份id 与 省份.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "南北区域": "North-South_region", "东西区域": "East_and_West", "5区域": "5_regions", "省份id": "Province_id", "性别": "Gender", "平均身高": "Average_height", "平均寿命": "Life_expectancy", "评价者来自区域": "The_evaluator_came_from_the_region", "美女比例": "Proportion_of_beautiful_women", "美女平均颜值分数": "Average_color_score_for_beautiful_women", "市容评分": "City_Conformity_Rating", "市民素质评分": "Citizen_Quality_Rating", "城市名称": "Name_of_city", "所属省份id": "Province_to_which_id_belongs", "排名": "Rank"}, "table_en": {"省份": "Province", "平均身高和寿命": "Average_height_and_lifetime", "各省美女比例": "Proportion_of_beautiful_women_by_province", "各省市容评分": "Provincial_and_municipal_ratings", "民风彪悍十大城市": "The_country's_ten_big_cities"}}, "快递公司": {"sqlite": "CREATE TABLE It's a delivery company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  Number of employees DATETIME, -- 员工数量\n  Transport vehicles INTEGER, -- 运输车辆数\n  Number of cities covered INTEGER, -- 覆盖城市数量\n  Number of points INTEGER, -- 网点数量\n);\nCREATE TABLE Province (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Organisation VARCHAR(50), -- 所属区域\n);\nCREATE TABLE Delivery fee (\n  Express Delivery id VARCHAR(50) PRIMARY KEY, -- 快递公司id\n  Regional INTEGER, -- 区域\n  Start price VARCHAR(50), -- 起步价格\n  Number of kg starting INTEGER, -- 起步公斤数\n  Price per kilogram INTEGER, -- 每公斤价格\n);\nCREATE TABLE Package Scope (\n  Express Delivery id INTEGER PRIMARY KEY, -- 快递公司id\n  Shipment area INTEGER, -- 发货区域\n  Pouch area VARCHAR(50), -- 包邮区域\n);\n-- Delivery fee.Regional can be joined with Province.Organisation -- 快递费.区域 与 省份.所属区域\n-- Delivery fee.Express Delivery id can be joined with It's a delivery company.Phrase id -- 快递费.快递公司id 与 快递公司.词条id\n-- Package Scope.Pouch area can be joined with Province.Organisation -- 包邮范围.包邮区域 与 省份.所属区域\n-- Package Scope.Express Delivery id can be joined with It's a delivery company.Phrase id -- 包邮范围.快递公司id 与 快递公司.词条id\n-- Package Scope.Shipment area can be joined with Province.Organisation -- 包邮范围.发货区域 与 省份.所属区域", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "员工数量": "Number_of_employees", "运输车辆数": "Transport_vehicles", "覆盖城市数量": "Number_of_cities_covered", "网点数量": "Number_of_points", "所属区域": "Organisation", "快递公司id": "Express_Delivery_id", "区域": "Regional", "起步价格": "Start_price", "起步公斤数": "Number_of_kg_starting", "每公斤价格": "Price_per_kilogram", "发货区域": "Shipment_area", "包邮区域": "Pouch_area"}, "table_en": {"快递公司": "It's_a_delivery_company", "省份": "Province", "快递费": "Delivery_fee", "包邮范围": "Package_Scope"}}, "奥运会举办国": {"sqlite": "CREATE TABLE Summer Olympics (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Olympic Games INTEGER, -- 奥运会\n  Host country VARCHAR(50), -- 举办国家\n  Host city VARCHAR(50), -- 举办城市\n  The slogan VARCHAR(50), -- 口号\n);\nCREATE TABLE Winter Olympics (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Olympic Games INTEGER, -- 奥运会\n  Host country VARCHAR(50), -- 举办国家\n  Host city VARCHAR(50), -- 举办城市\n);\nCREATE TABLE The Olympic Games are going to run in the country (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Olympic Games INTEGER, -- 奥运会\n  Request for a State VARCHAR(50), -- 申办国家\n  City application VARCHAR(50), -- 申办城市\n  Success VARCHAR(50), -- 是否成功\n);\n", "columns_en": {"届数": "Number_of_sessions", "奥运会": "Olympic_Games", "举办国家": "Host_country", "举办城市": "Host_city", "口号": "The_slogan", "申办国家": "Request_for_a_State", "申办城市": "City_application", "是否成功": "Success"}, "table_en": {"夏季奥运会": "Summer_Olympics", "冬季奥运会": "Winter_Olympics", "奥运会申办国家": "The_Olympic_Games_are_going_to_run_in_the_country"}}, "奢侈品消费": {"sqlite": "CREATE TABLE Luxury brands (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  National VARCHAR(50), -- 国家\n  I'm familiar with it VARCHAR(50), -- 熟识度\n  Purchasing power ranking INTEGER, -- 购买力排名\n);\nCREATE TABLE Luxury consumer countries (\n  Luxury id INTEGER PRIMARY KEY, -- 奢侈品id\n  National INTEGER, -- 国家\n  Year VARCHAR(50), -- 年份\n  Consumption DATETIME, -- 消费额\n  Share of consumption INTEGER, -- 消费额占比\n);\nCREATE TABLE People buying luxury goods (\n  Luxury id INTEGER PRIMARY KEY, -- 奢侈品id\n  Age group INTEGER, -- 年龄段\n  Number of persons purchased VARCHAR(50), -- 购买人数\n  Number of persons as a percentage INTEGER, -- 人数占比\n  Consumption INTEGER, -- 消费额\n  Share of consumption INTEGER, -- 消费额占比\n);\nCREATE TABLE Luxury goods channels (\n  Luxury id INTEGER PRIMARY KEY, -- 奢侈品id\n  Understanding channels INTEGER, -- 了解渠道\n  Number of persons as a percentage VARCHAR(50), -- 人数占比\n);\nCREATE TABLE Luxury users care about dimensions distribution (\n  Age group INTEGER PRIMARY KEY, -- 年龄段\n  Look at the medium dimension VARCHAR(50), -- 看中维度\n  Number of persons as a percentage VARCHAR(50), -- 人数占比\n);\n-- People buying luxury goods.Luxury id can be joined with Luxury brands.Phrase id -- 奢侈品购买人群.奢侈品id 与 奢侈品牌.词条id\n-- Luxury goods channels.Luxury id can be joined with Luxury brands.Phrase id -- 奢侈品渠道.奢侈品id 与 奢侈品牌.词条id\n-- Luxury consumer countries.Luxury id can be joined with Luxury brands.Phrase id -- 奢侈品消费国家.奢侈品id 与 奢侈品牌.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "国家": "National", "熟识度": "I'm_familiar_with_it", "购买力排名": "Purchasing_power_ranking", "奢侈品id": "Luxury_id", "年份": "Year", "消费额": "Consumption", "消费额占比": "Share_of_consumption", "年龄段": "Age_group", "购买人数": "Number_of_persons_purchased", "人数占比": "Number_of_persons_as_a_percentage", "了解渠道": "Understanding_channels", "看中维度": "Look_at_the_medium_dimension"}, "table_en": {"奢侈品牌": "Luxury_brands", "奢侈品消费国家": "Luxury_consumer_countries", "奢侈品购买人群": "People_buying_luxury_goods", "奢侈品渠道": "Luxury_goods_channels", "奢侈品用户在意维度分布": "Luxury_users_care_about_dimensions_distribution"}}, "洗衣机": {"sqlite": "CREATE TABLE Laundry machine brand (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n   Other Organiser VARCHAR(50), -- 成立时间\n  The world's top 500 DATETIME, -- 世界500强排名\n  Market share INTEGER, -- 市场份额\n  Operating in 2018 INTEGER, -- 2018年营业额\n  Profit in 2018 INTEGER, -- 2018年利润\n);\nCREATE TABLE Type of washing machine (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Product category VARCHAR(50), -- 产品类别\n  Laundry capacity VARCHAR(50), -- 洗涤容量\n  Energy efficiency level INTEGER, -- 能效等级\n  Level of automation INTEGER, -- 自动化程度\n  Price of sale VARCHAR(50), -- 售价\n  Brandid INTEGER, -- 品牌id\n);\nCREATE TABLE Laundry brand door (\n  Brandid INTEGER PRIMARY KEY, -- 品牌id\n  Urban INTEGER, -- 城市\n  Number of shops VARCHAR(50), -- 门店数量\n  Sales INTEGER, -- 售卖量\n  Average sales price INTEGER, -- 平均售价\n);\nCREATE TABLE Laundry machine branding platform rating (\n  Brandid INTEGER PRIMARY KEY, -- 品牌id\n  Platform INTEGER, -- 平台\n  Total score VARCHAR(50), -- 总评分\n  Pay-for-money score INTEGER, -- 性价比得分\n  Function Score INTEGER, -- 功能得分\n  It's a work score INTEGER, -- 做工得分\n  Appearance score INTEGER, -- 外观得分\n);\n-- Laundry brand door.Brandid can be joined with Laundry machine brand.Phrase id -- 洗衣机品牌门店.品牌id 与 洗衣机品牌.词条id\n-- Laundry machine branding platform rating.Brandid can be joined with Laundry machine brand.Phrase id -- 洗衣机品牌平台评分.品牌id 与 洗衣机品牌.词条id\n-- Type of washing machine.Brandid can be joined with Laundry machine brand.Phrase id -- 洗衣机型号.品牌id 与 洗衣机品牌.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属公司": "Company_to_which_it_belongs", "成立时间": "_Other_Organiser", "世界500强排名": "The_world's_top_500", "市场份额": "Market_share", "2018年营业额": "Operating_in_2018", "2018年利润": "Profit_in_2018", "产品类别": "Product_category", "洗涤容量": "Laundry_capacity", "能效等级": "Energy_efficiency_level", "自动化程度": "Level_of_automation", "售价": "Price_of_sale", "品牌id": "Brandid", "城市": "Urban", "门店数量": "Number_of_shops", "售卖量": "Sales", "平均售价": "Average_sales_price", "平台": "Platform", "总评分": "Total_score", "性价比得分": "Pay-for-money_score", "功能得分": "Function_Score", "做工得分": "It's_a_work_score", "外观得分": "Appearance_score"}, "table_en": {"洗衣机品牌": "Laundry_machine_brand", "洗衣机型号": "Type_of_washing_machine", "洗衣机品牌门店": "Laundry_brand_door", "洗衣机品牌平台评分": "Laundry_machine_branding_platform_rating"}}, "购物网站": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Founder DATETIME, -- 创始人\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n);\nCREATE TABLE Shopping Network (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of website INTEGER, -- 网站名称\n  Company to which Id belongs VARCHAR(50), -- 所属公司id\n  Online time INTEGER, -- 上线时间\n  Official Network DATETIME, -- 官网\n  100% weight VARCHAR(50), -- 百度权重\n  PPR Value INTEGER, -- PR值\n  Inverse number INTEGER, -- 反链数\n  Combined Scores INTEGER, -- 综合分数\n  Total ranking INTEGER, -- 总排名\n   Other Organiser INTEGER, -- 所在省排名\n  The company's website is ranked INTEGER, -- 电商网站排名\n);\nCREATE TABLE Days of activity (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name of activity INTEGER, -- 活动名称\n  Time VARCHAR(50), -- 时间\n  Inventoriesid DATETIME, -- 发明公司id\n);\nCREATE TABLE Income from website activities (\n  Websiteid INTEGER PRIMARY KEY, -- 网站id\n  Activity id INTEGER, -- 活动id\n  Year INTEGER, -- 年份\n  Next single amount DATETIME, -- 下单金额\n  Year-on-year growth INTEGER, -- 同比增长\n);\nCREATE TABLE The website's not working (\n  Websiteid INTEGER PRIMARY KEY, -- 网站id\n  Year INTEGER, -- 年份\n  315 nominations DATETIME, -- 315提名次数\n  Number of false claims made by buyers INTEGER, -- 买家打假次数\n  Year-on-year growth INTEGER, -- 同比增长\n);\n-- Shopping Network.Company to which Id belongs can be joined with Company.Phrase id -- 购物网.所属公司id 与 公司.词条id\n-- The website's not working.Websiteid can be joined with Shopping Network.Phrase id -- 网站打假.网站id 与 购物网.词条id\n-- Income from website activities.Websiteid can be joined with Shopping Network.Phrase id -- 网站活动收入.网站id 与 购物网.词条id\n-- Days of activity.Inventoriesid can be joined with Company.Phrase id -- 活动日.发明公司id 与 公司.词条id\n-- Income from website activities.Activity id can be joined with Days of activity.Phrase id -- 网站活动收入.活动id 与 活动日.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "创始人": "Founder", "所属省份": "Provinces_to_which_they_belong", "网站名称": "Name_of_website", "所属公司id": "Company_to_which_Id_belongs", "上线时间": "Online_time", "官网": "Official_Network", "百度权重": "100%_weight", "PR值": "PPR_Value", "反链数": "Inverse_number", "综合分数": "Combined_Scores", "总排名": "Total_ranking", "所在省排名": "_Other_Organiser", "电商网站排名": "The_company's_website_is_ranked", "活动名称": "Name_of_activity", "时间": "Time", "发明公司id": "Inventoriesid", "网站id": "Websiteid", "活动id": "Activity_id", "年份": "Year", "下单金额": "Next_single_amount", "同比增长": "Year-on-year_growth", "315提名次数": "315_nominations", "买家打假次数": "Number_of_false_claims_made_by_buyers"}, "table_en": {"公司": "Company", "购物网": "Shopping_Network", "活动日": "Days_of_activity", "网站活动收入": "Income_from_website_activities", "网站打假": "The_website's_not_working"}}, "社交软件": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  It's in the city DATETIME, -- 位于城市\n);\nCREATE TABLE Social APP (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  App Name INTEGER, -- app名称\n  Software Size VARCHAR(50), -- 软件大小\n  Number of registered users INTEGER, -- 注册用户量\n  Number of daily active users INTEGER, -- 日活跃用户量\n  parent companyid DATETIME, -- 母公司id\n);\nCREATE TABLE Functions (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Introduction VARCHAR(50), -- 简介\n);\nCREATE TABLE APP-supported functionality (\n  Function id VARCHAR(50) PRIMARY KEY, -- 功能id\n  Appid INTEGER, -- appid\n  Whether or not to perform primary functions INTEGER, -- 是否主要功能\n);\n-- APP-supported functionality.Function id can be joined with Functions.Phrase id -- APP支持的功能.功能id 与 功能.词条id\n-- Social APP.parent companyid can be joined with Company.Phrase id -- 社交APP.母公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "位于城市": "It's_in_the_city", "app名称": "App_Name", "软件大小": "Software_Size", "注册用户量": "Number_of_registered_users", "日活跃用户量": "Number_of_daily_active_users", "母公司id": "parent_companyid", "简介": "Introduction", "功能id": "Function_id", "appid": "Appid", "是否主要功能": "Whether_or_not_to_perform_primary_functions"}, "table_en": {"公司": "Company", "社交APP": "Social_APP", "功能": "Functions", "APP支持的功能": "APP-supported_functionality"}}, "企业融资": {"sqlite": "CREATE TABLE Enterprise (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n   Other Organiser VARCHAR(50), -- 成立时间\n  Statutory representatives DATETIME, -- 法定代表人\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Registered capital VARCHAR(50), -- 注册资本\n);\nCREATE TABLE Enterprise finance (\n  Enterprise id INTEGER PRIMARY KEY, -- 企业id\n  Financing rounds INTEGER, -- 融资轮次\n  Total financing VARCHAR(50), -- 融资总额\n  Year INTEGER, -- 年份\n);\nCREATE TABLE Investment companies (\n  Enterprise id DATETIME PRIMARY KEY, -- 企业id\n  Investment companies INTEGER, -- 投资公司\n  Financing rounds VARCHAR(50), -- 融资轮次\n  Amount of financing VARCHAR(50), -- 融资额\n  Shareholding in investment companies INTEGER, -- 投资公司持股比例\n);\n-- Investment companies.Enterprise id can be joined with Enterprise.Phrase id -- 投资公司.企业id 与 企业.词条id\n-- Enterprise finance.Enterprise id can be joined with Enterprise.Phrase id -- 企业融资.企业id 与 企业.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "成立时间": "_Other_Organiser", "法定代表人": "Statutory_representatives", "所属省份": "Provinces_to_which_they_belong", "注册资本": "Registered_capital", "企业id": "Enterprise_id", "融资轮次": "Financing_rounds", "融资总额": "Total_financing", "年份": "Year", "投资公司": "Investment_companies", "融资额": "Amount_of_financing", "投资公司持股比例": "Shareholding_in_investment_companies"}, "table_en": {"企业": "Enterprise", "企业融资": "Enterprise_finance", "投资公司": "Investment_companies"}}, "各城市垃圾": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Waste output (tonnes) VARCHAR(50), -- 垃圾产出量(万吨)\n  Number of dumps INTEGER, -- 垃圾场数量\n);\nCREATE TABLE Sources of municipal garbage (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Source INTEGER, -- 来源\n  Tons of output VARCHAR(50), -- 产出吨数\n  Total as a percentage of total INTEGER, -- 总量占比\n);\nCREATE TABLE Waste-screwing cities (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Implementation time INTEGER, -- 实施时间\n  Classification system DATETIME, -- 分类体系\n  Minimum fine VARCHAR(50), -- 最低罚款数\n  Maximum number of fines INTEGER, -- 最高罚款数\n  Garbage transport vehicle INTEGER, -- 厨余垃圾运输车辆\n  Harmful waste transport vehicles INTEGER, -- 有害垃圾运输车辆\n  Proportion of households covered INTEGER, -- 覆盖家庭比例\n  Number of volunteers INTEGER, -- 志愿者数量\n);\n-- Sources of municipal garbage.Urban id can be joined with Urban.Phrase id -- 城市垃圾来源.城市id 与 城市.词条id\n-- Waste-screwing cities.Urban id can be joined with Urban.Phrase id -- 垃圾分类的城市.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "垃圾产出量(万吨)": "Waste_output_(tonnes)", "垃圾场数量": "Number_of_dumps", "城市id": "Urban_id", "来源": "Source", "产出吨数": "Tons_of_output", "总量占比": "Total_as_a_percentage_of_total", "实施时间": "Implementation_time", "分类体系": "Classification_system", "最低罚款数": "Minimum_fine", "最高罚款数": "Maximum_number_of_fines", "厨余垃圾运输车辆": "Garbage_transport_vehicle", "有害垃圾运输车辆": "Harmful_waste_transport_vehicles", "覆盖家庭比例": "Proportion_of_households_covered", "志愿者数量": "Number_of_volunteers"}, "table_en": {"城市": "Urban", "城市垃圾来源": "Sources_of_municipal_garbage", "垃圾分类的城市": "Waste-screwing_cities"}}, "银行理财产品": {"sqlite": "CREATE TABLE Bank (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Type of company DATETIME, -- 公司类型\n  Annual turnover VARCHAR(50), -- 年营业额\n);\nCREATE TABLE Bank transfer charges (\n  Original bankid INTEGER PRIMARY KEY, -- 原银行id\n  Transfer bankid INTEGER, -- 转账银行id\n  Co-promotion fees INTEGER, -- 同省手续费\n  Cross-provincial fees INTEGER, -- 跨省手续费\n  Maximum single transfer INTEGER, -- 单笔最高转账金额\n);\nCREATE TABLE Property items (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  Annualized rate of return VARCHAR(50), -- 年化收益率\n  Storage Time INTEGER, -- 存储时间\n);\nCREATE TABLE Property and banks (\n  Product id INTEGER PRIMARY KEY, -- 产品id\n  Bankid INTEGER, -- 银行id\n  Single ceiling INTEGER, -- 单笔最高限额\n  Number of transfers per day INTEGER, -- 每日限转次数\n);\n-- Property and banks.Product id can be joined with Property items.Phrase id -- 理财产品与银行.产品id 与 理财产品.词条id\n-- Property and banks.Bankid can be joined with Bank.Phrase id -- 理财产品与银行.银行id 与 银行.词条id\n-- Bank transfer charges.Original bankid can be joined with Bank.Phrase id -- 银行转账手续费.原银行id 与 银行.词条id\n-- Bank transfer charges.Transfer bankid can be joined with Bank.Phrase id -- 银行转账手续费.转账银行id 与 银行.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "公司类型": "Type_of_company", "年营业额": "Annual_turnover", "原银行id": "Original_bankid", "转账银行id": "Transfer_bankid", "同省手续费": "Co-promotion_fees", "跨省手续费": "Cross-provincial_fees", "单笔最高转账金额": "Maximum_single_transfer", "所属公司": "Company_to_which_it_belongs", "年化收益率": "Annualized_rate_of_return", "存储时间": "Storage_Time", "产品id": "Product_id", "银行id": "Bankid", "单笔最高限额": "Single_ceiling", "每日限转次数": "Number_of_transfers_per_day"}, "table_en": {"银行": "Bank", "银行转账手续费": "Bank_transfer_charges", "理财产品": "Property_items", "理财产品与银行": "Property_and_banks"}}, "公司联合实验室": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n  Type of company VARCHAR(50), -- 公司类型\n);\nCREATE TABLE School (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of school INTEGER, -- 学校名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  It's in the city DATETIME, -- 所在城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Country of nationality VARCHAR(50), -- 所属国家\n);\nCREATE TABLE Joint Laboratory (\n  Name of laboratory VARCHAR(50) PRIMARY KEY, -- 实验室名称\n  School to which Id VARCHAR(50), -- 所属学校id\n  Companyid INTEGER, -- 公司id\n  Joint direction INTEGER, -- 联合方向\n   Other Organiser VARCHAR(50), -- 开始时间\n  Years of cooperation DATETIME, -- 合作年数\n  Number of papers produced INTEGER, -- 论文产出数量\n);\nCREATE TABLE Overseas Research Centre (\n  Research Centre INTEGER PRIMARY KEY, -- 研究中心\n  It's in the city VARCHAR(50), -- 所在城市\n  Country VARCHAR(50), -- 所在国家\n  Companyid VARCHAR(50), -- 公司id\n  Year of establishment INTEGER, -- 成立年份\n  Number of employees DATETIME, -- 员工数量\n);\n-- Overseas Research Centre.Companyid can be joined with Company.Phrase id -- 海外研究中心.公司id 与 公司.词条id\n-- Joint Laboratory.Companyid can be joined with Company.Phrase id -- 联合实验室.公司id 与 公司.词条id\n-- Joint Laboratory.School to which Id can be joined with School.Phrase id -- 联合实验室.所属学校id 与 学校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "公司类型": "Type_of_company", "学校名称": "Name_of_school", "成立时间": "_Other_Organiser", "所在城市": "It's_in_the_city", "所属省份": "Provinces_to_which_they_belong", "所属国家": "Country_of_nationality", "实验室名称": "Name_of_laboratory", "所属学校id": "School_to_which_Id", "公司id": "Companyid", "联合方向": "Joint_direction", "开始时间": "_Other_Organiser", "合作年数": "Years_of_cooperation", "论文产出数量": "Number_of_papers_produced", "研究中心": "Research_Centre", "所在国家": "Country", "成立年份": "Year_of_establishment", "员工数量": "Number_of_employees"}, "table_en": {"公司": "Company", "学校": "School", "联合实验室": "Joint_Laboratory", "海外研究中心": "Overseas_Research_Centre"}}, "台风": {"sqlite": "CREATE TABLE Typhoon (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Landing site VARCHAR(50), -- 登陆地点\n  Landing time VARCHAR(50), -- 登陆时间\n  Landing intensity DATETIME, -- 登陆强度\n  Days of duration INTEGER, -- 持续天数\n  Number of areas affected INTEGER, -- 影响地区数\n  Number of deaths INTEGER, -- 死亡人数\n  Economic loss INTEGER, -- 经济损失\n);\nCREATE TABLE China provinces affected by typhoons (\n  Typhoon id INTEGER PRIMARY KEY, -- 台风id\n  Province INTEGER, -- 省份\n  Landing intensity VARCHAR(50), -- 登陆强度\n  Number of deaths INTEGER, -- 死亡人数\n  Number of missing persons INTEGER, -- 失踪人数\n);\nCREATE TABLE Typhoon-affected countries (\n  Typhoon id INTEGER PRIMARY KEY, -- 台风id\n  National INTEGER, -- 国家\n  Economic loss VARCHAR(50), -- 经济损失\n);\n-- Typhoon-affected countries.Typhoon id can be joined with Typhoon.Phrase id -- 台风影响的国家.台风id 与 台风.词条id\n-- China provinces affected by typhoons.Typhoon id can be joined with Typhoon.Phrase id -- 台风影响的中国省份.台风id 与 台风.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "登陆地点": "Landing_site", "登陆时间": "Landing_time", "登陆强度": "Landing_intensity", "持续天数": "Days_of_duration", "影响地区数": "Number_of_areas_affected", "死亡人数": "Number_of_deaths", "经济损失": "Economic_loss", "台风id": "Typhoon_id", "省份": "Province", "失踪人数": "Number_of_missing_persons", "国家": "National"}, "table_en": {"台风": "Typhoon", "台风影响的中国省份": "China_provinces_affected_by_typhoons", "台风影响的国家": "Typhoon-affected_countries"}}, "各城市购房报告": {"sqlite": "CREATE TABLE Housing age impact (\n  Urban VARCHAR(50) PRIMARY KEY, -- 城市\n  Housing age VARCHAR(50), -- 房龄\n  Proportion of transactions VARCHAR(50), -- 交易占比\n);\nCREATE TABLE Elevator impact (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Do you have an elevator? VARCHAR(50), -- 是否带电梯\n  Average date of conclusion BINARY, -- 平均成交周期\n  Average number of visits INTEGER, -- 平均带看次数\n);\nCREATE TABLE Months for distribution (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Months VARCHAR(50), -- 月供段\n  Percentage VARCHAR(50), -- 占比\n);\nCREATE TABLE Age distribution of home buyers (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Age of home-buyer VARCHAR(50), -- 购房者年龄段\n  Percentage VARCHAR(50), -- 占比\n);\nCREATE TABLE Gender distribution of home buyers (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Sex of home-buyer VARCHAR(50), -- 购房者性别\n  Percentage VARCHAR(50), -- 占比\n);\n", "columns_en": {"城市": "Urban", "房龄": "Housing_age", "交易占比": "Proportion_of_transactions", "是否带电梯": "Do_you_have_an_elevator?", "平均成交周期": "Average_date_of_conclusion", "平均带看次数": "Average_number_of_visits", "月供段": "Months", "占比": "Percentage", "购房者年龄段": "Age_of_home-buyer", "购房者性别": "Sex_of_home-buyer"}, "table_en": {"房龄影响": "Housing_age_impact", "电梯影响": "Elevator_impact", "月供分布": "Months_for_distribution", "购房者年龄分布": "Age_distribution_of_home_buyers", "购房者性别分布": "Gender_distribution_of_home_buyers"}}, "中国宜居城市": {"sqlite": "CREATE TABLE Inhabitable in 2018 (\n  Urban VARCHAR(50) PRIMARY KEY, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Scores VARCHAR(50), -- 分数\n  Air index INTEGER, -- 空气指数\n  Number of blue skies INTEGER, -- 蓝天数量\n);\nCREATE TABLE I'll live in a city in 2017 (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Scores VARCHAR(50), -- 分数\n  Air index INTEGER, -- 空气指数\n  Number of blue skies INTEGER, -- 蓝天数量\n);\nCREATE TABLE City ready to live in 2016 (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Scores VARCHAR(50), -- 分数\n  Air index INTEGER, -- 空气指数\n  Number of blue skies INTEGER, -- 蓝天数量\n);\n", "columns_en": {"城市": "Urban", "所属省份": "Provinces_to_which_they_belong", "分数": "Scores", "空气指数": "Air_index", "蓝天数量": "Number_of_blue_skies"}, "table_en": {"2018年宜居城市": "Inhabitable_in_2018", "2017年宜居城市": "I'll_live_in_a_city_in_2017", "2016年宜居城市": "City_ready_to_live_in_2016"}}, "软件赞助节目": {"sqlite": "CREATE TABLE Brand (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  Industry VARCHAR(50), -- 行业\n);\nCREATE TABLE Phenomenal programmes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Year of broadcast VARCHAR(50), -- 播出年份\n  Television broadcast DATETIME, -- 播出电视台\n  Rate of viewing VARCHAR(50), -- 收视率\n  Market share INTEGER, -- 市场份额\n  Audience scores INTEGER, -- 观众评分\n);\nCREATE TABLE Sponsor of the philanthropy programme (\n  Brandid INTEGER PRIMARY KEY, -- 品牌id\n  Leisure programme id INTEGER, -- 综艺节目id\n  Sponsorship INTEGER, -- 赞助方式\n  The length of advertising VARCHAR(50), -- 广告时长\n  Number of advertisements INTEGER, -- 广告次数\n);\n-- Sponsor of the philanthropy programme.Leisure programme id can be joined with Phenomenal programmes.Phrase id -- 综艺节目赞助商.综艺节目id 与 综艺节目.词条id\n-- Sponsor of the philanthropy programme.Brandid can be joined with Brand.Phrase id -- 综艺节目赞助商.品牌id 与 品牌.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属公司": "Company_to_which_it_belongs", "行业": "Industry", "播出年份": "Year_of_broadcast", "播出电视台": "Television_broadcast", "收视率": "Rate_of_viewing", "市场份额": "Market_share", "观众评分": "Audience_scores", "品牌id": "Brandid", "综艺节目id": "Leisure_programme_id", "赞助方式": "Sponsorship", "广告时长": "The_length_of_advertising", "广告次数": "Number_of_advertisements"}, "table_en": {"品牌": "Brand", "综艺节目": "Phenomenal_programmes", "综艺节目赞助商": "Sponsor_of_the_philanthropy_programme"}}, "世界高山": {"sqlite": "CREATE TABLE Peaks (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's part of the mountain VARCHAR(50), -- 所属山系\n  Altitude VARCHAR(50), -- 海拔\n  It's the first time INTEGER, -- 首次登顶时间\n  Rank DATETIME, -- 排名\n);\nCREATE TABLE National (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The continent to which they belong VARCHAR(50), -- 所属洲\n);\nCREATE TABLE Mountain countries (\n  Mountain id VARCHAR(50) PRIMARY KEY, -- 山峰id\n  Start-up countryid INTEGER, -- 起点国家id\n  End-of-life countryd INTEGER, -- 终点国家id\n  Towards INTEGER, -- 走向\n);\nCREATE TABLE Places (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Mountain id VARCHAR(50), -- 山峰id\n  Price of tickets INTEGER, -- 门票价格\n  Play season INTEGER, -- 游玩季节\n);\n-- Mountain countries.Start-up countryid can be joined with National.Phrase id -- 山峰的国家.起点国家id 与 国家.词条id\n-- Places.Mountain id can be joined with Peaks.Phrase id -- 景点.山峰id 与 山峰.词条id\n-- Mountain countries.Mountain id can be joined with Peaks.Phrase id -- 山峰的国家.山峰id 与 山峰.词条id\n-- Mountain countries.End-of-life countryd can be joined with National.Phrase id -- 山峰的国家.终点国家id 与 国家.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属山系": "It's_part_of_the_mountain", "海拔": "Altitude", "首次登顶时间": "It's_the_first_time", "排名": "Rank", "所属洲": "The_continent_to_which_they_belong", "山峰id": "Mountain_id", "起点国家id": "Start-up_countryid", "终点国家id": "End-of-life_countryd", "走向": "Towards", "门票价格": "Price_of_tickets", "游玩季节": "Play_season"}, "table_en": {"山峰": "Peaks", "国家": "National", "山峰的国家": "Mountain_countries", "景点": "Places"}}, "央视晚会": {"sqlite": "CREATE TABLE The Spring Festival (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of sessions VARCHAR(50), -- 届数\n  Play Channel INTEGER, -- 播放频道\n  Online playing platform VARCHAR(50), -- 在线播放平台\n  Moderator VARCHAR(50), -- 主持人\n  Number of facilitators VARCHAR(50), -- 主持人数量\n  Rate of viewing INTEGER, -- 收视率\n  Number of music and dance programmes INTEGER, -- 歌舞节目数量\n  Number of language programmes INTEGER, -- 语言节目数量\n  Number of magic shows INTEGER, -- 魔术节目数量\n);\nCREATE TABLE Moderator (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Graduate schools VARCHAR(50), -- 毕业院校\n  Representing the work VARCHAR(50), -- 代表作品\n);\nCREATE TABLE Mid-Autumn party (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Airtime VARCHAR(50), -- 播出时间\n  Address of the main venue DATETIME, -- 主会场地址\n  Number of overflows VARCHAR(50), -- 分会场数量\n);\nCREATE TABLE The host and Spring Night (\n  Moderator id INTEGER PRIMARY KEY, -- 主持人id\n  Spring Night id INTEGER, -- 春晚id\n);\nCREATE TABLE Moderators and Mid-Autumn parties (\n  Moderator id INTEGER PRIMARY KEY, -- 主持人id\n  Mid-Autumn partyid INTEGER, -- 中秋晚会id\n);\nCREATE TABLE Host city (\n  Name of city INTEGER PRIMARY KEY, -- 城市名称\n  Mid-Autumn partyid VARCHAR(50), -- 中秋晚会id\n  Is it the main venue? INTEGER, -- 是否主会场\n);\nCREATE TABLE Spring evening guests (\n  Name of guest BINARY PRIMARY KEY, -- 嘉宾姓名\n  Spring Night id VARCHAR(50), -- 春晚id\n  Performing shows INTEGER, -- 表演节目\n  Program Type VARCHAR(50), -- 节目类型\n  Awarded or not VARCHAR(50), -- 是否获奖\n);\n-- Moderators and Mid-Autumn parties.Moderator id can be joined with Moderator.Phrase id -- 主持人与中秋晚会.主持人id 与 主持人.词条id\n-- Moderators and Mid-Autumn parties.Mid-Autumn partyid can be joined with Mid-Autumn party.Phrase id -- 主持人与中秋晚会.中秋晚会id 与 中秋晚会.词条id\n-- The host and Spring Night.Spring Night id can be joined with The Spring Festival.Phrase id -- 主持人与春晚.春晚id 与 央视春节晚会.词条id\n-- The host and Spring Night.Moderator id can be joined with Moderator.Phrase id -- 主持人与春晚.主持人id 与 主持人.词条id\n-- Spring evening guests.Spring Night id can be joined with The Spring Festival.Phrase id -- 春晚嘉宾.春晚id 与 央视春节晚会.词条id\n-- Host city.Mid-Autumn partyid can be joined with Mid-Autumn party.Phrase id -- 举办城市.中秋晚会id 与 中秋晚会.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "届数": "Number_of_sessions", "播放频道": "Play_Channel", "在线播放平台": "Online_playing_platform", "主持人": "Moderator", "主持人数量": "Number_of_facilitators", "收视率": "Rate_of_viewing", "歌舞节目数量": "Number_of_music_and_dance_programmes", "语言节目数量": "Number_of_language_programmes", "魔术节目数量": "Number_of_magic_shows", "姓名": "Name", "毕业院校": "Graduate_schools", "代表作品": "Representing_the_work", "播出时间": "Airtime", "主会场地址": "Address_of_the_main_venue", "分会场数量": "Number_of_overflows", "主持人id": "Moderator_id", "春晚id": "Spring_Night_id", "中秋晚会id": "Mid-Autumn_partyid", "城市名称": "Name_of_city", "是否主会场": "Is_it_the_main_venue?", "嘉宾姓名": "Name_of_guest", "表演节目": "Performing_shows", "节目类型": "Program_Type", "是否获奖": "Awarded_or_not"}, "table_en": {"央视春节晚会": "The_Spring_Festival", "主持人": "Moderator", "中秋晚会": "Mid-Autumn_party", "主持人与春晚": "The_host_and_Spring_Night", "主持人与中秋晚会": "Moderators_and_Mid-Autumn_parties", "举办城市": "Host_city", "春晚嘉宾": "Spring_evening_guests"}}, "收视率": {"sqlite": "CREATE TABLE Channel view (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Channel Name INTEGER, -- 频道名称\n  Live Concern VARCHAR(50), -- 直播关注度\n  Market share INTEGER, -- 市场份额\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE The show's on (\n  Program Name INTEGER PRIMARY KEY, -- 节目名称\n  Channel id VARCHAR(50), -- 频道id\n  Airtime INTEGER, -- 播出时间\n  Live Concern DATETIME, -- 直播关注度\n  Market share INTEGER, -- 市场份额\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE I'm putting on a show (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Program Name INTEGER, -- 节目名称\n  Channel id VARCHAR(50), -- 播出频道id\n  Total duration INTEGER, -- 总时长\n  Frequency INTEGER, -- 频次\n   Other Organiser INTEGER, -- 点播关注度\n);\n-- I'm putting on a show.Channel id can be joined with Channel view.Phrase id -- 综艺节目植入榜.播出频道id 与 频道收视.词条id\n-- The show's on.Channel id can be joined with Channel view.Phrase id -- 节目收视.频道id 与 频道收视.词条id", "columns_en": {"词条id": "Phrase_id", "频道名称": "Channel_Name", "直播关注度": "Live_Concern", "市场份额": "Market_share", "排名": "Rank", "节目名称": "Program_Name", "频道id": "Channel_id", "播出时间": "Airtime", "播出频道id": "Channel_id", "总时长": "Total_duration", "频次": "Frequency", "点播关注度": "_Other_Organiser"}, "table_en": {"频道收视": "Channel_view", "节目收视": "The_show's_on", "综艺节目植入榜": "I'm_putting_on_a_show"}}, "论文": {"sqlite": "CREATE TABLE Author (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Occupation VARCHAR(50), -- 职业\n  Organisation VARCHAR(50), -- 所在单位\n);\nCREATE TABLE Papers (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Authorid VARCHAR(50), -- 作者id\n  Name of meeting INTEGER, -- 会议名称\n  Year VARCHAR(50), -- 年份\n  Reference DATETIME, -- 引用量\n);\nCREATE TABLE References to papers (\n  Papersd INTEGER PRIMARY KEY, -- 论文id\n  Quoted papers id INTEGER, -- 引用论文id\n  Whether or not to compare papers INTEGER, -- 是否对比论文\n);\n-- References to papers.Papersd can be joined with Papers.Phrase id -- 论文引用.论文id 与 论文.词条id\n-- Papers.Authorid can be joined with Author.Phrase id -- 论文.作者id 与 作者.词条id\n-- References to papers.Quoted papers id can be joined with Papers.Phrase id -- 论文引用.引用论文id 与 论文.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "职业": "Occupation", "所在单位": "Organisation", "名称": "Name", "作者id": "Authorid", "会议名称": "Name_of_meeting", "年份": "Year", "引用量": "Reference", "论文id": "Papersd", "引用论文id": "Quoted_papers_id", "是否对比论文": "Whether_or_not_to_compare_papers"}, "table_en": {"作者": "Author", "论文": "Papers", "论文引用": "References_to_papers"}}, "银行": {"sqlite": "CREATE TABLE Bank headquarters (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  Type of company DATETIME, -- 公司类型\n);\nCREATE TABLE Annual turnover (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Bankid DATETIME, -- 银行id\n  turnover INTEGER, -- 营业额\n  Number of employees INTEGER, -- 员工数\n  Five hundred in the world INTEGER, -- 世界五百强排名\n);\nCREATE TABLE Urban (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Organisation VARCHAR(50), -- 所属区域\n);\nCREATE TABLE Banking services node (\n  Bankid VARCHAR(50) PRIMARY KEY, -- 银行id\n  Urban id INTEGER, -- 城市id\n  Number of completed INTEGER, -- 建成数量\n  Number planned INTEGER, -- 规划数量\n);\n-- Banking services node.Urban id can be joined with Urban.Phrase id -- 银行服务网点.城市id 与 城市.词条id\n-- Banking services node.Bankid can be joined with Bank headquarters.Phrase id -- 银行服务网点.银行id 与 银行总部.词条id\n-- Annual turnover.Bankid can be joined with Bank headquarters.Phrase id -- 年营业额.银行id 与 银行总部.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "公司类型": "Type_of_company", "年份": "Year", "银行id": "Bankid", "营业额": "turnover", "员工数": "Number_of_employees", "世界五百强排名": "Five_hundred_in_the_world", "所属省份": "Provinces_to_which_they_belong", "所属区域": "Organisation", "城市id": "Urban_id", "建成数量": "Number_of_completed", "规划数量": "Number_planned"}, "table_en": {"银行总部": "Bank_headquarters", "年营业额": "Annual_turnover", "城市": "Urban", "银行服务网点": "Banking_services_node"}}, "历史类书籍": {"sqlite": "CREATE TABLE National history (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Telling about the country VARCHAR(50), -- 讲述国家\n  It's about the times VARCHAR(50), -- 讲述时代\n);\nCREATE TABLE The history of the Chinese dynasty (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Talk about the dynasty VARCHAR(50), -- 讲述朝代\n);\nCREATE TABLE History of war (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  Describe the war VARCHAR(50), -- 描述战事\n);\nCREATE TABLE The history of people (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Title INTEGER, -- 书名\n  He's talking about celebrities VARCHAR(50), -- 讲述名人\n);\n", "columns_en": {"词条id": "Phrase_id", "书名": "Title", "讲述国家": "Telling_about_the_country", "讲述时代": "It's_about_the_times", "讲述朝代": "Talk_about_the_dynasty", "描述战事": "Describe_the_war", "讲述名人": "He's_talking_about_celebrities"}, "table_en": {"国家历史": "National_history", "中国朝代历史": "The_history_of_the_Chinese_dynasty", "战争历史": "History_of_war", "人物历史": "The_history_of_people"}}, "欧洲杯球队": {"sqlite": "CREATE TABLE Team (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Team Name INTEGER, -- 中文队名\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n   Other Organiser VARCHAR(50), -- 成立时间\n  Main premises DATETIME, -- 主场馆\n  Number of persons accommodated VARCHAR(50), -- 容纳人数\n  (Signed) Jeremy Greenstock Chairman Security Council Committee established pursuant to resolution 1373 (2001) concerning counter-terrorism INTEGER, -- 主席\n  Sports manager VARCHAR(50), -- 体育经理\n  Founder VARCHAR(50), -- 创始人\n  The current captain VARCHAR(50), -- 现任队长\n  Lieutenant VARCHAR(50), -- 副队长\n);\nCREATE TABLE It's the Eunuchs game (\n  Synchronising folder VARCHAR(50) PRIMARY KEY, -- 名次\n  Team id INTEGER, -- 球队id\n  Number of sessions INTEGER, -- 届数\n  Fields INTEGER, -- 场次\n  Winners INTEGER, -- 胜次数\n  Number of flats INTEGER, -- 平次数\n  Negative number INTEGER, -- 负次数\n  Lose the ball INTEGER, -- 失球\n  It's a clean win INTEGER, -- 净胜球\n  Average Field Scores INTEGER, -- 场均积分\n  It's a field goal INTEGER, -- 场均进球\n  Best grades INTEGER, -- 最好成绩\n);\nCREATE TABLE Ace Crawford (\n  Number of sessions VARCHAR(50) PRIMARY KEY, -- 届数\n  Cup race INTEGER, -- 杯赛\n  ♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ VARCHAR(50), -- 冠军球队id\n  Yakuza id INTEGER, -- 亚军球队id\n  Master coach of the championship INTEGER, -- 冠军主教练\n  The final score VARCHAR(50), -- 决赛比分\n  The finals VARCHAR(50), -- 决赛场地\n);\n-- Ace Crawford.♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ can be joined with Team.Phrase id -- 欧冠冠亚军.冠军球队id 与 球队.词条id\n-- It's the Eunuchs game.Team id can be joined with Team.Phrase id -- 球队欧冠赛事.球队id 与 球队.词条id\n-- Ace Crawford.Yakuza id can be joined with Team.Phrase id -- 欧冠冠亚军.亚军球队id 与 球队.词条id", "columns_en": {"词条id": "Phrase_id", "中文队名": "Chinese_Team_Name", "所属地区": "Territory_to_which_it_belongs", "成立时间": "_Other_Organiser", "主场馆": "Main_premises", "容纳人数": "Number_of_persons_accommodated", "主席": "(Signed)_Jeremy_Greenstock_Chairman_Security_Council_Committee_established_pursuant_to_resolution_1373_(2001)_concerning_counter-terrorism", "体育经理": "Sports_manager", "创始人": "Founder", "现任队长": "The_current_captain", "副队长": "Lieutenant", "名次": "Synchronising_folder", "球队id": "Team_id", "届数": "Number_of_sessions", "场次": "Fields", "胜次数": "Winners", "平次数": "Number_of_flats", "负次数": "Negative_number", "失球": "Lose_the_ball", "净胜球": "It's_a_clean_win", "场均积分": "Average_Field_Scores", "场均进球": "It's_a_field_goal", "最好成绩": "Best_grades", "杯赛": "Cup_race", "冠军球队id": "♪_The_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪", "亚军球队id": "Yakuza_id", "冠军主教练": "Master_coach_of_the_championship", "决赛比分": "The_final_score", "决赛场地": "The_finals"}, "table_en": {"球队": "Team", "球队欧冠赛事": "It's_the_Eunuchs_game", "欧冠冠亚军": "Ace_Crawford"}}, "中国历史名城": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Resident population VARCHAR(50), -- 常住人口\n  Urban area INTEGER, -- 城区面积\n  Number of founding years INTEGER, -- 建城年数\n);\nCREATE TABLE The capital (\n  Dynasty! INTEGER PRIMARY KEY, -- 朝代\n  Ancient VARCHAR(50), -- 古称\n  Urban id VARCHAR(50), -- 城市id\n  Construction start time INTEGER, -- 建都起始时间\n  It's the end of the building DATETIME, -- 建都结束时间\n  Number of years built DATETIME, -- 建都年数\n);\n-- The capital.Urban id can be joined with Urban.Phrase id -- 都城.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "常住人口": "Resident_population", "城区面积": "Urban_area", "建城年数": "Number_of_founding_years", "朝代": "Dynasty!", "古称": "Ancient", "城市id": "Urban_id", "建都起始时间": "Construction_start_time", "建都结束时间": "It's_the_end_of_the_building", "建都年数": "Number_of_years_built"}, "table_en": {"城市": "Urban", "都城": "The_capital"}}, "外文书籍": {"sqlite": "CREATE TABLE Foreign instruments (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  English Name VARCHAR(50), -- 英文名\n  Original author VARCHAR(50), -- 原著作者\n  Words VARCHAR(50), -- 字数\n);\nCREATE TABLE Translator (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationality VARCHAR(50), -- 国籍\n  Number of translated works VARCHAR(50), -- 翻译作品数量\n);\nCREATE TABLE Publications (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Location of establishment DATETIME, -- 成立地点\n);\nCREATE TABLE Book publishing information (\n  Book id VARCHAR(50) PRIMARY KEY, -- 书籍id\n  Translator id INTEGER, -- 译者id\n  Publisher id INTEGER, -- 出版社id\n  Number of publications INTEGER, -- 出版册数\n  Publication time INTEGER, -- 出版时间\n);\n-- Book publishing information.Book id can be joined with Foreign instruments.Phrase id -- 书籍出版信息.书籍id 与 外文书籍.词条id\n-- Book publishing information.Publisher id can be joined with Publications.Phrase id -- 书籍出版信息.出版社id 与 出版社.词条id\n-- Book publishing information.Translator id can be joined with Translator.Phrase id -- 书籍出版信息.译者id 与 译者.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "英文名": "English_Name", "原著作者": "Original_author", "字数": "Words", "姓名": "Name", "国籍": "Nationality", "翻译作品数量": "Number_of_translated_works", "成立时间": "_Other_Organiser", "成立地点": "Location_of_establishment", "书籍id": "Book_id", "译者id": "Translator_id", "出版社id": "Publisher_id", "出版册数": "Number_of_publications", "出版时间": "Publication_time"}, "table_en": {"外文书籍": "Foreign_instruments", "译者": "Translator", "出版社": "Publications", "书籍出版信息": "Book_publishing_information"}}, "中国城市称号": {"sqlite": "CREATE TABLE National Health City (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Number of counties in lower jurisdiction VARCHAR(50), -- 下辖区县数量\n  Number of Selections INTEGER, -- 入选次数\n);\nCREATE TABLE National tourist cities (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Climate conditions VARCHAR(50), -- 气候条件\n  Number of sites VARCHAR(50), -- 景点数量\n  No  of 5A attractions INTEGER, -- 5A级景点数量\n);\nCREATE TABLE National forest cities (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Forest cover VARCHAR(50), -- 森林覆盖率\n  Number of forest parks INTEGER, -- 森林公园数量\n);\nCREATE TABLE Central city of the country (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Rank VARCHAR(50), -- 排名\n  GDP INTEGER, -- GDP\n  The same rate of growth in GDP as in the previous year INTEGER, -- GDP同比增速\n);\nCREATE TABLE First-line city of the world (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  World ranking VARCHAR(50), -- 世界排名\n  Household population INTEGER, -- 户籍人口\n  Resident migrants INTEGER, -- 常住流动人口\n);\n", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "下辖区县数量": "Number_of_counties_in_lower_jurisdiction", "入选次数": "Number_of_Selections", "气候条件": "Climate_conditions", "景点数量": "Number_of_sites", "5A级景点数量": "No__of_5A_attractions", "森林覆盖率": "Forest_cover", "森林公园数量": "Number_of_forest_parks", "排名": "Rank", "GDP": "GDP", "GDP同比增速": "The_same_rate_of_growth_in_GDP_as_in_the_previous_year", "世界排名": "World_ranking", "户籍人口": "Household_population", "常住流动人口": "Resident_migrants"}, "table_en": {"国家卫生城市": "National_Health_City", "国家旅游城市": "National_tourist_cities", "国家森林城市": "National_forest_cities", "国家中心城市": "Central_city_of_the_country", "世界一线城市": "First-line_city_of_the_world"}}, "外卖预定": {"sqlite": "CREATE TABLE Business (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Start-up price VARCHAR(50), -- 起送价格\n  Time of service INTEGER, -- 送达用时\n  Rating INTEGER, -- 评分\n  Monthly sales odds INTEGER, -- 月售单数\n);\nCREATE TABLE Platform (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of registered vendors VARCHAR(50), -- 入驻商家数量\n  Market share INTEGER, -- 市场占比\n);\nCREATE TABLE Business platform activities (\n  Business id INTEGER PRIMARY KEY, -- 商家id\n  Platformid INTEGER, -- 平台id\n  Preferential activities VARCHAR(50), -- 优惠活动\n  Distribution costs VARCHAR(50), -- 配送费\n);\n-- Business platform activities.Business id can be joined with Business.Phrase id -- 商家平台活动.商家id 与 商家.词条id\n-- Business platform activities.Platformid can be joined with Platform.Phrase id -- 商家平台活动.平台id 与 平台.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "起送价格": "Start-up_price", "送达用时": "Time_of_service", "评分": "Rating", "月售单数": "Monthly_sales_odds", "入驻商家数量": "Number_of_registered_vendors", "市场占比": "Market_share", "商家id": "Business_id", "平台id": "Platformid", "优惠活动": "Preferential_activities", "配送费": "Distribution_costs"}, "table_en": {"商家": "Business", "平台": "Platform", "商家平台活动": "Business_platform_activities"}}, "大洲与国家": {"sqlite": "CREATE TABLE Continent (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area VARCHAR(50), -- 面积\n  Population INTEGER, -- 人口\n  Population density INTEGER, -- 人口密度\n  Number of countries INTEGER, -- 国家数量\n  Number of nationalities INTEGER, -- 民族数量\n);\nCREATE TABLE National (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Capital VARCHAR(50), -- 首都\n  Land area VARCHAR(50), -- 国土面积\n  Number of population INTEGER, -- 人口数量\n  Population density INTEGER, -- 人口密度\n  Water rate INTEGER, -- 水域率\n  Total GDP INTEGER, -- GDP总计\n  GDP per capita INTEGER, -- 人均GDP\n  Road access INTEGER, -- 道路通行\n  Human Development Index VARCHAR(50), -- 人类发展指数\n   Other Organiser INTEGER, -- 所属洲id\n);\nCREATE TABLE The largest city (\n  Name of city INTEGER PRIMARY KEY, -- 城市名称\n  Country id VARCHAR(50), -- 国家id\n  Continentid INTEGER, -- 大洲id\n);\nCREATE TABLE Imports and exports in 2019 (\n  Month INTEGER PRIMARY KEY, -- 月份\n  Continentid INTEGER, -- 大洲id\n  Imports and exports VARCHAR(50), -- 进出口\n  Imports INTEGER, -- 进口\n  Exports INTEGER, -- 出口\n  Share of imports and exports over the same period INTEGER, -- 进出口同期比\n  Percentage of imports over the same period INTEGER, -- 进口同期比\n  Share of exports over the same period INTEGER, -- 出口同期比\n);\nCREATE TABLE Continental Demarcation Lines (\n  Name of Demarcation Line INTEGER PRIMARY KEY, -- 分界线名称\n  Name of continent of origin VARCHAR(50), -- 源大洲名称\n  Name of target continent INTEGER, -- 目标大洲名称\n);\n-- National. Other Organiser can be joined with Continent.Phrase id -- 国家.所属洲id 与 大洲.词条id\n-- Imports and exports in 2019.Continentid can be joined with Continent.Phrase id -- 2019年进出口.大洲id 与 大洲.词条id\n-- The largest city.Continentid can be joined with Continent.Phrase id -- 最大都市.大洲id 与 大洲.词条id\n-- The largest city.Country id can be joined with National.Phrase id -- 最大都市.国家id 与 国家.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "面积": "Area", "人口": "Population", "人口密度": "Population_density", "国家数量": "Number_of_countries", "民族数量": "Number_of_nationalities", "首都": "Capital", "国土面积": "Land_area", "人口数量": "Number_of_population", "水域率": "Water_rate", "GDP总计": "Total_GDP", "人均GDP": "GDP_per_capita", "道路通行": "Road_access", "人类发展指数": "Human_Development_Index", "所属洲id": "_Other_Organiser", "城市名称": "Name_of_city", "国家id": "Country_id", "大洲id": "Continentid", "月份": "Month", "进出口": "Imports_and_exports", "进口": "Imports", "出口": "Exports", "进出口同期比": "Share_of_imports_and_exports_over_the_same_period", "进口同期比": "Percentage_of_imports_over_the_same_period", "出口同期比": "Share_of_exports_over_the_same_period", "分界线名称": "Name_of_Demarcation_Line", "源大洲名称": "Name_of_continent_of_origin", "目标大洲名称": "Name_of_target_continent"}, "table_en": {"大洲": "Continent", "国家": "National", "最大都市": "The_largest_city", "2019年进出口": "Imports_and_exports_in_2019", "大洲分界线": "Continental_Demarcation_Lines"}}, "饭店预订": {"sqlite": "CREATE TABLE Hotel (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n  It's a vegetable department VARCHAR(50), -- 菜系\n  Taste Rating VARCHAR(50), -- 口味评分\n  Environmental scoring INTEGER, -- 环境评分\n  Service rating INTEGER, -- 服务评分\n  Price per capita INTEGER, -- 人均价格\n  Minimum room consumption INTEGER, -- 包房最低消费\n);\nCREATE TABLE Specials (\n  Hotel id INTEGER PRIMARY KEY, -- 饭店id\n  Name of dish INTEGER, -- 菜名\n  Taste VARCHAR(50), -- 口味\n  Monthly sales VARCHAR(50), -- 月销售量\n  Scale of Points INTEGER, -- 必点比例\n);\n-- Specials.Hotel id can be joined with Hotel.Phrase id -- 特色菜.饭店id 与 饭店.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "地址": "Address", "菜系": "It's_a_vegetable_department", "口味评分": "Taste_Rating", "环境评分": "Environmental_scoring", "服务评分": "Service_rating", "人均价格": "Price_per_capita", "包房最低消费": "Minimum_room_consumption", "饭店id": "Hotel_id", "菜名": "Name_of_dish", "口味": "Taste", "月销售量": "Monthly_sales", "必点比例": "Scale_of_Points"}, "table_en": {"饭店": "Hotel", "特色菜": "Specials"}}, "各城市院士情况": {"sqlite": "CREATE TABLE Province (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of province VARCHAR(50), -- 省份名称\n  Number of higher education institutions 985 INTEGER, -- 985高校数量\n  Number of 211 higher education institutions INTEGER, -- 211高校数量\n  Enrolment rate in undergraduate studies  2018 INTEGER, -- 2018年本科录取率\n  Enrollment rate in 2019 INTEGER, -- 2019年本科录取率\n);\nCREATE TABLE Provincial cadets (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Country of origin id DATETIME, -- 籍贯id\n  Number of scientific students INTEGER, -- 科学院院士数量\n  Number of engineers INTEGER, -- 工程院院士数量\n);\nCREATE TABLE Colleges of higher education (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name of school INTEGER, -- 学校名称\n  Number of baccalaureate alumni VARCHAR(50), -- 院士校友人数\n  School ranking INTEGER, -- 学校排名\n  Asterisk INTEGER, -- 星级\n  Level of schooling INTEGER, -- 办学层次\n);\nCREATE TABLE Baccalaureate School 2019 (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of the cadets INTEGER, -- 院士姓名\n  Age VARCHAR(50), -- 年龄\n  Professional INTEGER, -- 专业\n  Type of cadets VARCHAR(50), -- 院士类型\n   Other Organiser VARCHAR(50), -- 工作单位id\n);\n-- Provincial cadets.Country of origin id can be joined with Province.Phrase id -- 各省院士.籍贯id 与 省份.词条id\n-- Baccalaureate School 2019. Other Organiser can be joined with Colleges of higher education.Phrase id -- 2019年院士任职学校.工作单位id 与 高校.词条id", "columns_en": {"词条id": "Phrase_id", "省份名称": "Name_of_province", "985高校数量": "Number_of_higher_education_institutions_985", "211高校数量": "Number_of_211_higher_education_institutions", "2018年本科录取率": "Enrolment_rate_in_undergraduate_studies__2018", "2019年本科录取率": "Enrollment_rate_in_2019", "年份": "Year", "籍贯id": "Country_of_origin_id", "科学院院士数量": "Number_of_scientific_students", "工程院院士数量": "Number_of_engineers", "学校名称": "Name_of_school", "院士校友人数": "Number_of_baccalaureate_alumni", "学校排名": "School_ranking", "星级": "Asterisk", "办学层次": "Level_of_schooling", "院士姓名": "Name_of_the_cadets", "年龄": "Age", "专业": "Professional", "院士类型": "Type_of_cadets", "工作单位id": "_Other_Organiser"}, "table_en": {"省份": "Province", "各省院士": "Provincial_cadets", "高校": "Colleges_of_higher_education", "2019年院士任职学校": "Baccalaureate_School_2019"}}, "IMAX电影院": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Urban area VARCHAR(50), -- 市区面积\n);\nCREATE TABLE IMAX Cinema (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name of cinema INTEGER, -- 影院名称\n  ♪ City id ♪ VARCHAR(50), -- 所在城市id\n  Opening hours INTEGER, -- 开业时间\n  Screen Wideness DATETIME, -- 屏幕宽\n  Screen height INTEGER, -- 屏幕高\n  Screen Area INTEGER, -- 屏幕面积\n  Number of seats INTEGER, -- 座位数\n);\nCREATE TABLE Number of cinemas showing films (\n  Year INTEGER PRIMARY KEY, -- 年份\n  ♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ DATETIME, -- 影院id\n  Number of films INTEGER, -- 电影数量\n  Collection INTEGER, -- 营收\n);\n-- Number of cinemas showing films.♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ can be joined with IMAX Cinema.Phrase id -- 影院放映电影数量.影院id 与 IMAX电影院.词条id\n-- IMAX Cinema.♪ City id ♪ can be joined with Urban.Phrase id -- IMAX电影院.所在城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "市区面积": "Urban_area", "影院名称": "Name_of_cinema", "所在城市id": "♪_City_id_♪", "开业时间": "Opening_hours", "屏幕宽": "Screen_Wideness", "屏幕高": "Screen_height", "屏幕面积": "Screen_Area", "座位数": "Number_of_seats", "年份": "Year", "影院id": "♪_The_cinema_♪_♪_♪_The_cinema_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪", "电影数量": "Number_of_films", "营收": "Collection"}, "table_en": {"城市": "Urban", "IMAX电影院": "IMAX_Cinema", "影院放映电影数量": "Number_of_cinemas_showing_films"}}, "世界篮球国家队": {"sqlite": "CREATE TABLE Basketball teams (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Team name INTEGER, -- 队名\n  Country of nationality VARCHAR(50), -- 所属国家\n   Other Organiser VARCHAR(50), -- 成立时间\n  Master Coach DATETIME, -- 主教练\n  Number of Olympic champions VARCHAR(50), -- 奥运会冠军数量\n  Number of World Cup champions INTEGER, -- 世锦赛冠军数量\n  World ranking INTEGER, -- 世界排名\n);\nCREATE TABLE The Olympic champion's record (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Name of Olympic Games DATETIME, -- 奥运会名称\n  ♪ The champion ♪ ♪ ♪ The champion ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ VARCHAR(50), -- 冠军队id\n  Army of Asia id INTEGER, -- 亚军队id\n  Quarterly military id INTEGER, -- 季军队id\n);\nCREATE TABLE The Chinese Olympics (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Name of Olympic Games DATETIME, -- 奥运会名称\n  Synchronising folder VARCHAR(50), -- 名次\n  Sir INTEGER, -- 主帅\n);\nCREATE TABLE The Chinese team's hand-to-hand record (\n  Enemy id VARCHAR(50) PRIMARY KEY, -- 对手队id\n  Number of wins INTEGER, -- 赢的次数\n  Number of losses INTEGER, -- 输的次数\n);\n-- The Olympic champion's record.♪ The champion ♪ ♪ ♪ The champion ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the champion ♪ ♪ ♪ ♪ ♪ can be joined with Basketball teams.Phrase id -- 奥运会冠亚军记录.冠军队id 与 篮球运动队.词条id\n-- The Olympic champion's record.Army of Asia id can be joined with Basketball teams.Phrase id -- 奥运会冠亚军记录.亚军队id 与 篮球运动队.词条id\n-- The Chinese team's hand-to-hand record.Enemy id can be joined with Basketball teams.Phrase id -- 中国队交手记录.对手队id 与 篮球运动队.词条id\n-- The Olympic champion's record.Quarterly military id can be joined with Basketball teams.Phrase id -- 奥运会冠亚军记录.季军队id 与 篮球运动队.词条id", "columns_en": {"词条id": "Phrase_id", "队名": "Team_name", "所属国家": "Country_of_nationality", "成立时间": "_Other_Organiser", "主教练": "Master_Coach", "奥运会冠军数量": "Number_of_Olympic_champions", "世锦赛冠军数量": "Number_of_World_Cup_champions", "世界排名": "World_ranking", "年份": "Year", "奥运会名称": "Name_of_Olympic_Games", "冠军队id": "♪_The_champion_♪_♪_♪_The_champion_♪_♪_♪_the_champion_♪_♪_♪_♪_♪_♪_♪_the_champion_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_♪_the_champion_♪_♪_♪_♪_♪", "亚军队id": "Army_of_Asia_id", "季军队id": "Quarterly_military_id", "名次": "Synchronising_folder", "主帅": "Sir", "对手队id": "Enemy_id", "赢的次数": "Number_of_wins", "输的次数": "Number_of_losses"}, "table_en": {"篮球运动队": "Basketball_teams", "奥运会冠亚军记录": "The_Olympic_champion's_record", "中国队奥运会成绩": "The_Chinese_Olympics", "中国队交手记录": "The_Chinese_team's_hand-to-hand_record"}}, "城市财政收入": {"sqlite": "CREATE TABLE Fiscal revenues of the provinces (\n  Province VARCHAR(50) PRIMARY KEY, -- 省份\n  Total GDP (billions) VARCHAR(50), -- GDP总计(亿)\n  The same rate of growth in GDP as in the previous year INTEGER, -- GDP同比增速\n  Intra-GDP ranking INTEGER, -- GDP省内排名\n  Increase in fixed asset investments from year to year INTEGER, -- 固定资产投资同比增速\n  Fiscal budget revenue (billions) INTEGER, -- 财政预算收入(亿)\n  Budget increase on a year-on-year basis INTEGER, -- 财政预算同比增速\n  Budgeted expenditure (billions) INTEGER, -- 预算支出额度(亿)\n  Budget deficit rate INTEGER, -- 预算赤字率\n  Income transparency INTEGER, -- 收入透明度\n);\nCREATE TABLE 300-city land supply (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Total land supply planning area (millions of square metres) DATETIME, -- 整体土地供给规划面积(亿平)\n  Total cumulative year-on-year INTEGER, -- 整体累计同比\n  First-line urban land supply planning area (millions of flats) INTEGER, -- 一线城市土地供给规划面积(万平)\n  Accumulated per cent of first-line cities INTEGER, -- 一线城市累计同比\n  Second-line urban land supply planning area (millions of square metres) INTEGER, -- 二线城市土地供给规划面积(亿平)\n  Accumulated per cent of second-line cities INTEGER, -- 二线城市累计同比\n  Three or four lines of urban land supply planning area (millions of square metres) INTEGER, -- 三四线城市土地供给规划面积(亿平)\n  Three or four-line cities cumulatively equal to each other INTEGER, -- 三四线城市累计同比\n);\nCREATE TABLE 300-city land deals (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Concluded building space DATETIME, -- 成交建筑面积\n  Accumulated year-on-year INTEGER, -- 成交累计同比\n  Land concessions INTEGER, -- 土地出让金\n  The first line of the city is in the building area INTEGER, -- 一线城市成交建筑面积\n  It's a one-to-one match on one line INTEGER, -- 一线成交累计同比\n  First-line city land concession INTEGER, -- 一线城市土地出让金\n  Two-line city is in the building area INTEGER, -- 二线城市成交建筑面积\n  It's a two-line deal  It's a one-to-one match INTEGER, -- 二线成交累计同比\n  Second-line city land concession INTEGER, -- 二线城市土地出让金\n  Three-four-line city is in the building area INTEGER, -- 三四线城市成交建筑面积\n  Three or four lines  one-on-one INTEGER, -- 三四线成交累计同比\n  Three or four lines of city land concession INTEGER, -- 三四线城市土地出让金\n);\n", "columns_en": {"省份": "Province", "GDP总计(亿)": "Total_GDP_(billions)", "GDP同比增速": "The_same_rate_of_growth_in_GDP_as_in_the_previous_year", "GDP省内排名": "Intra-GDP_ranking", "固定资产投资同比增速": "Increase_in_fixed_asset_investments_from_year_to_year", "财政预算收入(亿)": "Fiscal_budget_revenue_(billions)", "财政预算同比增速": "Budget_increase_on_a_year-on-year_basis", "预算支出额度(亿)": "Budgeted_expenditure_(billions)", "预算赤字率": "Budget_deficit_rate", "收入透明度": "Income_transparency", "年份": "Year", "整体土地供给规划面积(亿平)": "Total_land_supply_planning_area_(millions_of_square_metres)", "整体累计同比": "Total_cumulative_year-on-year", "一线城市土地供给规划面积(万平)": "First-line_urban_land_supply_planning_area_(millions_of_flats)", "一线城市累计同比": "Accumulated_per_cent_of_first-line_cities", "二线城市土地供给规划面积(亿平)": "Second-line_urban_land_supply_planning_area_(millions_of_square_metres)", "二线城市累计同比": "Accumulated_per_cent_of_second-line_cities", "三四线城市土地供给规划面积(亿平)": "Three_or_four_lines_of_urban_land_supply_planning_area_(millions_of_square_metres)", "三四线城市累计同比": "Three_or_four-line_cities_cumulatively_equal_to_each_other", "成交建筑面积": "Concluded_building_space", "成交累计同比": "Accumulated_year-on-year", "土地出让金": "Land_concessions", "一线城市成交建筑面积": "The_first_line_of_the_city_is_in_the_building_area", "一线成交累计同比": "It's_a_one-to-one_match_on_one_line", "一线城市土地出让金": "First-line_city_land_concession", "二线城市成交建筑面积": "Two-line_city_is_in_the_building_area", "二线成交累计同比": "It's_a_two-line_deal__It's_a_one-to-one_match", "二线城市土地出让金": "Second-line_city_land_concession", "三四线城市成交建筑面积": "Three-four-line_city_is_in_the_building_area", "三四线成交累计同比": "Three_or_four_lines__one-on-one", "三四线城市土地出让金": "Three_or_four_lines_of_city_land_concession"}, "table_en": {"各省财政收入": "Fiscal_revenues_of_the_provinces", "300城土地供给": "300-city_land_supply", "300城土地成交": "300-city_land_deals"}}, "卫星天体": {"sqlite": "CREATE TABLE Eight planets (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Distance from the Sun VARCHAR(50), -- 距日距离\n  Table area INTEGER, -- 表面积\n  Volume Rating INTEGER, -- 体积排名\n  Weight Rating INTEGER, -- 重量排名\n  Maximum temperature INTEGER, -- 最高温度\n  Minimum temperature INTEGER, -- 最低温度\n);\nCREATE TABLE Planet-related movies (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Video Name INTEGER, -- 影片名\n  Director VARCHAR(50), -- 导演\n  Shooting Country VARCHAR(50), -- 拍摄国家\n  Bean petals VARCHAR(50), -- 豆瓣评分\n  Associated planet id INTEGER, -- 关联行星id\n);\nCREATE TABLE Mars exploration countries (\n  Detectors INTEGER PRIMARY KEY, -- 探测器\n  Time of launch VARCHAR(50), -- 发射时间\n  National DATETIME, -- 国家\n  Outcome VARCHAR(50), -- 结果\n);\nCREATE TABLE Moon exploration countries (\n  Aircraft VARCHAR(50) PRIMARY KEY, -- 飞行器\n  Time VARCHAR(50), -- 时间\n  National DATETIME, -- 国家\n  Is there an astronaut? VARCHAR(50), -- 有无航天员\n  Purpose of detection BINARY, -- 探测目的\n);\nCREATE TABLE A manned ship (\n  Name of ship VARCHAR(50) PRIMARY KEY, -- 飞船名称\n  Time of launch VARCHAR(50), -- 发射时间\n  Number of launches DATETIME, -- 发射数量\n  National INTEGER, -- 国家\n  Number of astronauts VARCHAR(50), -- 航天员数量\n  Astronaut exit time INTEGER, -- 航天员出舱时间\n);\n-- Planet-related movies.Associated planet id can be joined with Eight planets.Phrase id -- 行星相关电影.关联行星id 与 八大行星.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "距日距离": "Distance_from_the_Sun", "表面积": "Table_area", "体积排名": "Volume_Rating", "重量排名": "Weight_Rating", "最高温度": "Maximum_temperature", "最低温度": "Minimum_temperature", "影片名": "Video_Name", "导演": "Director", "拍摄国家": "Shooting_Country", "豆瓣评分": "Bean_petals", "关联行星id": "Associated_planet_id", "探测器": "Detectors", "发射时间": "Time_of_launch", "国家": "National", "结果": "Outcome", "飞行器": "Aircraft", "时间": "Time", "有无航天员": "Is_there_an_astronaut?", "探测目的": "Purpose_of_detection", "飞船名称": "Name_of_ship", "发射数量": "Number_of_launches", "航天员数量": "Number_of_astronauts", "航天员出舱时间": "Astronaut_exit_time"}, "table_en": {"八大行星": "Eight_planets", "行星相关电影": "Planet-related_movies", "火星探测国家": "Mars_exploration_countries", "月球探测国家": "Moon_exploration_countries", "载人飞船": "A_manned_ship"}}, "各城市一二三产业经济": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Gross regional product (GDP) VARCHAR(50), -- 地区生产总值\n  GDP growth rate INTEGER, -- 生产总值增长率\n  Gross domestic product (GDP) INTEGER, -- 第一产业总值\n  Gross domestic product (GDP) INTEGER, -- 第二产业总值\n  Total value of the tertiary sector INTEGER, -- 第三产业总值\n);\nCREATE TABLE Urban financial industry (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Value added in the financial sector INTEGER, -- 金融业增加值\n  Growth rate VARCHAR(50), -- 增长率\n  Number of financial institutions VARCHAR(50), -- 金融机构数量\n  Balance of foreign currency deposits INTEGER, -- 外币存款余额\n  Growth of deposit balances INTEGER, -- 存款余额增长率\n  Loan balance INTEGER, -- 贷款余额\n  Growth of loan balance INTEGER, -- 贷款余额增长率\n);\nCREATE TABLE Urban trade industry (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Industry INTEGER, -- 行业\n  Imports VARCHAR(50), -- 进口额\n  Growth of imports INTEGER, -- 进口额增长率\n  Exports INTEGER, -- 出口额\n  Growth of export value INTEGER, -- 出口额增长率\n);\nCREATE TABLE Urban primary sector (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Type of industry INTEGER, -- 产业类型\n  Income VARCHAR(50), -- 收入\n  Income growth rate INTEGER, -- 收入增长率\n  Production INTEGER, -- 产量\n  Production growth rate INTEGER, -- 产量增长率\n);\n-- Urban trade industry.Urban id can be joined with Urban.Phrase id -- 城市贸易产业.城市id 与 城市.词条id\n-- Urban primary sector.Urban id can be joined with Urban.Phrase id -- 城市第一产业.城市id 与 城市.词条id\n-- Urban financial industry.Urban id can be joined with Urban.Phrase id -- 城市金融产业.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "地区生产总值": "Gross_regional_product_(GDP)", "生产总值增长率": "GDP_growth_rate", "第一产业总值": "Gross_domestic_product_(GDP)", "第二产业总值": "Gross_domestic_product_(GDP)", "第三产业总值": "Total_value_of_the_tertiary_sector", "城市id": "Urban_id", "金融业增加值": "Value_added_in_the_financial_sector", "增长率": "Growth_rate", "金融机构数量": "Number_of_financial_institutions", "外币存款余额": "Balance_of_foreign_currency_deposits", "存款余额增长率": "Growth_of_deposit_balances", "贷款余额": "Loan_balance", "贷款余额增长率": "Growth_of_loan_balance", "行业": "Industry", "进口额": "Imports", "进口额增长率": "Growth_of_imports", "出口额": "Exports", "出口额增长率": "Growth_of_export_value", "产业类型": "Type_of_industry", "收入": "Income", "收入增长率": "Income_growth_rate", "产量": "Production", "产量增长率": "Production_growth_rate"}, "table_en": {"城市": "Urban", "城市金融产业": "Urban_financial_industry", "城市贸易产业": "Urban_trade_industry", "城市第一产业": "Urban_primary_sector"}}, "历史战役": {"sqlite": "CREATE TABLE Battle (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time spent VARCHAR(50), -- 历时时间\n  Location INTEGER, -- 地点\n  Dynasty! VARCHAR(50), -- 朝代\n  Number of persons participating in the war VARCHAR(50), -- 参战人数\n  Number of deaths INTEGER, -- 死亡人数\n);\nCREATE TABLE General (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Number of battles led VARCHAR(50), -- 领兵出战次数\n  Winners INTEGER, -- 胜数\n  Declines INTEGER, -- 败数\n);\nCREATE TABLE The poem of the General (\n  Poetry INTEGER PRIMARY KEY, -- 诗词\n  Author VARCHAR(50), -- 作者\n  Dynasty! VARCHAR(50), -- 朝代\n  General id VARCHAR(50), -- 纪念将军id\n);\nCREATE TABLE The General's image (\n  General id INTEGER PRIMARY KEY, -- 将军id\n  Video drama INTEGER, -- 影视剧\n  Actor VARCHAR(50), -- 饰演者\n);\nCREATE TABLE Parties participating in the war (\n  Battle id VARCHAR(50) PRIMARY KEY, -- 战役id\n  Winner general id INTEGER, -- 赢方将军id\n  Winner's strength INTEGER, -- 赢方兵力\n  Loser general id INTEGER, -- 败方将军id\n  Loser's strength INTEGER, -- 败方兵力\n);\n-- The poem of the General.General id can be joined with General.Phrase id -- 纪念将军的诗词.纪念将军id 与 将军.词条id\n-- The General's image.General id can be joined with General.Phrase id -- 将军影视形象.将军id 与 将军.词条id\n-- Parties participating in the war.Loser general id can be joined with General.Phrase id -- 参战双方.败方将军id 与 将军.词条id\n-- Parties participating in the war.Battle id can be joined with Battle.Phrase id -- 参战双方.战役id 与 战役.词条id\n-- Parties participating in the war.Winner general id can be joined with General.Phrase id -- 参战双方.赢方将军id 与 将军.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "历时时间": "Time_spent", "地点": "Location", "朝代": "Dynasty!", "参战人数": "Number_of_persons_participating_in_the_war", "死亡人数": "Number_of_deaths", "姓名": "Name", "领兵出战次数": "Number_of_battles_led", "胜数": "Winners", "败数": "Declines", "诗词": "Poetry", "作者": "Author", "纪念将军id": "General_id", "将军id": "General_id", "影视剧": "Video_drama", "饰演者": "Actor", "战役id": "Battle_id", "赢方将军id": "Winner_general_id", "赢方兵力": "Winner's_strength", "败方将军id": "Loser_general_id", "败方兵力": "Loser's_strength"}, "table_en": {"战役": "Battle", "将军": "General", "纪念将军的诗词": "The_poem_of_the_General", "将军影视形象": "The_General's_image", "参战双方": "Parties_participating_in_the_war"}}, "学术比赛": {"sqlite": "CREATE TABLE Game (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Orientation VARCHAR(50), -- 方向\n  Organizer VARCHAR(50), -- 举办单位\n  Nature of units VARCHAR(50), -- 单位性质\n  Number of bonuses VARCHAR(50), -- 奖金数\n  Number of teams admitted INTEGER, -- 录取队伍数量\n  Game platform INTEGER, -- 比赛平台\n);\nCREATE TABLE The race team (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Team name INTEGER, -- 队名\n  Number VARCHAR(50), -- 人数\n);\nCREATE TABLE Student contestant (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Age VARCHAR(50), -- 年龄\n  Education INTEGER, -- 学历\n  School VARCHAR(50), -- 学校\n);\nCREATE TABLE Achievements in the competition (\n  Student id VARCHAR(50) PRIMARY KEY, -- 学生id\n  Join the teamid INTEGER, -- 加入队伍id\n  ♪ In the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ INTEGER, -- 参加比赛id\n  Achievements INTEGER, -- 成绩\n);\n-- Achievements in the competition.♪ In the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ ♪ I'm in the game ♪ ♪ ♪ I'm in the game ♪ can be joined with Game.Phrase id -- 参赛成绩.参加比赛id 与 比赛.词条id\n-- Achievements in the competition.Student id can be joined with Student contestant.Phrase id -- 参赛成绩.学生id 与 参赛学生.词条id\n-- Achievements in the competition.Join the teamid can be joined with The race team.Phrase id -- 参赛成绩.加入队伍id 与 参赛队伍.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "方向": "Orientation", "举办单位": "Organizer", "单位性质": "Nature_of_units", "奖金数": "Number_of_bonuses", "录取队伍数量": "Number_of_teams_admitted", "比赛平台": "Game_platform", "队名": "Team_name", "人数": "Number", "姓名": "Name", "年龄": "Age", "学历": "Education", "学校": "School", "学生id": "Student_id", "加入队伍id": "Join_the_teamid", "参加比赛id": "♪_In_the_game_♪_♪_♪_I'm_in_the_game_♪_♪_♪_I'm_in_the_game_♪_♪_♪_I'm_in_the_game_♪_♪_♪_♪_I'm_in_the_game_♪_♪_♪_♪_I'm_in_the_game_♪_♪_♪_♪_I'm_in_the_game_♪_♪_♪_♪_I'm_in_the_game_♪_♪_♪_I'm_in_the_game_♪", "成绩": "Achievements"}, "table_en": {"比赛": "Game", "参赛队伍": "The_race_team", "参赛学生": "Student_contestant", "参赛成绩": "Achievements_in_the_competition"}}, "动物榜单": {"sqlite": "CREATE TABLE Animals (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Acupuncture INTEGER, -- 学名\n  Properties VARCHAR(50), -- 属性\n);\nCREATE TABLE The smartest animal (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Rank INTEGER, -- 排名\n  Rationale INTEGER, -- 理由\n);\nCREATE TABLE The worst animal (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Title INTEGER, -- 称号\n  Toxicity ranking VARCHAR(50), -- 毒性排名\n  Attack ranking INTEGER, -- 攻击力排名\n  Time of death after poisoning INTEGER, -- 中毒后死亡时间\n);\nCREATE TABLE The biggest animal (\n  Animal id INTEGER PRIMARY KEY, -- 动物id\n  Rank INTEGER, -- 排名\n  body weight INTEGER, -- 体重\n  Annotations INTEGER, -- 说明\n);\nCREATE TABLE The highest-flying animal (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Rank INTEGER, -- 排名\n  Flight height INTEGER, -- 飞行高度\n);\nCREATE TABLE The fastest animal ever (\n  Animal id INTEGER PRIMARY KEY, -- 动物id\n  Rank INTEGER, -- 排名\n  Speed INTEGER, -- 速度\n);\n-- The fastest animal ever.Animal id can be joined with Animals.Phrase id -- 速度最快的动物.动物id 与 动物.词条id\n-- The biggest animal.Animal id can be joined with Animals.Phrase id -- 最大的动物.动物id 与 动物.词条id\n-- The smartest animal.Animal id can be joined with Animals.Phrase id -- 最聪明的动物.动物id 与 动物.词条id\n-- The worst animal.Animal id can be joined with Animals.Phrase id -- 最毒的动物.动物id 与 动物.词条id\n-- The highest-flying animal.Animal id can be joined with Animals.Phrase id -- 飞得最高的动物.动物id 与 动物.词条id", "columns_en": {"词条id": "Phrase_id", "学名": "Acupuncture", "属性": "Properties", "动物id": "Animal_id", "排名": "Rank", "理由": "Rationale", "称号": "Title", "毒性排名": "Toxicity_ranking", "攻击力排名": "Attack_ranking", "中毒后死亡时间": "Time_of_death_after_poisoning", "体重": "body_weight", "说明": "Annotations", "飞行高度": "Flight_height", "速度": "Speed"}, "table_en": {"动物": "Animals", "最聪明的动物": "The_smartest_animal", "最毒的动物": "The_worst_animal", "最大的动物": "The_biggest_animal", "飞得最高的动物": "The_highest-flying_animal", "速度最快的动物": "The_fastest_animal_ever"}}, "城市地铁": {"sqlite": "CREATE TABLE China Metro (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Total mileage DATETIME, -- 总里程\n  Number of cities opened INTEGER, -- 开通城市数量\n);\nCREATE TABLE Urban (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name of city VARCHAR(50), -- 城市名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n);\nCREATE TABLE Urban subway miles (\n  Urban id VARCHAR(50) PRIMARY KEY, -- 城市id\n  Metro operating mileage INTEGER, -- 地铁运营里程\n  It's building miles INTEGER, -- 在建里程\n  Planning miles INTEGER, -- 规划里程\n  Number of lines operated INTEGER, -- 已运营线路数\n);\nCREATE TABLE Average number of passengers per day on the urban subway (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Average daily passenger traffic (millions) INTEGER, -- 日均客运量(万人次)\n  Number of passengers per kilometre per day (millions) INTEGER, -- 每日每公里客运量(万人次)\n  Operating costs per kilometre INTEGER, -- 每公里运营成本\n  Operating income per kilometre INTEGER, -- 每公里运营收入\n);\nCREATE TABLE Urban subway fare (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Two dollars for miles INTEGER, -- 2元可乘坐里程\n  Three dollars for miles INTEGER, -- 3元可乘坐里程\n  Four bucks is a mileage INTEGER, -- 4元可乘坐里程\n  Five bucks a mile INTEGER, -- 5元可乘坐里程\n);\n-- Average number of passengers per day on the urban subway.Urban id can be joined with Urban.Phrase id -- 城市地铁日均客运量.城市id 与 城市.词条id\n-- Urban subway miles.Urban id can be joined with Urban.Phrase id -- 城市地铁里程.城市id 与 城市.词条id\n-- Urban subway fare.Urban id can be joined with Urban.Phrase id -- 城市地铁票价.城市id 与 城市.词条id", "columns_en": {"年份": "Year", "总里程": "Total_mileage", "开通城市数量": "Number_of_cities_opened", "词条id": "Phrase_id", "城市名称": "Name_of_city", "所属省份": "Provinces_to_which_they_belong", "城市id": "Urban_id", "地铁运营里程": "Metro_operating_mileage", "在建里程": "It's_building_miles", "规划里程": "Planning_miles", "已运营线路数": "Number_of_lines_operated", "日均客运量(万人次)": "Average_daily_passenger_traffic_(millions)", "每日每公里客运量(万人次)": "Number_of_passengers_per_kilometre_per_day_(millions)", "每公里运营成本": "Operating_costs_per_kilometre", "每公里运营收入": "Operating_income_per_kilometre", "2元可乘坐里程": "Two_dollars_for_miles", "3元可乘坐里程": "Three_dollars_for_miles", "4元可乘坐里程": "Four_bucks_is_a_mileage", "5元可乘坐里程": "Five_bucks_a_mile"}, "table_en": {"中国地铁": "China_Metro", "城市": "Urban", "城市地铁里程": "Urban_subway_miles", "城市地铁日均客运量": "Average_number_of_passengers_per_day_on_the_urban_subway", "城市地铁票价": "Urban_subway_fare"}}, "双11活动": {"sqlite": "CREATE TABLE Electrician (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  Type VARCHAR(50), -- 类型\n  Impact index VARCHAR(50), -- 影响力指数\n  Rank INTEGER, -- 排名\n  Number of online countries INTEGER, -- 上线国家数量\n);\nCREATE TABLE Operators cover the country (\n  Electrician id INTEGER PRIMARY KEY, -- 电商id\n  Support to States INTEGER, -- 支持国家\n  Online time VARCHAR(50), -- 上线时间\n  Name of responsible branch DATETIME, -- 负责的分公司名称\n);\nCREATE TABLE Business (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  Main battalion category VARCHAR(50), -- 主营类别\n  Number of countries covered by Internet shops VARCHAR(50), -- 网店覆盖国家数量\n  Number of physical stores INTEGER, -- 实体店数量\n  Number of resident electric power providers INTEGER, -- 入驻电商数量\n);\nCREATE TABLE Business points cover the country (\n  Business id INTEGER PRIMARY KEY, -- 商家id\n  National INTEGER, -- 国家\n  Number of physical stores VARCHAR(50), -- 实体店数量\n  Average annual turnover INTEGER, -- 年平均营业额\n);\nCREATE TABLE Business turnover (\n  Business id INTEGER PRIMARY KEY, -- 商家id\n  Commercial platformid INTEGER, -- 电商平台id\n  Number of over-line items INTEGER, -- 上线品类数量\n  Number of promotional items INTEGER, -- 促销品类数量\n  Average discount INTEGER, -- 平均折扣\n  Transactions INTEGER, -- 交易额\n  Percentage of total annual sales INTEGER, -- 占全年销售额比例\n);\nCREATE TABLE Trader ' s activities (\n  Commercial platformid INTEGER PRIMARY KEY, -- 电商平台id\n  Days of activity INTEGER, -- 活动日\n  Number of participants VARCHAR(50), -- 参加活动商家数量\n  Number of goods promoted INTEGER, -- 促销商品数量\n  Transactions INTEGER, -- 交易额\n);\n-- Operators cover the country.Electrician id can be joined with Electrician.Phrase id -- 电商覆盖国家.电商id 与 电商.词条id\n-- Business turnover.Commercial platformid can be joined with Electrician.Phrase id -- 商家交易额.电商平台id 与 电商.词条id\n-- Business turnover.Business id can be joined with Business.Phrase id -- 商家交易额.商家id 与 商家.词条id\n-- Business points cover the country.Business id can be joined with Business.Phrase id -- 商家网点覆盖国家.商家id 与 商家.词条id\n-- Trader ' s activities.Commercial platformid can be joined with Electrician.Phrase id -- 电商活动交易额.电商平台id 与 电商.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属公司": "Company_to_which_it_belongs", "类型": "Type", "影响力指数": "Impact_index", "排名": "Rank", "上线国家数量": "Number_of_online_countries", "电商id": "Electrician_id", "支持国家": "Support_to_States", "上线时间": "Online_time", "负责的分公司名称": "Name_of_responsible_branch", "所属国家": "Country_of_nationality", "主营类别": "Main_battalion_category", "网店覆盖国家数量": "Number_of_countries_covered_by_Internet_shops", "实体店数量": "Number_of_physical_stores", "入驻电商数量": "Number_of_resident_electric_power_providers", "商家id": "Business_id", "国家": "National", "年平均营业额": "Average_annual_turnover", "电商平台id": "Commercial_platformid", "上线品类数量": "Number_of_over-line_items", "促销品类数量": "Number_of_promotional_items", "平均折扣": "Average_discount", "交易额": "Transactions", "占全年销售额比例": "Percentage_of_total_annual_sales", "活动日": "Days_of_activity", "参加活动商家数量": "Number_of_participants", "促销商品数量": "Number_of_goods_promoted"}, "table_en": {"电商": "Electrician", "电商覆盖国家": "Operators_cover_the_country", "商家": "Business", "商家网点覆盖国家": "Business_points_cover_the_country", "商家交易额": "Business_turnover", "电商活动交易额": "Trader_'_s_activities"}}, "华语电影奖": {"sqlite": "CREATE TABLE Chinese Film Award (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 创办时间\n  Award cycle DATETIME, -- 颁奖周期\n  Award location INTEGER, -- 颁奖地点\n);\nCREATE TABLE Actors (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Age VARCHAR(50), -- 年龄\n  Number of major films INTEGER, -- 主演电影数\n  Number of films performed INTEGER, -- 出演电影数\n  Number of nominations received INTEGER, -- 获得提名数\n  Number of awards INTEGER, -- 获奖次数\n);\nCREATE TABLE Film (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Show time VARCHAR(50), -- 上映时间\n  The film's long DATETIME, -- 片长\n  Ticket room INTEGER, -- 票房\n  Number of awards INTEGER, -- 获奖次数\n);\nCREATE TABLE List of nominations for the Chinese-language film award (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Nominee id INTEGER, -- 提名人id\n  Specific awards INTEGER, -- 具体奖项\n  Film Award id VARCHAR(50), -- 电影奖id\n);\nCREATE TABLE List of winners of the Chinese-language film award (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Number of sessions DATETIME, -- 届数\n  Film Award id INTEGER, -- 电影奖id\n  Specific awards INTEGER, -- 具体奖项\n  Laureate id VARCHAR(50), -- 获奖人id\n  Film id INTEGER, -- 电影id\n);\n-- List of winners of the Chinese-language film award.Laureate id can be joined with Actors.Phrase id -- 华语电影奖获奖名单.获奖人id 与 演员.词条id\n-- List of nominations for the Chinese-language film award.Nominee id can be joined with Actors.Phrase id -- 华语电影奖提名名单.提名人id 与 演员.词条id\n-- List of nominations for the Chinese-language film award.Film Award id can be joined with Chinese Film Award.Phrase id -- 华语电影奖提名名单.电影奖id 与 华语电影奖.词条id\n-- List of winners of the Chinese-language film award.Film id can be joined with Film.Phrase id -- 华语电影奖获奖名单.电影id 与 电影.词条id\n-- List of winners of the Chinese-language film award.Film Award id can be joined with Chinese Film Award.Phrase id -- 华语电影奖获奖名单.电影奖id 与 华语电影奖.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "创办时间": "_Other_Organiser", "颁奖周期": "Award_cycle", "颁奖地点": "Award_location", "姓名": "Name", "性别": "Gender", "年龄": "Age", "主演电影数": "Number_of_major_films", "出演电影数": "Number_of_films_performed", "获得提名数": "Number_of_nominations_received", "获奖次数": "Number_of_awards", "上映时间": "Show_time", "片长": "The_film's_long", "票房": "Ticket_room", "年份": "Year", "届数": "Number_of_sessions", "提名人id": "Nominee_id", "具体奖项": "Specific_awards", "电影奖id": "Film_Award_id", "获奖人id": "Laureate_id", "电影id": "Film_id"}, "table_en": {"华语电影奖": "Chinese_Film_Award", "演员": "Actors", "电影": "Film", "华语电影奖提名名单": "List_of_nominations_for_the_Chinese-language_film_award", "华语电影奖获奖名单": "List_of_winners_of_the_Chinese-language_film_award"}}, "公司广告": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Main products VARCHAR(50), -- 主要产品\n  Cost of advertising input VARCHAR(50), -- 广告投入成本\n  Cost of advertising inputs as a percentage INTEGER, -- 广告投入成本占比\n);\nCREATE TABLE Advertising platform (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Advertisement income VARCHAR(50), -- 广告收入\n  Share of income from advertising INTEGER, -- 广告收入占比\n);\nCREATE TABLE The company's advertising on the platform (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Platformid INTEGER, -- 平台id\n  Number of purchase keywords INTEGER, -- 购买关键词数量\n  Click Rate INTEGER, -- 点击率\n  Conversion rate INTEGER, -- 转换率\n);\n-- The company's advertising on the platform.Platformid can be joined with Advertising platform.Phrase id -- 公司在平台投入广告.平台id 与 广告平台.词条id\n-- The company's advertising on the platform.Companyid can be joined with Company.Phrase id -- 公司在平台投入广告.公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "主要产品": "Main_products", "广告投入成本": "Cost_of_advertising_input", "广告投入成本占比": "Cost_of_advertising_inputs_as_a_percentage", "广告收入": "Advertisement_income", "广告收入占比": "Share_of_income_from_advertising", "公司id": "Companyid", "平台id": "Platformid", "购买关键词数量": "Number_of_purchase_keywords", "点击率": "Click_Rate", "转换率": "Conversion_rate"}, "table_en": {"公司": "Company", "广告平台": "Advertising_platform", "公司在平台投入广告": "The_company's_advertising_on_the_platform"}}, "赚钱公司榜单": {"sqlite": "CREATE TABLE National (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The continent to which they belong VARCHAR(50), -- 所属洲\n  Number of registered companies VARCHAR(50), -- 注册公司数量\n  Number of companies listed INTEGER, -- 上市公司数量\n);\nCREATE TABLE The world's most profitable company (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationalityd VARCHAR(50), -- 所属国家id\n  Annual profits INTEGER, -- 年利润\n  World ranking INTEGER, -- 世界排名\n);\nCREATE TABLE China's most profitable company (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 位于城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Annual turnover VARCHAR(50), -- 年营业额\n  Domestic rankings INTEGER, -- 国内排名\n  World ranking INTEGER, -- 世界排名\n);\n-- The world's most profitable company.Country of nationalityd can be joined with National.Phrase id -- 世界最赚钱公司.所属国家id 与 国家.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属洲": "The_continent_to_which_they_belong", "注册公司数量": "Number_of_registered_companies", "上市公司数量": "Number_of_companies_listed", "所属国家id": "Country_of_nationalityd", "年利润": "Annual_profits", "世界排名": "World_ranking", "位于城市": "It's_in_the_city", "所属省份": "Provinces_to_which_they_belong", "年营业额": "Annual_turnover", "国内排名": "Domestic_rankings"}, "table_en": {"国家": "National", "世界最赚钱公司": "The_world's_most_profitable_company", "中国最赚钱公司": "China's_most_profitable_company"}}, "城市拥堵": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Urban INTEGER, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Urban population VARCHAR(50), -- 城市人口\n  Urban area INTEGER, -- 城市面积\n  Vehicle holdings level (vehicles) INTEGER, -- 汽车保有量级别(辆)\n  Classic peak congestion index INTEGER, -- 通勤高峰拥堵指数\n  Actual velocity of commuter peaks (km/h) INTEGER, -- 通勤高峰实际速度(千米/时)\n  Blocking rankings INTEGER, -- 拥堵排名\n);\nCREATE TABLE National transportation hubs (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Traffic hubs INTEGER, -- 交通枢纽站\n   Other Organiser VARCHAR(50), -- 所属城市id\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Average congestion index INTEGER, -- 平均拥堵指数\n  Average speed of perimeter network (km/h) INTEGER, -- 周边路网平均速度(千米/时)\n  Blocking rankings INTEGER, -- 拥堵排名\n);\nCREATE TABLE Tourism attractions (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Place name INTEGER, -- 景点名称\n   Other Organiser VARCHAR(50), -- 所属城市id\n  Average congestion index INTEGER, -- 平均拥堵指数\n  Average speed of perimeter network (km/h) INTEGER, -- 周边路网平均速度(千米/时)\n  Blocking rankings INTEGER, -- 拥堵排名\n);\nCREATE TABLE It's a national hotspot (\n  Siteid INTEGER PRIMARY KEY, -- 景点id\n  Average number of visitors per day INTEGER, -- 日均接待游客数量\n  Average number of visitors per day out of the province INTEGER, -- 日均外省游客数量\n  Heat Rating INTEGER, -- 热度排名\n);\nCREATE TABLE It's a hot trip out of the city (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Country VARCHAR(50), -- 所在国家\n  Number of domestic tourists VARCHAR(50), -- 国内游客数量\n  Rank INTEGER, -- 排名\n);\n-- Tourism attractions. Other Organiser can be joined with Urban.Phrase id -- 旅游景点.所属城市id 与 城市.词条id\n-- National transportation hubs. Other Organiser can be joined with Urban.Phrase id -- 全国交通枢纽.所属城市id 与 城市.词条id\n-- It's a national hotspot.Siteid can be joined with Tourism attractions.Phrase id -- 全国热门景点.景点id 与 旅游景点.词条id", "columns_en": {"词条id": "Phrase_id", "城市": "Urban", "所属省份": "Provinces_to_which_they_belong", "城市人口": "Urban_population", "城市面积": "Urban_area", "汽车保有量级别(辆)": "Vehicle_holdings_level_(vehicles)", "通勤高峰拥堵指数": "Classic_peak_congestion_index", "通勤高峰实际速度(千米/时)": "Actual_velocity_of_commuter_peaks_(km/h)", "拥堵排名": "Blocking_rankings", "交通枢纽站": "Traffic_hubs", "所属城市id": "_Other_Organiser", "平均拥堵指数": "Average_congestion_index", "周边路网平均速度(千米/时)": "Average_speed_of_perimeter_network_(km/h)", "景点名称": "Place_name", "景点id": "Siteid", "日均接待游客数量": "Average_number_of_visitors_per_day", "日均外省游客数量": "Average_number_of_visitors_per_day_out_of_the_province", "热度排名": "Heat_Rating", "所在国家": "Country", "国内游客数量": "Number_of_domestic_tourists", "排名": "Rank"}, "table_en": {"城市": "Urban", "全国交通枢纽": "National_transportation_hubs", "旅游景点": "Tourism_attractions", "全国热门景点": "It's_a_national_hotspot", "热门出境游城市": "It's_a_hot_trip_out_of_the_city"}}, "手机品牌代言人": {"sqlite": "CREATE TABLE He's an advocate star (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Age VARCHAR(50), -- 年龄\n  Country of nationality INTEGER, -- 所属国家\n  Occupation VARCHAR(50), -- 职业\n  Wealth ranking VARCHAR(50), -- 财富排名\n);\nCREATE TABLE Smart phone brand (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  The world's top 500 VARCHAR(50), -- 世界500强排名\n  Volume of shipments INTEGER, -- 出货量\n  Market share INTEGER, -- 市场份额\n);\nCREATE TABLE He's a voice-over star (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Brandid INTEGER, -- 品牌id\n  Start year INTEGER, -- 开始年份\n  Year(s) of representation DATETIME, -- 代言年数\n  Advocacy costs INTEGER, -- 代言费\n  Number of representative models INTEGER, -- 代言型号数量\n);\n-- He's a voice-over star.Starid can be joined with He's an advocate star.Phrase id -- 手机代言明星.明星id 与 代言明星.词条id\n-- He's a voice-over star.Brandid can be joined with Smart phone brand.Phrase id -- 手机代言明星.品牌id 与 智能手机品牌.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "年龄": "Age", "所属国家": "Country_of_nationality", "职业": "Occupation", "财富排名": "Wealth_ranking", "名称": "Name", "世界500强排名": "The_world's_top_500", "出货量": "Volume_of_shipments", "市场份额": "Market_share", "明星id": "Starid", "品牌id": "Brandid", "开始年份": "Start_year", "代言年数": "Year(s)_of_representation", "代言费": "Advocacy_costs", "代言型号数量": "Number_of_representative_models"}, "table_en": {"代言明星": "He's_an_advocate_star", "智能手机品牌": "Smart_phone_brand", "手机代言明星": "He's_a_voice-over_star"}}, "歌手演唱会": {"sqlite": "CREATE TABLE Singer (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Date of birth VARCHAR(50), -- 出生日期\n  Place of birth DATETIME, -- 出生地\n  It's a concert time VARCHAR(50), -- 演唱会场次\n);\nCREATE TABLE The courtyard (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of persons accommodated VARCHAR(50), -- 容纳人数\n  City to which you belong INTEGER, -- 所属城市\n);\nCREATE TABLE A concert (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  concert name INTEGER, -- 演唱会名称\n  Time VARCHAR(50), -- 时间\n  Field id DATETIME, -- 场馆id\n  Singer id INTEGER, -- 歌手id\n);\nCREATE TABLE The record of the concert (\n  Singer id INTEGER PRIMARY KEY, -- 歌手id\n  Year INTEGER, -- 年份\n  Fields DATETIME, -- 场次\n);\n-- A concert.Singer id can be joined with Singer.Phrase id -- 演唱会.歌手id 与 歌手.词条id\n-- A concert.Field id can be joined with The courtyard.Phrase id -- 演唱会.场馆id 与 场馆.词条id\n-- The record of the concert.Singer id can be joined with Singer.Phrase id -- 演唱会记录.歌手id 与 歌手.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "出生日期": "Date_of_birth", "出生地": "Place_of_birth", "演唱会场次": "It's_a_concert_time", "名称": "Name", "容纳人数": "Number_of_persons_accommodated", "所属城市": "City_to_which_you_belong", "演唱会名称": "concert_name", "时间": "Time", "场馆id": "Field_id", "歌手id": "Singer_id", "年份": "Year", "场次": "Fields"}, "table_en": {"歌手": "Singer", "场馆": "The_courtyard", "演唱会": "A_concert", "演唱会记录": "The_record_of_the_concert"}}, "2019年各城市马拉松": {"sqlite": "CREATE TABLE China's cities of Marathon (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Host city VARCHAR(50), -- 举办城市\n  Province VARCHAR(50), -- 省份\n  Time VARCHAR(50), -- 时间\n  It's the whole track DATETIME, -- 全程赛道\n  Size of population INTEGER, -- 人数规模\n);\nCREATE TABLE Marathon (\n  Marathonid INTEGER PRIMARY KEY, -- 马拉松id\n  The races INTEGER, -- 赛程\n  Kilometres VARCHAR(50), -- 公里数\n  Number of persons registered INTEGER, -- 报名人数\n  Missed Rate INTEGER, -- 中签率\n);\nCREATE TABLE Successive Marathon records (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Urban DATETIME, -- 城市\n  Minimum age of contestants VARCHAR(50), -- 参赛者最小年龄\n  Maximum age of contestants INTEGER, -- 参赛者最大年龄\n  It's the least we can do INTEGER, -- 全程最少时间\n);\n-- Marathon.Marathonid can be joined with China's cities of Marathon.Phrase id -- 马拉松赛程.马拉松id 与 中国各城市马拉松.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "举办城市": "Host_city", "省份": "Province", "时间": "Time", "全程赛道": "It's_the_whole_track", "人数规模": "Size_of_population", "马拉松id": "Marathonid", "赛程": "The_races", "公里数": "Kilometres", "报名人数": "Number_of_persons_registered", "中签率": "Missed_Rate", "年份": "Year", "城市": "Urban", "参赛者最小年龄": "Minimum_age_of_contestants", "参赛者最大年龄": "Maximum_age_of_contestants", "全程最少时间": "It's_the_least_we_can_do"}, "table_en": {"中国各城市马拉松": "China's_cities_of_Marathon", "马拉松赛程": "Marathon", "历届马拉松纪录": "Successive_Marathon_records"}}, "动物天敌和朋友": {"sqlite": "CREATE TABLE Animals (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Literary Name INTEGER, -- 中文学名\n  Food VARCHAR(50), -- 食性\n  Are you a friend of the human race? VARCHAR(50), -- 是否是人类朋友\n  Rationale BINARY, -- 理由\n);\nCREATE TABLE An animal's natural enemy (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Enemy id INTEGER, -- 天敌id\n  Kersung's reason INTEGER, -- 克星原因\n);\nCREATE TABLE Animal friend (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  ♪ Friend id ♪ INTEGER, -- 朋友id\n);\n-- An animal's natural enemy.Animal id can be joined with Animals.Phrase id -- 动物的天敌.动物id 与 动物.词条id\n-- Animal friend.Animal id can be joined with Animals.Phrase id -- 动物朋友.动物id 与 动物.词条id\n-- Animal friend.♪ Friend id ♪ can be joined with Animals.Phrase id -- 动物朋友.朋友id 与 动物.词条id\n-- An animal's natural enemy.Enemy id can be joined with Animals.Phrase id -- 动物的天敌.天敌id 与 动物.词条id", "columns_en": {"词条id": "Phrase_id", "中文学名": "Chinese_Literary_Name", "食性": "Food", "是否是人类朋友": "Are_you_a_friend_of_the_human_race?", "理由": "Rationale", "动物id": "Animal_id", "天敌id": "Enemy_id", "克星原因": "Kersung's_reason", "朋友id": "♪_Friend_id_♪"}, "table_en": {"动物": "Animals", "动物的天敌": "An_animal's_natural_enemy", "动物朋友": "Animal_friend"}}, "中国景点": {"sqlite": "CREATE TABLE The scenery (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area of land area VARCHAR(50), -- 占地面积\n  Place level INTEGER, -- 景点级别\n  Price of ticket for the season INTEGER, -- 旺季门票价格\n  The price of tickets for the rest of the season INTEGER, -- 淡季门票价格\n  Start time INTEGER, -- 始建时间\n  City to which you belong DATETIME, -- 所属城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n);\nCREATE TABLE Places (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Geographical location VARCHAR(50), -- 地理位置\n);\nCREATE TABLE Traffic stations (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  View area id VARCHAR(50), -- 景区id\n  Distance INTEGER, -- 距离\n);\nCREATE TABLE Viewpoints (\n  Siteid INTEGER PRIMARY KEY, -- 景点id\n  View area id INTEGER, -- 景区id\n  Is it famous? INTEGER, -- 是否著名\n);\nCREATE TABLE Near-view area (\n  View area id BINARY PRIMARY KEY, -- 景区id\n  Neighborhoodid INTEGER, -- 相邻景区id\n  Distance INTEGER, -- 距离\n);\nCREATE TABLE Museums (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area of land area VARCHAR(50), -- 占地面积\n  It's opening time INTEGER, -- 开馆时间\n  City to which you belong DATETIME, -- 所属城市\n  Tickets VARCHAR(50), -- 票价\n);\nCREATE TABLE Unit for the Protection of Principal Cultural Objects (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Price of tickets VARCHAR(50), -- 门票价格\n  Protection level INTEGER, -- 保护级别\n  City to which you belong VARCHAR(50), -- 所属城市\n  Year evaluated VARCHAR(50), -- 评定年份\n);\nCREATE TABLE Zoo (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area of land area VARCHAR(50), -- 占地面积\n  Completion date INTEGER, -- 竣工时间\n  Price of tickets DATETIME, -- 门票价格\n  Animal species INTEGER, -- 动物种类\n  City to which you belong INTEGER, -- 所属城市\n);\nCREATE TABLE Repository animals (\n  Animal name VARCHAR(50) PRIMARY KEY, -- 动物名称\n  Zooid VARCHAR(50), -- 动物园id\n  Number INTEGER, -- 数量\n);\nCREATE TABLE The amusement park (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area of land area VARCHAR(50), -- 占地面积\n  Price of tickets INTEGER, -- 门票价格\n  Total investments INTEGER, -- 总投资\n  City to which you belong INTEGER, -- 所属城市\n);\nCREATE TABLE Recreational projects (\n  Title of the project VARCHAR(50) PRIMARY KEY, -- 项目名称\n  Playground id VARCHAR(50), -- 游乐园id\n  Season INTEGER, -- 季节\n  Rank VARCHAR(50), -- 排名\n);\n-- Near-view area.View area id can be joined with The scenery.Phrase id -- 临近景区.景区id 与 景区.词条id\n-- Near-view area.Neighborhoodid can be joined with The scenery.Phrase id -- 临近景区.相邻景区id 与 景区.词条id\n-- Repository animals.Zooid can be joined with Zoo.Phrase id -- 馆藏动物.动物园id 与 动物园.词条id\n-- Recreational projects.Playground id can be joined with The amusement park.Phrase id -- 娱乐项目.游乐园id 与 游乐园.词条id\n-- Viewpoints.View area id can be joined with The scenery.Phrase id -- 景区景点.景区id 与 景区.词条id\n-- Traffic stations.View area id can be joined with The scenery.Phrase id -- 交通站.景区id 与 景区.词条id\n-- Viewpoints.Siteid can be joined with Places.Phrase id -- 景区景点.景点id 与 景点.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "占地面积": "Area_of_land_area", "景点级别": "Place_level", "旺季门票价格": "Price_of_ticket_for_the_season", "淡季门票价格": "The_price_of_tickets_for_the_rest_of_the_season", "始建时间": "Start_time", "所属城市": "City_to_which_you_belong", "所属省份": "Provinces_to_which_they_belong", "地理位置": "Geographical_location", "类型": "Type", "景区id": "View_area_id", "距离": "Distance", "景点id": "Siteid", "是否著名": "Is_it_famous?", "相邻景区id": "Neighborhoodid", "开馆时间": "It's_opening_time", "票价": "Tickets", "门票价格": "Price_of_tickets", "保护级别": "Protection_level", "评定年份": "Year_evaluated", "竣工时间": "Completion_date", "动物种类": "Animal_species", "动物名称": "Animal_name", "动物园id": "Zooid", "数量": "Number", "总投资": "Total_investments", "项目名称": "Title_of_the_project", "游乐园id": "Playground_id", "季节": "Season", "排名": "Rank"}, "table_en": {"景区": "The_scenery", "景点": "Places", "交通站": "Traffic_stations", "景区景点": "Viewpoints", "临近景区": "Near-view_area", "博物馆": "Museums", "重点文物保护单位": "Unit_for_the_Protection_of_Principal_Cultural_Objects", "动物园": "Zoo", "馆藏动物": "Repository_animals", "游乐园": "The_amusement_park", "娱乐项目": "Recreational_projects"}}, "电影票预定": {"sqlite": "CREATE TABLE The cinema (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n  Distance to Current VARCHAR(50), -- 与当前距离\n  User Rating INTEGER, -- 用户评分\n);\nCREATE TABLE Film (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Shooting Country VARCHAR(50), -- 拍摄国家\n  Type VARCHAR(50), -- 类型\n  The film's long VARCHAR(50), -- 片长\n  Bean petals INTEGER, -- 豆瓣评分\n);\nCREATE TABLE It's a movie in the theater (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  ♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ INTEGER, -- 影院id\n  Show time INTEGER, -- 上映时间\n  Tickets DATETIME, -- 票价\n  Number of remaining votes INTEGER, -- 余票数量\n);\n-- It's a movie in the theater.♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ can be joined with The cinema.Phrase id -- 影院上映电影.影院id 与 影院.词条id\n-- It's a movie in the theater.Film id can be joined with Film.Phrase id -- 影院上映电影.电影id 与 电影.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "地址": "Address", "与当前距离": "Distance_to_Current", "用户评分": "User_Rating", "拍摄国家": "Shooting_Country", "类型": "Type", "片长": "The_film's_long", "豆瓣评分": "Bean_petals", "电影id": "Film_id", "影院id": "♪_The_cinema_♪_♪_♪_The_cinema_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪", "上映时间": "Show_time", "票价": "Tickets", "余票数量": "Number_of_remaining_votes"}, "table_en": {"影院": "The_cinema", "电影": "Film", "影院上映电影": "It's_a_movie_in_the_theater"}}, "明星关系": {"sqlite": "CREATE TABLE Star (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Age VARCHAR(50), -- 年龄\n  Graduate schools INTEGER, -- 毕业院校\n  Time of graduation VARCHAR(50), -- 毕业时间\n);\nCREATE TABLE Star couple (\n  Starid DATETIME PRIMARY KEY, -- 明星id\n  Spouse id INTEGER, -- 配偶id\n  Time of marriage INTEGER, -- 结婚时间\n  Number of children DATETIME, -- 子女数量\n);\nCREATE TABLE A divorcing star (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Spouse id INTEGER, -- 配偶id\n  Departure time INTEGER, -- 离异时间\n  Number of children DATETIME, -- 子女数量\n);\nCREATE TABLE Starfriend (\n  Starid INTEGER PRIMARY KEY, -- 明星id\n  Friend id INTEGER, -- 好友id\n  Relations INTEGER, -- 关系\n);\n-- Star couple.Spouse id can be joined with Star.Phrase id -- 明星夫妻.配偶id 与 明星.词条id\n-- A divorcing star.Spouse id can be joined with Star.Phrase id -- 离异明星.配偶id 与 明星.词条id\n-- Star couple.Starid can be joined with Star.Phrase id -- 明星夫妻.明星id 与 明星.词条id\n-- Starfriend.Friend id can be joined with Star.Phrase id -- 明星好友.好友id 与 明星.词条id\n-- Starfriend.Starid can be joined with Star.Phrase id -- 明星好友.明星id 与 明星.词条id\n-- A divorcing star.Starid can be joined with Star.Phrase id -- 离异明星.明星id 与 明星.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "年龄": "Age", "毕业院校": "Graduate_schools", "毕业时间": "Time_of_graduation", "明星id": "Starid", "配偶id": "Spouse_id", "结婚时间": "Time_of_marriage", "子女数量": "Number_of_children", "离异时间": "Departure_time", "好友id": "Friend_id", "关系": "Relations"}, "table_en": {"明星": "Star", "明星夫妻": "Star_couple", "离异明星": "A_divorcing_star", "明星好友": "Starfriend"}}, "地震": {"sqlite": "CREATE TABLE Earthquake (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time of occurrence VARCHAR(50), -- 发生时间\n  Geographical location DATETIME, -- 地理位置\n  Explosion source depth VARCHAR(50), -- 震源深度\n  Seismic INTEGER, -- 震级\n  Mid-shock intensity INTEGER, -- 震中烈度\n  Number of deaths INTEGER, -- 死亡人数\n  Number of injuries INTEGER, -- 受伤人数\n  Duration INTEGER, -- 持续时间\n  Economic loss INTEGER, -- 经济损失\n);\nCREATE TABLE Areas affected by the Wenchuan earthquake (\n  Region INTEGER PRIMARY KEY, -- 地区\n  Number of deaths VARCHAR(50), -- 死亡人数\n  Number of injuries INTEGER, -- 受伤人数\n  Number of missing persons INTEGER, -- 失踪人数\n);\nCREATE TABLE Seismic derivatives (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  Type VARCHAR(50), -- 类型\n  Earthquake id VARCHAR(50), -- 地震id\n  Airtime INTEGER, -- 播出时间\n  Director DATETIME, -- 导演\n);\nCREATE TABLE Earthquake Memorial (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Location VARCHAR(50), -- 地点\n  It's opening time INTEGER, -- 开馆时间\n  Earthquake id INTEGER, -- 地震id\n  Construction area DATETIME, -- 建筑面积\n);\n-- Seismic derivatives.Earthquake id can be joined with Earthquake.Phrase id -- 地震衍生剧.地震id 与 地震.词条id\n-- Earthquake Memorial.Earthquake id can be joined with Earthquake.Phrase id -- 地震纪念馆.地震id 与 地震.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "发生时间": "Time_of_occurrence", "地理位置": "Geographical_location", "震源深度": "Explosion_source_depth", "震级": "Seismic", "震中烈度": "Mid-shock_intensity", "死亡人数": "Number_of_deaths", "受伤人数": "Number_of_injuries", "持续时间": "Duration", "经济损失": "Economic_loss", "地区": "Region", "失踪人数": "Number_of_missing_persons", "剧名": "The_title_of_the_play", "类型": "Type", "地震id": "Earthquake_id", "播出时间": "Airtime", "导演": "Director", "地点": "Location", "开馆时间": "It's_opening_time", "建筑面积": "Construction_area"}, "table_en": {"地震": "Earthquake", "汶川地震受灾地区": "Areas_affected_by_the_Wenchuan_earthquake", "地震衍生剧": "Seismic_derivatives", "地震纪念馆": "Earthquake_Memorial"}}, "羽毛球": {"sqlite": "CREATE TABLE It's an important event (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of event INTEGER, -- 赛事名称\n  The crowd VARCHAR(50), -- 人群\n   Other Organiser VARCHAR(50), -- 成立时间\n  The year of the race DATETIME, -- 比赛间隔年\n  Number of competitions INTEGER, -- 比赛项目数量\n);\nCREATE TABLE A champion country (\n  Country Name INTEGER PRIMARY KEY, -- 国家名称\n  Game id VARCHAR(50), -- 赛事id\n  Number of champions INTEGER, -- 冠军数量\n);\nCREATE TABLE Badminton player (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Date of birth VARCHAR(50), -- 出生日期\n  Height DATETIME, -- 身高\n);\nCREATE TABLE The Olympic champions (\n  Name of Olympic Games INTEGER PRIMARY KEY, -- 奥运会名称\n  Title of the project VARCHAR(50), -- 项目名称\n  Gold medal recipient id VARCHAR(50), -- 金牌获得者id\n  Silver Card Winner id INTEGER, -- 银牌获得者id\n  Copper Card Laureateid INTEGER, -- 铜牌获得者id\n);\nCREATE TABLE Number of champions (\n  Player id INTEGER PRIMARY KEY, -- 球员id\n  Game id INTEGER, -- 赛事id\n  Number of champions INTEGER, -- 冠军次数\n  Number of military units INTEGER, -- 亚军次数\n  Number of seasoned troops INTEGER, -- 季军次数\n);\n-- A champion country.Game id can be joined with It's an important event.Phrase id -- 冠军国家.赛事id 与 重要赛事.词条id\n-- The Olympic champions.Copper Card Laureateid can be joined with Badminton player.Phrase id -- 奥运会冠亚军.铜牌获得者id 与 羽毛球球员.词条id\n-- Number of champions.Game id can be joined with It's an important event.Phrase id -- 球员夺冠次数.赛事id 与 重要赛事.词条id\n-- Number of champions.Player id can be joined with Badminton player.Phrase id -- 球员夺冠次数.球员id 与 羽毛球球员.词条id\n-- The Olympic champions.Gold medal recipient id can be joined with Badminton player.Phrase id -- 奥运会冠亚军.金牌获得者id 与 羽毛球球员.词条id\n-- The Olympic champions.Silver Card Winner id can be joined with Badminton player.Phrase id -- 奥运会冠亚军.银牌获得者id 与 羽毛球球员.词条id", "columns_en": {"词条id": "Phrase_id", "赛事名称": "Name_of_event", "人群": "The_crowd", "成立时间": "_Other_Organiser", "比赛间隔年": "The_year_of_the_race", "比赛项目数量": "Number_of_competitions", "国家名称": "Country_Name", "赛事id": "Game_id", "冠军数量": "Number_of_champions", "中文名": "Chinese_Name", "性别": "Gender", "国籍": "Nationality", "出生日期": "Date_of_birth", "身高": "Height", "奥运会名称": "Name_of_Olympic_Games", "项目名称": "Title_of_the_project", "金牌获得者id": "Gold_medal_recipient_id", "银牌获得者id": "Silver_Card_Winner_id", "铜牌获得者id": "Copper_Card_Laureateid", "球员id": "Player_id", "冠军次数": "Number_of_champions", "亚军次数": "Number_of_military_units", "季军次数": "Number_of_seasoned_troops"}, "table_en": {"重要赛事": "It's_an_important_event", "冠军国家": "A_champion_country", "羽毛球球员": "Badminton_player", "奥运会冠亚军": "The_Olympic_champions", "球员夺冠次数": "Number_of_champions"}}, "理财公司": {"sqlite": "CREATE TABLE Financial management company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of company INTEGER, -- 公司名称\n   Other Organiser VARCHAR(50), -- 创立时间\n  Official Network DATETIME, -- 官网\n  Groups to which they belong VARCHAR(50), -- 所属集团\n);\nCREATE TABLE Bank (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n  City to which you belong VARCHAR(50), -- 所属城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n   Other Organiser VARCHAR(50), -- 成立时间\n  Type of company DATETIME, -- 公司类型\n);\nCREATE TABLE Financial Co-operative Bank (\n  Companyid VARCHAR(50) PRIMARY KEY, -- 公司id\n  Bankid INTEGER, -- 银行id\n  Time of cooperation INTEGER, -- 合作时间\n  Is there an electronic bank? DATETIME, -- 是否有电子银行\n);\nCREATE TABLE Property items (\n  Products BINARY PRIMARY KEY, -- 产品\n  Companyid VARCHAR(50), -- 公司id\n  Support bankid INTEGER, -- 支持银行id\n  Annualized rate of return INTEGER, -- 年化收益率\n  Duration INTEGER, -- 期限\n  Amount invested INTEGER, -- 起投金额\n);\n-- Financial Co-operative Bank.Bankid can be joined with Bank.Phrase id -- 理财公司合作银行.银行id 与 银行.词条id\n-- Property items.Support bankid can be joined with Bank.Phrase id -- 理财产品.支持银行id 与 银行.词条id\n-- Property items.Companyid can be joined with Financial management company.Phrase id -- 理财产品.公司id 与 理财公司.词条id\n-- Financial Co-operative Bank.Companyid can be joined with Financial management company.Phrase id -- 理财公司合作银行.公司id 与 理财公司.词条id", "columns_en": {"词条id": "Phrase_id", "公司名称": "Name_of_company", "创立时间": "_Other_Organiser", "官网": "Official_Network", "所属集团": "Groups_to_which_they_belong", "名称": "Name", "总部地点": "Headquarters_locations", "所属城市": "City_to_which_you_belong", "所属省份": "Provinces_to_which_they_belong", "成立时间": "_Other_Organiser", "公司类型": "Type_of_company", "公司id": "Companyid", "银行id": "Bankid", "合作时间": "Time_of_cooperation", "是否有电子银行": "Is_there_an_electronic_bank?", "产品": "Products", "支持银行id": "Support_bankid", "年化收益率": "Annualized_rate_of_return", "期限": "Duration", "起投金额": "Amount_invested"}, "table_en": {"理财公司": "Financial_management_company", "银行": "Bank", "理财公司合作银行": "Financial_Co-operative_Bank", "理财产品": "Property_items"}}, "城市活力研究": {"sqlite": "CREATE TABLE A hundred cities (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Urban INTEGER, -- 城市\n  Rank VARCHAR(50), -- 排名\n  Population appeal index INTEGER, -- 人口吸引力指数\n  Change in rankings by comparison INTEGER, -- 同比排名变化\n  Ring ranking changes INTEGER, -- 环比排名变化\n);\nCREATE TABLE Urban sources of population (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Population Source Provinces VARCHAR(50), -- 人口来源省份\n  Proportion of population inflow VARCHAR(50), -- 流入人口占比\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE The population goes to the city (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  The population goes to the provinces VARCHAR(50), -- 人口去向省份\n  Expatriate population as a percentage VARCHAR(50), -- 流出人口占比\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE Age of mobile population (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Age group DATETIME, -- 年龄段\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE Education of the migrant population (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Education DATETIME, -- 学历\n  Percentage VARCHAR(50), -- 占比\n);\nCREATE TABLE City bar vibrancy (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Number of bars VARCHAR(50), -- 酒吧数量\n  Rank INTEGER, -- 排名\n  Weekend passenger traffic INTEGER, -- 周末客流量\n  Holiday passenger traffic INTEGER, -- 节假日客流量\n  Regular passenger traffic INTEGER, -- 平日客流量\n);\nCREATE TABLE The age of the customer in the bar (\n  Client age group INTEGER PRIMARY KEY, -- 顾客年龄段\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE City food (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Food name VARCHAR(50), -- 美食名称\n  Search Index VARCHAR(50), -- 搜索指数\n  Watch your rankings INTEGER, -- 关注排名\n);\nCREATE TABLE Urban culture (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Cultural name INTEGER, -- 文化名称\n  Focus on the heat VARCHAR(50), -- 关注热度\n  Watch your rankings INTEGER, -- 关注排名\n);\n-- The population goes to the city.Urban id can be joined with A hundred cities.Phrase id -- 人口去向城市.城市id 与 百城.词条id\n-- Urban culture.Urban id can be joined with A hundred cities.Phrase id -- 城市文化.城市id 与 百城.词条id\n-- City bar vibrancy.Urban id can be joined with A hundred cities.Phrase id -- 城市酒吧活力.城市id 与 百城.词条id\n-- Urban sources of population.Urban id can be joined with A hundred cities.Phrase id -- 人口来源城市.城市id 与 百城.词条id\n-- City food.Urban id can be joined with A hundred cities.Phrase id -- 城市美食.城市id 与 百城.词条id", "columns_en": {"词条id": "Phrase_id", "城市": "Urban", "排名": "Rank", "人口吸引力指数": "Population_appeal_index", "同比排名变化": "Change_in_rankings_by_comparison", "环比排名变化": "Ring_ranking_changes", "城市id": "Urban_id", "人口来源省份": "Population_Source_Provinces", "流入人口占比": "Proportion_of_population_inflow", "人口去向省份": "The_population_goes_to_the_provinces", "流出人口占比": "Expatriate_population_as_a_percentage", "年份": "Year", "年龄段": "Age_group", "占比": "Percentage", "学历": "Education", "酒吧数量": "Number_of_bars", "周末客流量": "Weekend_passenger_traffic", "节假日客流量": "Holiday_passenger_traffic", "平日客流量": "Regular_passenger_traffic", "顾客年龄段": "Client_age_group", "美食名称": "Food_name", "搜索指数": "Search_Index", "关注排名": "Watch_your_rankings", "文化名称": "Cultural_name", "关注热度": "Focus_on_the_heat"}, "table_en": {"百城": "A_hundred_cities", "人口来源城市": "Urban_sources_of_population", "人口去向城市": "The_population_goes_to_the_city", "流动人口年龄": "Age_of_mobile_population", "流动人口学历": "Education_of_the_migrant_population", "城市酒吧活力": "City_bar_vibrancy", "酒吧顾客年龄": "The_age_of_the_customer_in_the_bar", "城市美食": "City_food", "城市文化": "Urban_culture"}}, "平台自制节目": {"sqlite": "CREATE TABLE Platform (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of the platform INTEGER, -- 平台名称\n  Annual contributions VARCHAR(50), -- 年会费\n  Quarterly contributions INTEGER, -- 季度会费\n  Monthly contributions INTEGER, -- 月会费\n  Emblems INTEGER, -- 口碑\n);\nCREATE TABLE Phenomenal programmes (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Fulfilling Name INTEGER, -- 综艺名称\n  Production companies VARCHAR(50), -- 制作公司\n  Platformid VARCHAR(50), -- 平台id\n  Term VARCHAR(50), -- 期数\n  Launch time INTEGER, -- 首播时间\n  Weekly airtime DATETIME, -- 每周播出时间\n  Broadcast Status VARCHAR(50), -- 播出状态\n);\nCREATE TABLE Artist (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationalities VARCHAR(50), -- 民族\n  Brokering companies VARCHAR(50), -- 经纪公司\n  Occupation VARCHAR(50), -- 职业\n);\nCREATE TABLE A program set (\n  Artist id VARCHAR(50) PRIMARY KEY, -- 艺人id\n  Leisure programme id INTEGER, -- 综艺节目id\n  Identity INTEGER, -- 身份\n  Participation period VARCHAR(50), -- 参加期数\n);\n-- A program set.Artist id can be joined with Artist.Phrase id -- 节目阵容.艺人id 与 艺人.词条id\n-- A program set.Leisure programme id can be joined with Phenomenal programmes.Phrase id -- 节目阵容.综艺节目id 与 综艺节目.词条id\n-- Phenomenal programmes.Platformid can be joined with Platform.Phrase id -- 综艺节目.平台id 与 平台.词条id", "columns_en": {"词条id": "Phrase_id", "平台名称": "Name_of_the_platform", "年会费": "Annual_contributions", "季度会费": "Quarterly_contributions", "月会费": "Monthly_contributions", "口碑": "Emblems", "综艺名称": "Fulfilling_Name", "制作公司": "Production_companies", "平台id": "Platformid", "期数": "Term", "首播时间": "Launch_time", "每周播出时间": "Weekly_airtime", "播出状态": "Broadcast_Status", "姓名": "Name", "民族": "Nationalities", "经纪公司": "Brokering_companies", "职业": "Occupation", "艺人id": "Artist_id", "综艺节目id": "Leisure_programme_id", "身份": "Identity", "参加期数": "Participation_period"}, "table_en": {"平台": "Platform", "综艺节目": "Phenomenal_programmes", "艺人": "Artist", "节目阵容": "A_program_set"}}, "医院": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Number of tri-a-hospitals VARCHAR(50), -- 三甲医院数量\n  Number of population INTEGER, -- 人口数量\n  Population share of older persons INTEGER, -- 老年人口占比\n);\nCREATE TABLE Hospital (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 所属城市id\n  Hospital level INTEGER, -- 医院等级\n  Number of employees INTEGER, -- 职工数量\n  Number of cadets INTEGER, -- 院士数量\n  Number of sections INTEGER, -- 科室数量\n  Number of priority specialties INTEGER, -- 重点专科数量\n);\nCREATE TABLE Hospital ranking (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Hospital id DATETIME, -- 医院id\n  Rank INTEGER, -- 排名\n  Number of patients received (millions) INTEGER, -- 接待病患数量(万人次)\n  Number of operations INTEGER, -- 手术数量\n);\nCREATE TABLE Specialties (\n  Section INTEGER PRIMARY KEY, -- 科室\n  Hospital id INTEGER, -- 医院id\n  Focus INTEGER, -- 是否重点\n  Research Centers BINARY, -- 是否研究中心\n);\n-- Hospital ranking.Hospital id can be joined with Hospital.Phrase id -- 医院排名.医院id 与 医院.词条id\n-- Specialties.Hospital id can be joined with Hospital.Phrase id -- 特色科室.医院id 与 医院.词条id\n-- Hospital. Other Organiser can be joined with Urban.Phrase id -- 医院.所属城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "三甲医院数量": "Number_of_tri-a-hospitals", "人口数量": "Number_of_population", "老年人口占比": "Population_share_of_older_persons", "所属城市id": "_Other_Organiser", "医院等级": "Hospital_level", "职工数量": "Number_of_employees", "院士数量": "Number_of_cadets", "科室数量": "Number_of_sections", "重点专科数量": "Number_of_priority_specialties", "年份": "Year", "医院id": "Hospital_id", "排名": "Rank", "接待病患数量(万人次)": "Number_of_patients_received_(millions)", "手术数量": "Number_of_operations", "科室": "Section", "是否重点": "Focus", "是否研究中心": "Research_Centers"}, "table_en": {"城市": "Urban", "医院": "Hospital", "医院排名": "Hospital_ranking", "特色科室": "Specialties"}}, "动物": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Climate zone VARCHAR(50), -- 气候地带\n  Country of nationality VARCHAR(50), -- 所属国家\n  The continent to which they belong VARCHAR(50), -- 所属洲\n);\nCREATE TABLE Animals (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Literary Name INTEGER, -- 中文学名\n  Outline of affiliation VARCHAR(50), -- 所属纲\n  Sections to which they belong VARCHAR(50), -- 所属科\n  Food VARCHAR(50), -- 食性\n  Level of exposure VARCHAR(50), -- 濒危级别\n  Protection level VARCHAR(50), -- 保护级别\n);\nCREATE TABLE Animal-distributed cities (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Urban id INTEGER, -- 城市id\n  Existing number INTEGER, -- 现存数量\n);\nCREATE TABLE Animal movies (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Video Name INTEGER, -- 影片名\n  Animal id VARCHAR(50), -- 动物id\n  Shooting Country INTEGER, -- 拍摄国家\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE An animal legend (\n  Animal id VARCHAR(50) PRIMARY KEY, -- 动物id\n  Fable INTEGER, -- 寓言故事\n  Image VARCHAR(50), -- 形象\n);\n-- Animal-distributed cities.Urban id can be joined with Urban.Phrase id -- 动物分布城市.城市id 与 城市.词条id\n-- Animal-distributed cities.Animal id can be joined with Animals.Phrase id -- 动物分布城市.动物id 与 动物.词条id\n-- Animal movies.Animal id can be joined with Animals.Phrase id -- 动物电影.动物id 与 动物.词条id\n-- An animal legend.Animal id can be joined with Animals.Phrase id -- 动物寓言故事.动物id 与 动物.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "气候地带": "Climate_zone", "所属国家": "Country_of_nationality", "所属洲": "The_continent_to_which_they_belong", "中文学名": "Chinese_Literary_Name", "所属纲": "Outline_of_affiliation", "所属科": "Sections_to_which_they_belong", "食性": "Food", "濒危级别": "Level_of_exposure", "保护级别": "Protection_level", "动物id": "Animal_id", "城市id": "Urban_id", "现存数量": "Existing_number", "影片名": "Video_Name", "拍摄国家": "Shooting_Country", "类型": "Type", "寓言故事": "Fable", "形象": "Image"}, "table_en": {"城市": "Urban", "动物": "Animals", "动物分布城市": "Animal-distributed_cities", "动物电影": "Animal_movies", "动物寓言故事": "An_animal_legend"}}, "招聘会和宣讲会": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Industry VARCHAR(50), -- 行业\n  Enrolment in schools VARCHAR(50), -- 校招人数\n);\nCREATE TABLE School (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 所在城市\n  Number of graduates VARCHAR(50), -- 毕业人数\n);\nCREATE TABLE School specializations (\n  School id INTEGER PRIMARY KEY, -- 学校id\n  Professional INTEGER, -- 专业\n  Number of graduates VARCHAR(50), -- 毕业人数\n  Professional national ranking INTEGER, -- 专业全国排名\n  Average salary INTEGER, -- 平均薪资\n);\nCREATE TABLE Corporate Counterpart Professionals (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Professional INTEGER, -- 专业\n  Counterpart posts VARCHAR(50), -- 对应岗位\n  Proposed recruitment VARCHAR(50), -- 拟招聘人数\n  Basic wage INTEGER, -- 基本工资\n  Level of wages INTEGER, -- 工资幅度\n);\nCREATE TABLE Company presentations (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  School id INTEGER, -- 学校id\n  Time for the lecture INTEGER, -- 宣讲时间\n  Proposed recruitment DATETIME, -- 拟招聘人数\n  Number of participants in written examinations INTEGER, -- 参加笔试人数\n  Number of persons interviewed INTEGER, -- 参加面试人数\n  Actual number of recruits INTEGER, -- 实际招聘人数\n);\n-- School specializations.School id can be joined with School.Phrase id -- 学校各专业.学校id 与 学校.词条id\n-- Corporate Counterpart Professionals.Companyid can be joined with Company.Phrase id -- 公司对口专业.公司id 与 公司.词条id\n-- Company presentations.Companyid can be joined with Company.Phrase id -- 公司宣讲会.公司id 与 公司.词条id\n-- Company presentations.School id can be joined with School.Phrase id -- 公司宣讲会.学校id 与 学校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "行业": "Industry", "校招人数": "Enrolment_in_schools", "所在城市": "It's_in_the_city", "毕业人数": "Number_of_graduates", "学校id": "School_id", "专业": "Professional", "专业全国排名": "Professional_national_ranking", "平均薪资": "Average_salary", "公司id": "Companyid", "对应岗位": "Counterpart_posts", "拟招聘人数": "Proposed_recruitment", "基本工资": "Basic_wage", "工资幅度": "Level_of_wages", "宣讲时间": "Time_for_the_lecture", "参加笔试人数": "Number_of_participants_in_written_examinations", "参加面试人数": "Number_of_persons_interviewed", "实际招聘人数": "Actual_number_of_recruits"}, "table_en": {"公司": "Company", "学校": "School", "学校各专业": "School_specializations", "公司对口专业": "Corporate_Counterpart_Professionals", "公司宣讲会": "Company_presentations"}}, "火车票预定": {"sqlite": "CREATE TABLE Train station (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  City to which you belong VARCHAR(50), -- 所属城市\n  Is there a subway station? VARCHAR(50), -- 是否有地铁站\n  Distance from airport BINARY, -- 距机场距离\n  Distance from bus station INTEGER, -- 距汽车站距离\n  It's downtown INTEGER, -- 距市中心距离\n);\nCREATE TABLE Train (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type VARCHAR(50), -- 类型\n  From station id VARCHAR(50), -- 始发站id\n  Arrival stationid INTEGER, -- 到达站id\n  Time to go INTEGER, -- 出发时间\n  Time of arrival DATETIME, -- 到达时间\n);\nCREATE TABLE The fare (\n  Date DATETIME PRIMARY KEY, -- 日期\n  Train id DATETIME, -- 列车id\n  Type of ticket INTEGER, -- 车票类型\n  Tickets VARCHAR(50), -- 票价\n  The rest of the tickets INTEGER, -- 余票\n);\n-- Train.From station id can be joined with Train station.Phrase id -- 列车.始发站id 与 火车站.词条id\n-- The fare.Train id can be joined with Train.Phrase id -- 列车票价.列车id 与 列车.词条id\n-- Train.Arrival stationid can be joined with Train station.Phrase id -- 列车.到达站id 与 火车站.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属城市": "City_to_which_you_belong", "是否有地铁站": "Is_there_a_subway_station?", "距机场距离": "Distance_from_airport", "距汽车站距离": "Distance_from_bus_station", "距市中心距离": "It's_downtown", "类型": "Type", "始发站id": "From_station_id", "到达站id": "Arrival_stationid", "出发时间": "Time_to_go", "到达时间": "Time_of_arrival", "日期": "Date", "列车id": "Train_id", "车票类型": "Type_of_ticket", "票价": "Tickets", "余票": "The_rest_of_the_tickets"}, "table_en": {"火车站": "Train_station", "列车": "Train", "列车票价": "The_fare"}}, "豆瓣读书": {"sqlite": "CREATE TABLE Books (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Author VARCHAR(50), -- 作者\n  Nationality of authors VARCHAR(50), -- 作者国籍\n  Bean petals VARCHAR(50), -- 豆瓣评分\n  Number of evaluations INTEGER, -- 评价人数\n  5-star ratio INTEGER, -- 5星占比\n  1 asterisk ratio INTEGER, -- 1星占比\n);\nCREATE TABLE High score book list (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Book id DATETIME, -- 书籍id\n  Rating INTEGER, -- 评分\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE Top-of-the-line book list (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Book id DATETIME, -- 书籍id\n   Other Organiser INTEGER, -- 关注数\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE Best-selling book list (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Book id DATETIME, -- 书籍id\n  Purchases INTEGER, -- 购买数\n  Rank INTEGER, -- 排名\n);\nCREATE TABLE Purchase of platforms (\n  Book id INTEGER PRIMARY KEY, -- 书籍id\n  Platform INTEGER, -- 平台\n  Price of sale VARCHAR(50), -- 售价\n  Is there a shipment? INTEGER, -- 是否有货\n);\n-- Top-of-the-line book list.Book id can be joined with Books.Phrase id -- 最受关注图书榜单.书籍id 与 书籍.词条id\n-- Purchase of platforms.Book id can be joined with Books.Phrase id -- 购买平台.书籍id 与 书籍.词条id\n-- High score book list.Book id can be joined with Books.Phrase id -- 高分图书榜单.书籍id 与 书籍.词条id\n-- Best-selling book list.Book id can be joined with Books.Phrase id -- 最畅销图书榜单.书籍id 与 书籍.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "作者": "Author", "作者国籍": "Nationality_of_authors", "豆瓣评分": "Bean_petals", "评价人数": "Number_of_evaluations", "5星占比": "5-star_ratio", "1星占比": "1_asterisk_ratio", "年份": "Year", "书籍id": "Book_id", "评分": "Rating", "排名": "Rank", "关注数": "_Other_Organiser", "购买数": "Purchases", "平台": "Platform", "售价": "Price_of_sale", "是否有货": "Is_there_a_shipment?"}, "table_en": {"书籍": "Books", "高分图书榜单": "High_score_book_list", "最受关注图书榜单": "Top-of-the-line_book_list", "最畅销图书榜单": "Best-selling_book_list", "购买平台": "Purchase_of_platforms"}}, "空调": {"sqlite": "CREATE TABLE Air conditioner brand (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  National VARCHAR(50), -- 国家\n  Asian ranking of enterprises VARCHAR(50), -- 亚洲企业排名\n  China’s Listed Companies INTEGER, -- 中国上市公司排名\n);\nCREATE TABLE Air conditioner type (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Gross weight VARCHAR(50), -- 毛重\n  Frequency type INTEGER, -- 频数类型\n  Punctuation VARCHAR(50), -- 匹数\n  Category INTEGER, -- 类别\n  Use VARCHAR(50), -- 用途\n  Refrigeration VARCHAR(50), -- 制冷量\n  Heat-making INTEGER, -- 制热量\n  Pricing INTEGER, -- 定价\n  Refrigerants INTEGER, -- 制冷剂\n  Brandid VARCHAR(50), -- 品牌id\n);\nCREATE TABLE Pixmap equivalencies (\n  Punctuation INTEGER PRIMARY KEY, -- 匹数\n  Minimum Area INTEGER, -- 最小面积\n  Maximum area INTEGER, -- 最大面积\n);\nCREATE TABLE Air conditioners are sold quarterly (\n  Model id INTEGER PRIMARY KEY, -- 型号id\n  Quarterly INTEGER, -- 季度\n  Price of sale VARCHAR(50), -- 售价\n  Maximum price INTEGER, -- 最高价格\n  Minimum price INTEGER, -- 最低价格\n  Sales INTEGER, -- 售卖量\n);\nCREATE TABLE Air conditioners are sold in cities (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Air conditioner sales VARCHAR(50), -- 空调售卖量\n  Average air-conditioning hours per day INTEGER, -- 空调日平均用时\n);\n-- Air conditioners are sold quarterly.Model id can be joined with Air conditioner type.Phrase id -- 空调各季度售卖.型号id 与 空调型号.词条id\n-- Air conditioner type.Brandid can be joined with Air conditioner brand.Phrase id -- 空调型号.品牌id 与 空调品牌.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属公司": "Company_to_which_it_belongs", "国家": "National", "亚洲企业排名": "Asian_ranking_of_enterprises", "中国上市公司排名": "China’s_Listed_Companies", "毛重": "Gross_weight", "频数类型": "Frequency_type", "匹数": "Punctuation", "类别": "Category", "用途": "Use", "制冷量": "Refrigeration", "制热量": "Heat-making", "定价": "Pricing", "制冷剂": "Refrigerants", "品牌id": "Brandid", "最小面积": "Minimum_Area", "最大面积": "Maximum_area", "型号id": "Model_id", "季度": "Quarterly", "售价": "Price_of_sale", "最高价格": "Maximum_price", "最低价格": "Minimum_price", "售卖量": "Sales", "城市": "Urban", "空调售卖量": "Air_conditioner_sales", "空调日平均用时": "Average_air-conditioning_hours_per_day"}, "table_en": {"空调品牌": "Air_conditioner_brand", "空调型号": "Air_conditioner_type", "匹数对应面积": "Pixmap_equivalencies", "空调各季度售卖": "Air_conditioners_are_sold_quarterly", "空调各城市售卖": "Air_conditioners_are_sold_in_cities"}}, "机票预定": {"sqlite": "CREATE TABLE Airlines (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of open cities in the country VARCHAR(50), -- 国内通航城市数量\n  Number of cities served by international navigation INTEGER, -- 国际通航城市数量\n  Fleet size INTEGER, -- 机队规模\n  Number of passengers transported INTEGER, -- 运送旅客人数\n  Aircraft meal user satisfaction INTEGER, -- 飞机餐用户满意度\n);\nCREATE TABLE Airport (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n  Number of slots VARCHAR(50), -- 机位数量\n  runway length INTEGER, -- 跑道长度\n  Number of runways INTEGER, -- 跑道数量\n  Number of domestic routes INTEGER, -- 国内航线数量\n  Number of international routes INTEGER, -- 国际航线数量\n  The navigable city INTEGER, -- 通航城市\n  Passenger ingestion INTEGER, -- 旅客吞量\n  Number of terminals INTEGER, -- 航站楼数量\n);\nCREATE TABLE Airline main operating base (\n  Airlineid INTEGER PRIMARY KEY, -- 航空公司id\n  Airportd INTEGER, -- 机场id\n);\nCREATE TABLE Airline fleet (\n  Airlineid INTEGER PRIMARY KEY, -- 航空公司id\n  Type of aircraft INTEGER, -- 飞机型号\n  Number VARCHAR(50), -- 数量\n);\nCREATE TABLE Flight Information (\n  Date INTEGER PRIMARY KEY, -- 日期\n  Departure from airport id DATETIME, -- 出发机场id\n  Arrival at airport id INTEGER, -- 到达机场id\n  Time of departure INTEGER, -- 起飞时间\n  Flight number DATETIME, -- 航班号\n  Airlineid VARCHAR(50), -- 航空公司id\n  Age of flight INTEGER, -- 机龄\n  Economy class price INTEGER, -- 经济舱价格\n  First-class fare INTEGER, -- 头等舱价格\n  The rest of the economy INTEGER, -- 经济舱余票\n  First-class tickets INTEGER, -- 头等舱余票\n  Time spent INTEGER, -- 历经时间\n);\n-- Airline fleet.Airlineid can be joined with Airlines.Phrase id -- 航空公司机队.航空公司id 与 航空公司.词条id\n-- Airline main operating base.Airportd can be joined with Airport.Phrase id -- 航空公司主运营基地.机场id 与 机场.词条id\n-- Airline main operating base.Airlineid can be joined with Airlines.Phrase id -- 航空公司主运营基地.航空公司id 与 航空公司.词条id\n-- Flight Information.Arrival at airport id can be joined with Airport.Phrase id -- 航班信息.到达机场id 与 机场.词条id\n-- Flight Information.Departure from airport id can be joined with Airport.Phrase id -- 航班信息.出发机场id 与 机场.词条id\n-- Flight Information.Airlineid can be joined with Airlines.Phrase id -- 航班信息.航空公司id 与 航空公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "国内通航城市数量": "Number_of_open_cities_in_the_country", "国际通航城市数量": "Number_of_cities_served_by_international_navigation", "机队规模": "Fleet_size", "运送旅客人数": "Number_of_passengers_transported", "飞机餐用户满意度": "Aircraft_meal_user_satisfaction", "所属地区": "Territory_to_which_it_belongs", "机位数量": "Number_of_slots", "跑道长度": "runway_length", "跑道数量": "Number_of_runways", "国内航线数量": "Number_of_domestic_routes", "国际航线数量": "Number_of_international_routes", "通航城市": "The_navigable_city", "旅客吞量": "Passenger_ingestion", "航站楼数量": "Number_of_terminals", "航空公司id": "Airlineid", "机场id": "Airportd", "飞机型号": "Type_of_aircraft", "数量": "Number", "日期": "Date", "出发机场id": "Departure_from_airport_id", "到达机场id": "Arrival_at_airport_id", "起飞时间": "Time_of_departure", "航班号": "Flight_number", "机龄": "Age_of_flight", "经济舱价格": "Economy_class_price", "头等舱价格": "First-class_fare", "经济舱余票": "The_rest_of_the_economy", "头等舱余票": "First-class_tickets", "历经时间": "Time_spent"}, "table_en": {"航空公司": "Airlines", "机场": "Airport", "航空公司主运营基地": "Airline_main_operating_base", "航空公司机队": "Airline_fleet", "航班信息": "Flight_Information"}}, "明星与经纪公司": {"sqlite": "CREATE TABLE Brokering companies (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of company INTEGER, -- 公司名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Registered capital DATETIME, -- 注册资本\n);\nCREATE TABLE Star (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Broker company of which he is a memberd VARCHAR(50), -- 所属经纪公司id\n  Add Time INTEGER, -- 加入时间\n  Time of release DATETIME, -- 解约时间\n);\nCREATE TABLE Brokers (\n  Phrase id DATETIME PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n);\nCREATE TABLE Stars and brokers (\n  Starid DATETIME PRIMARY KEY, -- 明星id\n  Brokerid INTEGER, -- 经纪人id\n  Years of cooperation INTEGER, -- 合作年数\n);\n-- Stars and brokers.Starid can be joined with Star.Phrase id -- 明星与经纪人.明星id 与 明星.词条id\n-- Star.Broker company of which he is a memberd can be joined with Brokering companies.Phrase id -- 明星.所属经纪公司id 与 经纪公司.词条id\n-- Stars and brokers.Brokerid can be joined with Brokers.Phrase id -- 明星与经纪人.经纪人id 与 经纪人.词条id", "columns_en": {"词条id": "Phrase_id", "公司名称": "Name_of_company", "成立时间": "_Other_Organiser", "注册资本": "Registered_capital", "姓名": "Name", "所属经纪公司id": "Broker_company_of_which_he_is_a_memberd", "加入时间": "Add_Time", "解约时间": "Time_of_release", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "明星id": "Starid", "经纪人id": "Brokerid", "合作年数": "Years_of_cooperation"}, "table_en": {"经纪公司": "Brokering_companies", "明星": "Star", "经纪人": "Brokers", "明星与经纪人": "Stars_and_brokers"}}, "中国体育场馆": {"sqlite": "CREATE TABLE Stadium (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Area VARCHAR(50), -- 面积\n  Number of persons accommodated INTEGER, -- 容纳人数\n  It's in the city INTEGER, -- 所在城市\n);\nCREATE TABLE Chinese sports events (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Heat VARCHAR(50), -- 热度\n  Commercial value INTEGER, -- 商业价值\n  Impact INTEGER, -- 影响力\n);\nCREATE TABLE It's a special event in 2018 (\n  Name of event INTEGER PRIMARY KEY, -- 赛事名称\n  Race Typeid VARCHAR(50), -- 赛事类型id\n  Field id INTEGER, -- 场馆id\n  Time INTEGER, -- 时间\n  Number of viewers DATETIME, -- 观众人数\n);\nCREATE TABLE The 2018 concert (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Singer VARCHAR(50), -- 歌手\n  Field id VARCHAR(50), -- 场馆id\n  Time INTEGER, -- 时间\n  Minimum fare DATETIME, -- 最低票价\n);\n-- The 2018 concert.Field id can be joined with Stadium.Phrase id -- 2018年演唱会.场馆id 与 体育场.词条id\n-- It's a special event in 2018.Field id can be joined with Stadium.Phrase id -- 2018年具体赛事.场馆id 与 体育场.词条id\n-- It's a special event in 2018.Race Typeid can be joined with Chinese sports events.Phrase id -- 2018年具体赛事.赛事类型id 与 中国体育赛事.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "面积": "Area", "容纳人数": "Number_of_persons_accommodated", "所在城市": "It's_in_the_city", "热度": "Heat", "商业价值": "Commercial_value", "影响力": "Impact", "赛事名称": "Name_of_event", "赛事类型id": "Race_Typeid", "场馆id": "Field_id", "时间": "Time", "观众人数": "Number_of_viewers", "歌手": "Singer", "最低票价": "Minimum_fare"}, "table_en": {"体育场": "Stadium", "中国体育赛事": "Chinese_sports_events", "2018年具体赛事": "It's_a_special_event_in_2018", "2018年演唱会": "The_2018_concert"}}, "影视企业": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n   Other Organiser VARCHAR(50), -- 成立时间\n  Officer-in-Charge DATETIME, -- 负责人\n  Rank VARCHAR(50), -- 排名\n);\nCREATE TABLE Film (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Video Name INTEGER, -- 影片名\n  Show time VARCHAR(50), -- 上映时间\n  Ticket room DATETIME, -- 票房\n);\nCREATE TABLE It's a movie by a video company (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Film id INTEGER, -- 电影id\n  Percentage of investments INTEGER, -- 投资比例\n);\n-- It's a movie by a video company.Film id can be joined with Film.Phrase id -- 影视公司拍摄的电影.电影id 与 电影.词条id\n-- It's a movie by a video company.Companyid can be joined with Company.Phrase id -- 影视公司拍摄的电影.公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立时间": "_Other_Organiser", "负责人": "Officer-in-Charge", "排名": "Rank", "影片名": "Video_Name", "上映时间": "Show_time", "票房": "Ticket_room", "公司id": "Companyid", "电影id": "Film_id", "投资比例": "Percentage_of_investments"}, "table_en": {"公司": "Company", "电影": "Film", "影视公司拍摄的电影": "It's_a_movie_by_a_video_company"}}, "中国基础设施": {"sqlite": "CREATE TABLE Urban water supply production capacity in China (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Water supply generation capacity DATETIME, -- 供水生成能力\n  Length of water pipelines INTEGER, -- 供水管道长度\n  Total water supply INTEGER, -- 供水总量\n  Water supply growth rate INTEGER, -- 供水量增长率\n  Water supply for living use INTEGER, -- 生活用水供水量\n  Production of water and water supply INTEGER, -- 生产用水供水量\n  Population using water INTEGER, -- 用水人口\n  The water population is growing on a year-on-year basis INTEGER, -- 用水人口同比增长\n  Water for daily life per capita INTEGER, -- 人均日生活用水量\n  Increase in water use per capita INTEGER, -- 人均用水量同比增长\n);\nCREATE TABLE Power generation and consumption in China (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Power generation DATETIME, -- 发电量\n  Electricity consumption INTEGER, -- 电力消费\n);\nCREATE TABLE China ' s electricity structure and power generation (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Type of power generation DATETIME, -- 发电类型\n  Power generation VARCHAR(50), -- 发电量\n);\nCREATE TABLE China ' s power loading capacity (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Type of power generation DATETIME, -- 发电类型\n  Add Load (MW) VARCHAR(50), -- 新增装机量(MW)\n  Cumulative load (MW) INTEGER, -- 累计装机量(MW)\n);\nCREATE TABLE Electricity generation and consumption in the provinces (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Power generation (millions of kilowatt hours) VARCHAR(50), -- 发电量(亿千瓦小时)\n  Electricity consumption (billion kWh) INTEGER, -- 电力消费(亿千瓦小时)\n);\nCREATE TABLE Biomass power generation in the provinces (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Accumulated grid capacity (thousands of kilowatts) VARCHAR(50), -- 累计并网装机容量(万千瓦)\n  Biomass power generation in agriculture and forestry (billion kWh) INTEGER, -- 农林生物质发电量(亿千瓦小时)\n  Incineration of electricity from domestic waste (millions of kilowatt-hours) INTEGER, -- 生活垃圾焚烧发电量(亿千瓦小时)\n  Biogas power generation (billion kWh) INTEGER, -- 沼气发电量(亿千瓦小时)\n);\n", "columns_en": {"年份": "Year", "供水生成能力": "Water_supply_generation_capacity", "供水管道长度": "Length_of_water_pipelines", "供水总量": "Total_water_supply", "供水量增长率": "Water_supply_growth_rate", "生活用水供水量": "Water_supply_for_living_use", "生产用水供水量": "Production_of_water_and_water_supply", "用水人口": "Population_using_water", "用水人口同比增长": "The_water_population_is_growing_on_a_year-on-year_basis", "人均日生活用水量": "Water_for_daily_life_per_capita", "人均用水量同比增长": "Increase_in_water_use_per_capita", "发电量": "Power_generation", "电力消费": "Electricity_consumption", "发电类型": "Type_of_power_generation", "新增装机量(MW)": "Add_Load_(MW)", "累计装机量(MW)": "Cumulative_load_(MW)", "省份": "Province", "发电量(亿千瓦小时)": "Power_generation_(millions_of_kilowatt_hours)", "电力消费(亿千瓦小时)": "Electricity_consumption_(billion_kWh)", "累计并网装机容量(万千瓦)": "Accumulated_grid_capacity_(thousands_of_kilowatts)", "农林生物质发电量(亿千瓦小时)": "Biomass_power_generation_in_agriculture_and_forestry_(billion_kWh)", "生活垃圾焚烧发电量(亿千瓦小时)": "Incineration_of_electricity_from_domestic_waste_(millions_of_kilowatt-hours)", "沼气发电量(亿千瓦小时)": "Biogas_power_generation_(billion_kWh)"}, "table_en": {"中国城市供水生产能力": "Urban_water_supply_production_capacity_in_China", "中国发电量及电力消费量": "Power_generation_and_consumption_in_China", "中国电力结构及发电量": "China_'_s_electricity_structure_and_power_generation", "中国电力装机量": "China_'_s_power_loading_capacity", "各省发电量及电力消费量": "Electricity_generation_and_consumption_in_the_provinces", "各省生物质发电量": "Biomass_power_generation_in_the_provinces"}}, "卫视播放节目": {"sqlite": "CREATE TABLE Watch the TV show (\n  Guards VARCHAR(50) PRIMARY KEY, -- 卫视\n  It's a TV show VARCHAR(50), -- 电视剧名\n  Date VARCHAR(50), -- 日期\n  Playtime DATETIME, -- 播放时间\n  Collections DATETIME, -- 集数\n);\nCREATE TABLE Xiao Xiao Xiao Xiao Xiao Xing (\n  Guards INTEGER PRIMARY KEY, -- 卫视\n  Program Name VARCHAR(50), -- 节目名\n  Date VARCHAR(50), -- 日期\n  Playtime DATETIME, -- 播放时间\n  Term DATETIME, -- 期数\n);\nCREATE TABLE View Columns (\n  Channel INTEGER PRIMARY KEY, -- 频道\n  Column Name VARCHAR(50), -- 栏目名\n  Type VARCHAR(50), -- 类型\n  Date VARCHAR(50), -- 日期\n  Playtime DATETIME, -- 播放时间\n);\nCREATE TABLE Payment fields (\n  Channel DATETIME PRIMARY KEY, -- 频道\n  Column Name VARCHAR(50), -- 栏目名\n  Type VARCHAR(50), -- 类型\n  Date VARCHAR(50), -- 日期\n  Playtime DATETIME, -- 播放时间\n  Costs DATETIME, -- 费用\n);\n", "columns_en": {"卫视": "Guards", "电视剧名": "It's_a_TV_show", "日期": "Date", "播放时间": "Playtime", "集数": "Collections", "节目名": "Program_Name", "期数": "Term", "频道": "Channel", "栏目名": "Column_Name", "类型": "Type", "费用": "Costs"}, "table_en": {"卫视电视剧": "Watch_the_TV_show", "卫视综艺节目": "Xiao_Xiao_Xiao_Xiao_Xiao_Xing", "央视栏目": "View_Columns", "付费栏目": "Payment_fields"}}, "北京驾校": {"sqlite": "CREATE TABLE Heading school (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of driving school INTEGER, -- 驾校名称\n  The driving address VARCHAR(50), -- 驾校地址\n  Sign up the phone VARCHAR(50), -- 报名电话\n  Number of vehicles INTEGER, -- 车辆数量\n  Number of coaches INTEGER, -- 教练数量\n  Number of bus stops INTEGER, -- 班车点数量\n  Number of participants INTEGER, -- 学员数量\n);\nCREATE TABLE I'm driving class (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Class name INTEGER, -- 班型名称\n  Type of driver ' s licence VARCHAR(50), -- 驾照类型\n  Testimonial time VARCHAR(50), -- 拿证时间\n);\nCREATE TABLE School driving costs (\n  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray INTEGER PRIMARY KEY, -- 班型id\n  School id INTEGER, -- 学校id\n  Costs INTEGER, -- 费用\n);\n-- School driving costs.School id can be joined with Heading school.Phrase id -- 驾校费用.学校id 与 驾校.词条id\n-- School driving costs.X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray  X-ray can be joined with I'm driving class.Phrase id -- 驾校费用.班型id 与 驾校班型.词条id", "columns_en": {"词条id": "Phrase_id", "驾校名称": "Name_of_driving_school", "驾校地址": "The_driving_address", "报名电话": "Sign_up_the_phone", "车辆数量": "Number_of_vehicles", "教练数量": "Number_of_coaches", "班车点数量": "Number_of_bus_stops", "学员数量": "Number_of_participants", "班型名称": "Class_name", "驾照类型": "Type_of_driver_'_s_licence", "拿证时间": "Testimonial_time", "班型id": "X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray__X-ray", "学校id": "School_id", "费用": "Costs"}, "table_en": {"驾校": "Heading_school", "驾校班型": "I'm_driving_class", "驾校费用": "School_driving_costs"}}, "城市消费": {"sqlite": "CREATE TABLE 40-city consumer power ranking (\n  Urban VARCHAR(50) PRIMARY KEY, -- 城市\n  Where are you from? VARCHAR(50), -- 所在省份\n  Total social expenditure (millions) VARCHAR(50), -- 社消总额(亿)\n  Total ranking INTEGER, -- 总额排名\n  Speed up INTEGER, -- 增速\n  Speed up the rankings INTEGER, -- 增速排名\n  Social deprivation per capita (millions) INTEGER, -- 人均社消(万)\n  Total GDP (millions) INTEGER, -- 总GDP(亿)\n  GDP per capita (millions) INTEGER, -- 人均GDP(万)\n  Resident population (millions) INTEGER, -- 常住人口(万)\n  Reference house price INTEGER, -- 参考房价\n);\nCREATE TABLE Consumption structure of cities (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Per capita disposable income VARCHAR(50), -- 人均可支配收入\n  Share of catering consumption INTEGER, -- 餐饮消费占比\n  Proportion of consumption of luxury goods INTEGER, -- 奢侈品消费占比\n  Tourism as a percentage INTEGER, -- 旅游占比\n  Net purchase consumption per capita INTEGER, -- 人均网购消费额\n  Share of consumption of electronics INTEGER, -- 电子产品消费占比\n);\nCREATE TABLE Ecocivilization consumption (\n  Environmentally friendly consumer goods INTEGER PRIMARY KEY, -- 环保消费品\n  Growth rate VARCHAR(50), -- 增长率\n);\nCREATE TABLE Brand consumption (\n  Brand INTEGER PRIMARY KEY, -- 品牌\n  Type VARCHAR(50), -- 类型\n  Proportion of sales VARCHAR(50), -- 销量占比\n  Sales ranking INTEGER, -- 销量排名\n);\nCREATE TABLE Growth in consumption of commodity groups (\n  Category INTEGER PRIMARY KEY, -- 种类\n  Growth in 2013 VARCHAR(50), -- 2013年增速\n  Growth in 2015 INTEGER, -- 2015年增速\n  It's going up in 2017 INTEGER, -- 2017年增速\n);\n", "columns_en": {"城市": "Urban", "所在省份": "Where_are_you_from?", "社消总额(亿)": "Total_social_expenditure_(millions)", "总额排名": "Total_ranking", "增速": "Speed_up", "增速排名": "Speed_up_the_rankings", "人均社消(万)": "Social_deprivation_per_capita_(millions)", "总GDP(亿)": "Total_GDP_(millions)", "人均GDP(万)": "GDP_per_capita_(millions)", "常住人口(万)": "Resident_population_(millions)", "参考房价": "Reference_house_price", "人均可支配收入": "Per_capita_disposable_income", "餐饮消费占比": "Share_of_catering_consumption", "奢侈品消费占比": "Proportion_of_consumption_of_luxury_goods", "旅游占比": "Tourism_as_a_percentage", "人均网购消费额": "Net_purchase_consumption_per_capita", "电子产品消费占比": "Share_of_consumption_of_electronics", "环保消费品": "Environmentally_friendly_consumer_goods", "增长率": "Growth_rate", "品牌": "Brand", "类型": "Type", "销量占比": "Proportion_of_sales", "销量排名": "Sales_ranking", "种类": "Category", "2013年增速": "Growth_in_2013", "2015年增速": "Growth_in_2015", "2017年增速": "It's_going_up_in_2017"}, "table_en": {"40城消费力排名": "40-city_consumer_power_ranking", "各城市消费结构": "Consumption_structure_of_cities", "生态文明消费": "Ecocivilization_consumption", "品牌消费": "Brand_consumption", "商品种类消费增速": "Growth_in_consumption_of_commodity_groups"}}, "公司收购": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  Number of employees DATETIME, -- 员工数量\n  Market value INTEGER, -- 市值\n);\nCREATE TABLE Acquisitions (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Purchased companyid INTEGER, -- 被收购公司id\n  Time INTEGER, -- 时间\n  Acquisition modalities DATETIME, -- 收购方式\n  Acquisition of funds VARCHAR(50), -- 收购资金\n);\nCREATE TABLE Investment companies (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  ♪ By an investment company ♪ INTEGER, -- 被投资公司id\n  Time INTEGER, -- 时间\n  Investment funds DATETIME, -- 投资资金\n  Shares INTEGER, -- 股权占比\n);\nCREATE TABLE Mergers and acquisitions (\n  Main firmid INTEGER PRIMARY KEY, -- 主公司id\n  Mergers and acquisitionsd INTEGER, -- 并购公司id\n  Shares in the main company INTEGER, -- 主公司股权占比\n  Shares in M & A companies INTEGER, -- 并购公司股权占比\n);\n-- Acquisitions.Purchased companyid can be joined with Company.Phrase id -- 收购的公司.被收购公司id 与 公司.词条id\n-- Mergers and acquisitions.Mergers and acquisitionsd can be joined with Company.Phrase id -- 并购的公司.并购公司id 与 公司.词条id\n-- Acquisitions.Companyid can be joined with Company.Phrase id -- 收购的公司.公司id 与 公司.词条id\n-- Investment companies.Companyid can be joined with Company.Phrase id -- 投资的公司.公司id 与 公司.词条id\n-- Mergers and acquisitions.Main firmid can be joined with Company.Phrase id -- 并购的公司.主公司id 与 公司.词条id\n-- Investment companies.♪ By an investment company ♪ can be joined with Company.Phrase id -- 投资的公司.被投资公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "员工数量": "Number_of_employees", "市值": "Market_value", "公司id": "Companyid", "被收购公司id": "Purchased_companyid", "时间": "Time", "收购方式": "Acquisition_modalities", "收购资金": "Acquisition_of_funds", "被投资公司id": "♪_By_an_investment_company_♪", "投资资金": "Investment_funds", "股权占比": "Shares", "主公司id": "Main_firmid", "并购公司id": "Mergers_and_acquisitionsd", "主公司股权占比": "Shares_in_the_main_company", "并购公司股权占比": "Shares_in_M_&_A_companies"}, "table_en": {"公司": "Company", "收购的公司": "Acquisitions", "投资的公司": "Investment_companies", "并购的公司": "Mergers_and_acquisitions"}}, "酒店预订": {"sqlite": "CREATE TABLE Hotel (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n  Distance from train station VARCHAR(50), -- 距火车站距离\n  Distance from airport INTEGER, -- 距机场距离\n  Distance from bus station INTEGER, -- 距汽车站距离\n  It's downtown INTEGER, -- 距市中心距离\n  Perimeter sites INTEGER, -- 周围景点数\n  Number of hotels around INTEGER, -- 周围饭店数量\n);\nCREATE TABLE Hotel traffic (\n  Hotel id INTEGER PRIMARY KEY, -- 酒店id\n  Subway INTEGER, -- 地铁线路\n  Name of subway station VARCHAR(50), -- 地铁站名称\n  Walking distance VARCHAR(50), -- 步行距离\n);\nCREATE TABLE Hotel room (\n  Hotel id INTEGER PRIMARY KEY, -- 酒店id\n  Room type INTEGER, -- 房型\n  Breakfast VARCHAR(50), -- 早餐\n  Prices BINARY, -- 价格\n  Number of rooms remaining INTEGER, -- 剩余房间数\n);\n-- Hotel room.Hotel id can be joined with Hotel.Phrase id -- 酒店客房.酒店id 与 酒店.词条id\n-- Hotel traffic.Hotel id can be joined with Hotel.Phrase id -- 酒店交通.酒店id 与 酒店.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "地址": "Address", "距火车站距离": "Distance_from_train_station", "距机场距离": "Distance_from_airport", "距汽车站距离": "Distance_from_bus_station", "距市中心距离": "It's_downtown", "周围景点数": "Perimeter_sites", "周围饭店数量": "Number_of_hotels_around", "酒店id": "Hotel_id", "地铁线路": "Subway", "地铁站名称": "Name_of_subway_station", "步行距离": "Walking_distance", "房型": "Room_type", "早餐": "Breakfast", "价格": "Prices", "剩余房间数": "Number_of_rooms_remaining"}, "table_en": {"酒店": "Hotel", "酒店交通": "Hotel_traffic", "酒店客房": "Hotel_room"}}, "NBA篮球": {"sqlite": "CREATE TABLE Basketball player (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Nationality VARCHAR(50), -- 国籍\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Height DATETIME, -- 身高\n  body weight INTEGER, -- 体重\n  Graduate schools INTEGER, -- 毕业院校\n  Field position VARCHAR(50), -- 场上位置\n);\nCREATE TABLE It's a game house (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of persons accommodated VARCHAR(50), -- 容纳人数\n);\nCREATE TABLE Basketball Club (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Chinese Team Name INTEGER, -- 中文队名\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n   Other Organiser VARCHAR(50), -- 成立时间\n  Main complexid DATETIME, -- 主场馆id\n  Chai District INTEGER, -- 赛区\n);\nCREATE TABLE Active club player (\n  Player id VARCHAR(50) PRIMARY KEY, -- 球员id\n  Club id INTEGER, -- 俱乐部id\n  Field position INTEGER, -- 场上位置\n  {\\bord0\\shad0\\alphaH3D}The {\\cHFFFFFF}{\\cH00FFFF} {\\cHFFFFFF}{\\cH00FFFF} {\\cHFFFFFF}{\\cH00FFFF} {\\cHFFFFFF}{\\cH00FFFF} VARCHAR(50), -- 球衣号码\n  ♪ Is the main force ♪ INTEGER, -- 是否主力\n);\nCREATE TABLE Sportsmen's turn (\n  Athlete id BINARY PRIMARY KEY, -- 运动员id\n  Club id INTEGER, -- 俱乐部id\n  Date of accession INTEGER, -- 加入日期\n  Time of service DATETIME, -- 服役时间\n  Number INTEGER, -- 号码\n  Salaries INTEGER, -- 薪资\n);\nCREATE TABLE Coach (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Nationality VARCHAR(50), -- 国籍\n  Graduate schools VARCHAR(50), -- 毕业院校\n  I've been teaching for a long time VARCHAR(50), -- 执教时长\n  Annual salary INTEGER, -- 年薪\n);\nCREATE TABLE Coach of the club (\n  Coach id INTEGER PRIMARY KEY, -- 教练id\n  Club id INTEGER, -- 俱乐部id\n  Date of accession INTEGER, -- 加入日期\n  Identity DATETIME, -- 身份\n);\n-- Coach of the club.Coach id can be joined with Coach.Phrase id -- 俱乐部教练.教练id 与 教练.词条id\n-- Basketball Club.Main complexid can be joined with It's a game house.Phrase id -- 篮球俱乐部.主场馆id 与 比赛场馆.词条id\n-- Sportsmen's turn.Club id can be joined with Basketball Club.Phrase id -- 运动员转会.俱乐部id 与 篮球俱乐部.词条id\n-- Active club player.Player id can be joined with Basketball player.Phrase id -- 俱乐部现役球员.球员id 与 篮球运动员.词条id\n-- Coach of the club.Club id can be joined with Basketball Club.Phrase id -- 俱乐部教练.俱乐部id 与 篮球俱乐部.词条id\n-- Sportsmen's turn.Athlete id can be joined with Basketball player.Phrase id -- 运动员转会.运动员id 与 篮球运动员.词条id\n-- Active club player.Club id can be joined with Basketball Club.Phrase id -- 俱乐部现役球员.俱乐部id 与 篮球俱乐部.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "国籍": "Nationality", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "身高": "Height", "体重": "body_weight", "毕业院校": "Graduate_schools", "场上位置": "Field_position", "名称": "Name", "容纳人数": "Number_of_persons_accommodated", "中文队名": "Chinese_Team_Name", "所属地区": "Territory_to_which_it_belongs", "成立时间": "_Other_Organiser", "主场馆id": "Main_complexid", "赛区": "Chai_District", "球员id": "Player_id", "俱乐部id": "Club_id", "球衣号码": "{\\bord0\\shad0\\alphaH3D}The_{\\cHFFFFFF}{\\cH00FFFF}_{\\cHFFFFFF}{\\cH00FFFF}_{\\cHFFFFFF}{\\cH00FFFF}_{\\cHFFFFFF}{\\cH00FFFF}", "是否主力": "♪_Is_the_main_force_♪", "运动员id": "Athlete_id", "加入日期": "Date_of_accession", "服役时间": "Time_of_service", "号码": "Number", "薪资": "Salaries", "执教时长": "I've_been_teaching_for_a_long_time", "年薪": "Annual_salary", "教练id": "Coach_id", "身份": "Identity"}, "table_en": {"篮球运动员": "Basketball_player", "比赛场馆": "It's_a_game_house", "篮球俱乐部": "Basketball_Club", "俱乐部现役球员": "Active_club_player", "运动员转会": "Sportsmen's_turn", "教练": "Coach", "俱乐部教练": "Coach_of_the_club"}}, "中国姓氏": {"sqlite": "CREATE TABLE Chinese (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese INTEGER, -- 汉字\n  Header VARCHAR(50), -- 部首\n  Brush VARCHAR(50), -- 笔画\n);\nCREATE TABLE Surname (\n  Last name id INTEGER PRIMARY KEY, -- 姓氏id\n  From family name id INTEGER, -- 源自姓氏id\n  Population INTEGER, -- 人口\n  Percentage INTEGER, -- 占比\n);\nCREATE TABLE Family name distribution area (\n  Last name id INTEGER PRIMARY KEY, -- 姓氏id\n  Regional INTEGER, -- 区域\n  Proportion of population VARCHAR(50), -- 人口占比\n);\n-- Surname.Last name id can be joined with Chinese.Phrase id -- 姓氏.姓氏id 与 汉字.词条id\n-- Surname.From family name id can be joined with Chinese.Phrase id -- 姓氏.源自姓氏id 与 汉字.词条id\n-- Family name distribution area.Last name id can be joined with Chinese.Phrase id -- 姓氏分布区域.姓氏id 与 汉字.词条id", "columns_en": {"词条id": "Phrase_id", "汉字": "Chinese", "部首": "Header", "笔画": "Brush", "姓氏id": "Last_name_id", "源自姓氏id": "From_family_name_id", "人口": "Population", "占比": "Percentage", "区域": "Regional", "人口占比": "Proportion_of_population"}, "table_en": {"汉字": "Chinese", "姓氏": "Surname", "姓氏分布区域": "Family_name_distribution_area"}}, "澳网公开赛": {"sqlite": "CREATE TABLE Tennis player (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Professional characteristics VARCHAR(50), -- 专业特点\n);\nCREATE TABLE Tennis is the number one champion (\n  Athlete id VARCHAR(50) PRIMARY KEY, -- 运动员id\n  The race INTEGER, -- 赛事\n  Number of crowns VARCHAR(50), -- 夺冠次数\n  Winning year INTEGER, -- 夺冠年份\n);\nCREATE TABLE One-time champions in tennis (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  The race DATETIME, -- 赛事\n  Gender VARCHAR(50), -- 性别\n  Champion id VARCHAR(50), -- 冠军id\n  Yajun id INTEGER, -- 亚军id\n  The final score INTEGER, -- 决赛比分\n);\nCREATE TABLE Tennis record (\n  Record items INTEGER PRIMARY KEY, -- 记录项目\n  Maintainer id VARCHAR(50), -- 保持者id\n  Annotations INTEGER, -- 说明\n);\n-- One-time champions in tennis.Yajun id can be joined with Tennis player.Phrase id -- 网球赛事历届单打冠军.亚军id 与 网球运动员.词条id\n-- Tennis record.Maintainer id can be joined with Tennis player.Phrase id -- 网球比赛记录.保持者id 与 网球运动员.词条id\n-- Tennis is the number one champion.Athlete id can be joined with Tennis player.Phrase id -- 网球赛事单打冠军排名.运动员id 与 网球运动员.词条id\n-- One-time champions in tennis.Champion id can be joined with Tennis player.Phrase id -- 网球赛事历届单打冠军.冠军id 与 网球运动员.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "专业特点": "Professional_characteristics", "运动员id": "Athlete_id", "赛事": "The_race", "夺冠次数": "Number_of_crowns", "夺冠年份": "Winning_year", "年份": "Year", "冠军id": "Champion_id", "亚军id": "Yajun_id", "决赛比分": "The_final_score", "记录项目": "Record_items", "保持者id": "Maintainer_id", "说明": "Annotations"}, "table_en": {"网球运动员": "Tennis_player", "网球赛事单打冠军排名": "Tennis_is_the_number_one_champion", "网球赛事历届单打冠军": "One-time_champions_in_tennis", "网球比赛记录": "Tennis_record"}}, "足球奖项": {"sqlite": "CREATE TABLE Football players (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  Nationality VARCHAR(50), -- 国籍\n  Age VARCHAR(50), -- 年龄\n  Club INTEGER, -- 俱乐部\n);\nCREATE TABLE The World Cup Goldball Award (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  World Cup name DATETIME, -- 世界杯名称\n  Goldball player id VARCHAR(50), -- 金球奖运动员id\n  Silverball Award player id INTEGER, -- 银球奖运动员id\n  Bronze Ball Award player id INTEGER, -- 铜球奖运动员id\n);\nCREATE TABLE The European Goldball Prize (\n  Season INTEGER PRIMARY KEY, -- 赛季\n  Athlete id INTEGER, -- 运动员id\n  Nationality INTEGER, -- 国籍\n  Club VARCHAR(50), -- 俱乐部\n  Goal VARCHAR(50), -- 进球数\n);\nCREATE TABLE FIFA Goldball Award (\n  Year INTEGER PRIMARY KEY, -- 年度\n  Athlete id DATETIME, -- 运动员id\n  Nationality at the time of award INTEGER, -- 获奖时国籍\n  The Club when the prize is awarded VARCHAR(50), -- 获奖时俱乐部\n);\n-- The World Cup Goldball Award.Goldball player id can be joined with Football players.Phrase id -- 世界杯金球奖.金球奖运动员id 与 足球运动员.词条id\n-- FIFA Goldball Award.Athlete id can be joined with Football players.Phrase id -- FIFA金球奖.运动员id 与 足球运动员.词条id\n-- The European Goldball Prize.Athlete id can be joined with Football players.Phrase id -- 欧洲杯金球奖.运动员id 与 足球运动员.词条id\n-- The World Cup Goldball Award.Silverball Award player id can be joined with Football players.Phrase id -- 世界杯金球奖.银球奖运动员id 与 足球运动员.词条id\n-- The World Cup Goldball Award.Bronze Ball Award player id can be joined with Football players.Phrase id -- 世界杯金球奖.铜球奖运动员id 与 足球运动员.词条id", "columns_en": {"词条id": "Phrase_id", "中文名": "Chinese_Name", "国籍": "Nationality", "年龄": "Age", "俱乐部": "Club", "年份": "Year", "世界杯名称": "World_Cup_name", "金球奖运动员id": "Goldball_player_id", "银球奖运动员id": "Silverball_Award_player_id", "铜球奖运动员id": "Bronze_Ball_Award_player_id", "赛季": "Season", "运动员id": "Athlete_id", "进球数": "Goal", "年度": "Year", "获奖时国籍": "Nationality_at_the_time_of_award", "获奖时俱乐部": "The_Club_when_the_prize_is_awarded"}, "table_en": {"足球运动员": "Football_players", "世界杯金球奖": "The_World_Cup_Goldball_Award", "欧洲杯金球奖": "The_European_Goldball_Prize", "FIFA金球奖": "FIFA_Goldball_Award"}}, "视频软件": {"sqlite": "CREATE TABLE Video platform (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of the platform INTEGER, -- 平台名称\n  Plugins available VARCHAR(50), -- 有无插件\n  Client Size BINARY, -- 客户端大小\n  Contributions INTEGER, -- 会费\n  That's a good rating INTEGER, -- 好评率\n);\nCREATE TABLE Home-made dramas from various video platforms (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Platformid VARCHAR(50), -- 平台id\n  Year of broadcast INTEGER, -- 播出年份\n  Type DATETIME, -- 类型\n  Number of views VARCHAR(50), -- 观看量\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE Sports events (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Items to which VARCHAR(50), -- 所属项目\n);\nCREATE TABLE The game's on the air (\n  Game id VARCHAR(50) PRIMARY KEY, -- 赛事id\n  Platformid INTEGER, -- 平台id\n  Rebroadcasting fees INTEGER, -- 转播费\n);\n-- The game's on the air.Game id can be joined with Sports events.Phrase id -- 赛事转播.赛事id 与 体育赛事.词条id\n-- Home-made dramas from various video platforms.Platformid can be joined with Video platform.Phrase id -- 各视频平台自制剧.平台id 与 视频平台.词条id\n-- The game's on the air.Platformid can be joined with Video platform.Phrase id -- 赛事转播.平台id 与 视频平台.词条id", "columns_en": {"词条id": "Phrase_id", "平台名称": "Name_of_the_platform", "有无插件": "Plugins_available", "客户端大小": "Client_Size", "会费": "Contributions", "好评率": "That's_a_good_rating", "名称": "Name", "平台id": "Platformid", "播出年份": "Year_of_broadcast", "类型": "Type", "观看量": "Number_of_views", "评分": "Rating", "所属项目": "Items_to_which", "赛事id": "Game_id", "转播费": "Rebroadcasting_fees"}, "table_en": {"视频平台": "Video_platform", "各视频平台自制剧": "Home-made_dramas_from_various_video_platforms", "体育赛事": "Sports_events", "赛事转播": "The_game's_on_the_air"}}, "网红食品": {"sqlite": "CREATE TABLE Red food (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of Classes VARCHAR(50), -- 品类数量\n  Number of businesses INTEGER, -- 商家数量\n  Year of occurrence INTEGER, -- 出现年份\n);\nCREATE TABLE Red food sales (\n  Type id DATETIME PRIMARY KEY, -- 类型id\n  Year INTEGER, -- 年份\n  Sales DATETIME, -- 销售额\n  Number of persons purchased INTEGER, -- 购买人数\n);\nCREATE TABLE Red food buyers (\n  Type id INTEGER PRIMARY KEY, -- 类型id\n  Age group INTEGER, -- 年龄段\n  Number of persons as a percentage VARCHAR(50), -- 人数占比\n);\nCREATE TABLE Red food distribution cities (\n  Type id INTEGER PRIMARY KEY, -- 类型id\n  Province INTEGER, -- 省份\n  Proportion of sales VARCHAR(50), -- 销售量占比\n  Business as a percentage INTEGER, -- 商家占比\n  Security incident concerns INTEGER, -- 安全事件关注度\n);\n-- Red food sales.Type id can be joined with Red food.Phrase id -- 网红食品销售.类型id 与 网红食品.词条id\n-- Red food buyers.Type id can be joined with Red food.Phrase id -- 网红食品购买者.类型id 与 网红食品.词条id\n-- Red food distribution cities.Type id can be joined with Red food.Phrase id -- 网红食品分布城市.类型id 与 网红食品.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "品类数量": "Number_of_Classes", "商家数量": "Number_of_businesses", "出现年份": "Year_of_occurrence", "类型id": "Type_id", "年份": "Year", "销售额": "Sales", "购买人数": "Number_of_persons_purchased", "年龄段": "Age_group", "人数占比": "Number_of_persons_as_a_percentage", "省份": "Province", "销售量占比": "Proportion_of_sales", "商家占比": "Business_as_a_percentage", "安全事件关注度": "Security_incident_concerns"}, "table_en": {"网红食品": "Red_food", "网红食品销售": "Red_food_sales", "网红食品购买者": "Red_food_buyers", "网红食品分布城市": "Red_food_distribution_cities"}}, "中国演员和电影": {"sqlite": "CREATE TABLE Actor (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Height VARCHAR(50), -- 身高\n  body weight INTEGER, -- 体重\n  Place of birth INTEGER, -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Graduate schools DATETIME, -- 毕业院校\n  Occupation VARCHAR(50), -- 职业\n);\nCREATE TABLE Film (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Film Name INTEGER, -- 电影名称\n  Production area VARCHAR(50), -- 制片地区\n  Production costs VARCHAR(50), -- 制片成本\n  The film's long INTEGER, -- 片长\n  Director INTEGER, -- 导演\n  Show time INTEGER, -- 上映时间\n  Ticket room DATETIME, -- 票房\n  Type INTEGER, -- 类型\n);\nCREATE TABLE Actors and movies (\n  Actor id VARCHAR(50) PRIMARY KEY, -- 演员id\n  Film id INTEGER, -- 电影id\n  Play a role INTEGER, -- 饰演角色\n  Film remuneration VARCHAR(50), -- 片酬\n);\nCREATE TABLE Film platform (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  Play Platform INTEGER, -- 播放平台\n  Playbacks VARCHAR(50), -- 播放量\n  Rating INTEGER, -- 评分\n);\n-- Actors and movies.Film id can be joined with Film.Phrase id -- 演员和电影.电影id 与 电影.词条id\n-- Actors and movies.Actor id can be joined with Actor.Phrase id -- 演员和电影.演员id 与 演职员.词条id\n-- Film platform.Film id can be joined with Film.Phrase id -- 电影平台.电影id 与 电影.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "身高": "Height", "体重": "body_weight", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "毕业院校": "Graduate_schools", "职业": "Occupation", "电影名称": "Film_Name", "制片地区": "Production_area", "制片成本": "Production_costs", "片长": "The_film's_long", "导演": "Director", "上映时间": "Show_time", "票房": "Ticket_room", "类型": "Type", "演员id": "Actor_id", "电影id": "Film_id", "饰演角色": "Play_a_role", "片酬": "Film_remuneration", "播放平台": "Play_Platform", "播放量": "Playbacks", "评分": "Rating"}, "table_en": {"演职员": "Actor", "电影": "Film", "演员和电影": "Actors_and_movies", "电影平台": "Film_platform"}}, "豆瓣电影": {"sqlite": "CREATE TABLE Film (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Shadow Name INTEGER, -- 影名\n  Languages VARCHAR(50), -- 语言\n  Type VARCHAR(50), -- 类型\n  Bean petals VARCHAR(50), -- 豆瓣评分\n  Number of evaluations INTEGER, -- 评价人数\n  5-star ratio INTEGER, -- 5星占比\n);\nCREATE TABLE A week's watch (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  Synchronising folder INTEGER, -- 名次\n  Nominal change INTEGER, -- 名次变化\n);\nCREATE TABLE Top 10 tickets (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  Date of presentation INTEGER, -- 上映日期\n  The ticket office DATETIME, -- 总票房\n  Budget production INTEGER, -- 制作预算\n);\nCREATE TABLE Top 100 movies (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  Synchronising folder INTEGER, -- 名次\n  How many times do I get? INTEGER, -- 点赞次数\n);\n-- Top 10 tickets.Film id can be joined with Film.Phrase id -- top10票房榜.电影id 与 电影.词条id\n-- A week's watch.Film id can be joined with Film.Phrase id -- 一周口碑榜.电影id 与 电影.词条id\n-- Top 100 movies.Film id can be joined with Film.Phrase id -- top100电影.电影id 与 电影.词条id", "columns_en": {"词条id": "Phrase_id", "影名": "Shadow_Name", "语言": "Languages", "类型": "Type", "豆瓣评分": "Bean_petals", "评价人数": "Number_of_evaluations", "5星占比": "5-star_ratio", "电影id": "Film_id", "名次": "Synchronising_folder", "名次变化": "Nominal_change", "上映日期": "Date_of_presentation", "总票房": "The_ticket_office", "制作预算": "Budget_production", "点赞次数": "How_many_times_do_I_get?"}, "table_en": {"电影": "Film", "一周口碑榜": "A_week's_watch", "top10票房榜": "Top_10_tickets", "top100电影": "Top_100_movies"}}, "中国资源城市": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Administrative divisions VARCHAR(50), -- 行政区划\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE Resources (\n  Name VARCHAR(50) PRIMARY KEY, -- 名称\n  Urban id VARCHAR(50), -- 城市id\n  Area of resources INTEGER, -- 资源所占面积\n  Storage INTEGER, -- 储量\n  Exploited INTEGER, -- 已开采量\n);\n-- Resources.Urban id can be joined with Urban.Phrase id -- 资源.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "行政区划": "Administrative_divisions", "所属省份": "Provinces_to_which_they_belong", "类型": "Type", "城市id": "Urban_id", "资源所占面积": "Area_of_resources", "储量": "Storage", "已开采量": "Exploited"}, "table_en": {"城市": "Urban", "资源": "Resources"}}, "数字单位": {"sqlite": "CREATE TABLE Units (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Category VARCHAR(50), -- 类别\n);\nCREATE TABLE Evolution (\n  Unit id VARCHAR(50) PRIMARY KEY, -- 单位id\n  Convert unitid INTEGER, -- 转换单位id\n  Progress INTEGER, -- 进制\n);\n-- Evolution.Convert unitid can be joined with Units.Phrase id -- 进制换算.转换单位id 与 单位.词条id\n-- Evolution.Unit id can be joined with Units.Phrase id -- 进制换算.单位id 与 单位.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "类别": "Category", "单位id": "Unit_id", "转换单位id": "Convert_unitid", "进制": "Progress"}, "table_en": {"单位": "Units", "进制换算": "Evolution"}}, "举重比赛": {"sqlite": "CREATE TABLE Athletes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Nationality VARCHAR(50), -- 国籍\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  body weight DATETIME, -- 体重\n);\nCREATE TABLE Weight lift world record (\n  Kilogram level INTEGER PRIMARY KEY, -- 公斤级别\n  Type of project INTEGER, -- 项目类型\n  Recording of accomplishments VARCHAR(50), -- 记录成绩\n  Athlete id INTEGER, -- 运动员id\n  It's record time INTEGER, -- 破纪录时间\n);\nCREATE TABLE Weightlifting Olympic champion (\n  Name of Olympic Games DATETIME PRIMARY KEY, -- 奥运会名称\n  Kilogram level VARCHAR(50), -- 公斤级别\n  Athlete id INTEGER, -- 运动员id\n);\n-- Weight lift world record.Athlete id can be joined with Athletes.Phrase id -- 举重世界记录.运动员id 与 运动员.词条id\n-- Weightlifting Olympic champion.Athlete id can be joined with Athletes.Phrase id -- 举重奥运会冠军.运动员id 与 运动员.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "性别": "Gender", "国籍": "Nationality", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "体重": "body_weight", "公斤级别": "Kilogram_level", "项目类型": "Type_of_project", "记录成绩": "Recording_of_accomplishments", "运动员id": "Athlete_id", "破纪录时间": "It's_record_time", "奥运会名称": "Name_of_Olympic_Games"}, "table_en": {"运动员": "Athletes", "举重世界记录": "Weight_lift_world_record", "举重奥运会冠军": "Weightlifting_Olympic_champion"}}, "当前上映电影": {"sqlite": "CREATE TABLE Film (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The film's long VARCHAR(50), -- 片长\n  Type INTEGER, -- 类型\n  Shooting Country VARCHAR(50), -- 拍摄国家\n  Rank VARCHAR(50), -- 排名\n  Film reviews INTEGER, -- 影评数\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE The cinema (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n  Membership fees VARCHAR(50), -- 会员费\n  Number of cinemas INTEGER, -- 影厅数\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE It's on film (\n  Film id INTEGER PRIMARY KEY, -- 电影id\n  ♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ INTEGER, -- 影院id\n  Play date INTEGER, -- 播放日期\n  Playtime DATETIME, -- 播放时间\n  Tickets DATETIME, -- 票价\n  Member fare INTEGER, -- 会员票价\n  The rest of the tickets INTEGER, -- 余票\n);\n-- It's on film.Film id can be joined with Film.Phrase id -- 电影上映.电影id 与 电影.词条id\n-- It's on film.♪ The cinema ♪ ♪ ♪ The cinema ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ the cinema ♪ ♪ ♪ ♪ ♪ can be joined with The cinema.Phrase id -- 电影上映.影院id 与 影院.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "片长": "The_film's_long", "类型": "Type", "拍摄国家": "Shooting_Country", "排名": "Rank", "影评数": "Film_reviews", "评分": "Rating", "地址": "Address", "会员费": "Membership_fees", "影厅数": "Number_of_cinemas", "电影id": "Film_id", "影院id": "♪_The_cinema_♪_♪_♪_The_cinema_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪_the_cinema_♪_♪_♪_♪_♪", "播放日期": "Play_date", "播放时间": "Playtime", "票价": "Tickets", "会员票价": "Member_fare", "余票": "The_rest_of_the_tickets"}, "table_en": {"电影": "Film", "影院": "The_cinema", "电影上映": "It's_on_film"}}, "公司招聘": {"sqlite": "CREATE TABLE Company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 所在城市\n  Is it on the market? VARCHAR(50), -- 是否上市\n);\nCREATE TABLE Recruitment posts (\n  Phrase id BINARY PRIMARY KEY, -- 词条id\n  Name of post INTEGER, -- 岗位名称\n  Educational requirements VARCHAR(50), -- 学历要求\n  Duties VARCHAR(50), -- 职责\n  Minimum requirements for length of service VARCHAR(50), -- 工作年限最低要求\n  Minimum age INTEGER, -- 年龄最低限\n  Maximum age INTEGER, -- 年龄最大限\n);\nCREATE TABLE Corporate Recruitment Scheme (\n  Companyid INTEGER PRIMARY KEY, -- 公司id\n  Recruited positiond INTEGER, -- 招聘岗位id\n  Monthly base salary INTEGER, -- 基本月薪\n  Number of months issued INTEGER, -- 发放月数\n  Float range INTEGER, -- 浮动幅度\n  Number of recruits INTEGER, -- 招聘人数\n);\n-- Corporate Recruitment Scheme.Recruited positiond can be joined with Recruitment posts.Phrase id -- 公司招聘计划.招聘岗位id 与 招聘岗位.词条id\n-- Corporate Recruitment Scheme.Companyid can be joined with Company.Phrase id -- 公司招聘计划.公司id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所在城市": "It's_in_the_city", "是否上市": "Is_it_on_the_market?", "岗位名称": "Name_of_post", "学历要求": "Educational_requirements", "职责": "Duties", "工作年限最低要求": "Minimum_requirements_for_length_of_service", "年龄最低限": "Minimum_age", "年龄最大限": "Maximum_age", "公司id": "Companyid", "招聘岗位id": "Recruited_positiond", "基本月薪": "Monthly_base_salary", "发放月数": "Number_of_months_issued", "浮动幅度": "Float_range", "招聘人数": "Number_of_recruits"}, "table_en": {"公司": "Company", "招聘岗位": "Recruitment_posts", "公司招聘计划": "Corporate_Recruitment_Scheme"}}, "世界河流": {"sqlite": "CREATE TABLE River (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Long and long VARCHAR(50), -- 全长\n  Watershed area INTEGER, -- 流域面积\n  Origin INTEGER, -- 发源地\n  Water system VARCHAR(50), -- 所属水系\n  Country of nationality VARCHAR(50), -- 所属国家\n  The continent to which they belong VARCHAR(50), -- 所属洲\n  Number of basin countries VARCHAR(50), -- 流域国家数\n);\nCREATE TABLE Urban (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n);\nCREATE TABLE The city through which the rivers flow (\n  Riverid VARCHAR(50) PRIMARY KEY, -- 河流id\n  Urban id INTEGER, -- 城市id\n);\nCREATE TABLE River tributaries (\n  Riverid INTEGER PRIMARY KEY, -- 河流id\n  ♪ The river that belongs to ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ INTEGER, -- 所属河流id\n);\n-- River tributaries.Riverid can be joined with River.Phrase id -- 河流支流.河流id 与 河流.词条id\n-- The city through which the rivers flow.Urban id can be joined with Urban.Phrase id -- 河流流经的城市.城市id 与 城市.词条id\n-- The city through which the rivers flow.Riverid can be joined with River.Phrase id -- 河流流经的城市.河流id 与 河流.词条id\n-- River tributaries.♪ The river that belongs to ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ the river ♪ ♪ ♪ ♪ ♪ ♪ can be joined with River.Phrase id -- 河流支流.所属河流id 与 河流.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "全长": "Long_and_long", "流域面积": "Watershed_area", "发源地": "Origin", "所属水系": "Water_system", "所属国家": "Country_of_nationality", "所属洲": "The_continent_to_which_they_belong", "流域国家数": "Number_of_basin_countries", "河流id": "Riverid", "城市id": "Urban_id", "所属河流id": "♪_The_river_that_belongs_to_♪_♪_♪_the_river_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪_the_river_♪_♪_♪_♪_♪_♪"}, "table_en": {"河流": "River", "城市": "Urban", "河流流经的城市": "The_city_through_which_the_rivers_flow", "河流支流": "River_tributaries"}}, "音乐金曲奖": {"sqlite": "CREATE TABLE Tribute prizes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Year VARCHAR(50), -- 年份\n  Number of awards DATETIME, -- 奖项数量\n  Moderator INTEGER, -- 主持人\n  Number of entries VARCHAR(50), -- 参赛作品数量\n  Number of enclosed works INTEGER, -- 入围作品数量\n);\nCREATE TABLE Singer (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Gender VARCHAR(50), -- 性别\n  Place of birth VARCHAR(50), -- 出生地\n  Number of albums VARCHAR(50), -- 专辑数量\n  Number of songs INTEGER, -- 歌曲数量\n  Main session of the concert INTEGER, -- 演唱会总场次\n  Total number of fans INTEGER, -- 粉丝总数\n  Number of pink powders INTEGER, -- 红粉数量\n);\nCREATE TABLE Singer signing record company (\n  Singer id INTEGER PRIMARY KEY, -- 歌手id\n  The record company INTEGER, -- 唱片公司\n  Date of signature VARCHAR(50), -- 签约时间\n);\nCREATE TABLE List of nominations for the Golden Tribune Award (\n  Award id DATETIME PRIMARY KEY, -- 奖届id\n  Name of award INTEGER, -- 奖项名称\n  Nominee singer id VARCHAR(50), -- 提名歌手id\n  Nomination of works INTEGER, -- 提名作品\n);\nCREATE TABLE List of prizes for the Golden Collegiate (\n  Award id VARCHAR(50) PRIMARY KEY, -- 奖届id\n  Name of award INTEGER, -- 奖项名称\n  Prize-winning singer id VARCHAR(50), -- 获奖歌手id\n  Singer Records INTEGER, -- 歌手唱片公司\n);\n-- List of nominations for the Golden Tribune Award.Award id can be joined with Tribute prizes.Phrase id -- 金曲奖提名名单.奖届id 与 各届金曲奖.词条id\n-- Singer signing record company.Singer id can be joined with Singer.Phrase id -- 歌手签约唱片公司.歌手id 与 歌手.词条id\n-- List of prizes for the Golden Collegiate.Award id can be joined with Tribute prizes.Phrase id -- 金曲奖获奖名单.奖届id 与 各届金曲奖.词条id\n-- List of nominations for the Golden Tribune Award.Nominee singer id can be joined with Singer.Phrase id -- 金曲奖提名名单.提名歌手id 与 歌手.词条id\n-- List of prizes for the Golden Collegiate.Prize-winning singer id can be joined with Singer.Phrase id -- 金曲奖获奖名单.获奖歌手id 与 歌手.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "年份": "Year", "奖项数量": "Number_of_awards", "主持人": "Moderator", "参赛作品数量": "Number_of_entries", "入围作品数量": "Number_of_enclosed_works", "姓名": "Name", "性别": "Gender", "出生地": "Place_of_birth", "专辑数量": "Number_of_albums", "歌曲数量": "Number_of_songs", "演唱会总场次": "Main_session_of_the_concert", "粉丝总数": "Total_number_of_fans", "红粉数量": "Number_of_pink_powders", "歌手id": "Singer_id", "唱片公司": "The_record_company", "签约时间": "Date_of_signature", "奖届id": "Award_id", "奖项名称": "Name_of_award", "提名歌手id": "Nominee_singer_id", "提名作品": "Nomination_of_works", "获奖歌手id": "Prize-winning_singer_id", "歌手唱片公司": "Singer_Records"}, "table_en": {"各届金曲奖": "Tribute_prizes", "歌手": "Singer", "歌手签约唱片公司": "Singer_signing_record_company", "金曲奖提名名单": "List_of_nominations_for_the_Golden_Tribune_Award", "金曲奖获奖名单": "List_of_prizes_for_the_Golden_Collegiate"}}, "房产公司": {"sqlite": "CREATE TABLE Property Group (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 位于城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Annual sales VARCHAR(50), -- 年销售额\n  Growth in sales on a year-on-year basis INTEGER, -- 销售额同比增长\n  Market share of sales INTEGER, -- 销售额市场占比\n  Area of sale of merchandise rooms INTEGER, -- 商品房销售面积\n  Increase in sales area per year INTEGER, -- 销售面积同比增长\n  Area of sale INTEGER, -- 销售面积\n  Market share INTEGER, -- 市场占比\n);\nCREATE TABLE In 2019  real estate companies were 500 strong (\n  Groupid INTEGER PRIMARY KEY, -- 集团id\n  Total ranking INTEGER, -- 总排名\n  Development potential ranking INTEGER, -- 发展潜力排名\n  Growing speed ranking INTEGER, -- 成长速度排名\n  Integrated development ranking INTEGER, -- 综合发展排名\n  Innovability ranking INTEGER, -- 创新能力排名\n);\nCREATE TABLE In 2019  real estate operated at 100% (\n  Groupid INTEGER PRIMARY KEY, -- 集团id\n  Performance efficiency ranking INTEGER, -- 运营效率排名\n  Regional operational rankings INTEGER, -- 区域运营排名\n  Robust Operations Rating INTEGER, -- 稳健运营排名\n  Rank of commercial real estate operations INTEGER, -- 商业地产运营排名\n  Community cultural operations ranking INTEGER, -- 社区文化运营排名\n  Long-rent apartment operations ranking INTEGER, -- 长租公寓运营排名\n);\nCREATE TABLE Real estate rankings by city (\n  Groupid INTEGER PRIMARY KEY, -- 集团id\n  Urban INTEGER, -- 城市\n  Rank VARCHAR(50), -- 排名\n  Area of sale INTEGER, -- 销售面积\n  Sales INTEGER, -- 销售额\n);\nCREATE TABLE Typical real estate company projects (\n  Title of the project INTEGER PRIMARY KEY, -- 项目名称\n  Group to which id VARCHAR(50), -- 所属集团id\n  It's in the city INTEGER, -- 位于城市\n  Area of land area VARCHAR(50), -- 占地面积\n  Total number of households INTEGER, -- 总户数\n  Household size INTEGER, -- 户型面积\n);\n-- Real estate rankings by city.Groupid can be joined with Property Group.Phrase id -- 房地产各城市排名.集团id 与 地产集团.词条id\n-- Typical real estate company projects.Group to which id can be joined with Property Group.Phrase id -- 房产公司典型项目.所属集团id 与 地产集团.词条id\n-- In 2019  real estate companies were 500 strong.Groupid can be joined with Property Group.Phrase id -- 2019年房地产企业500强.集团id 与 地产集团.词条id\n-- In 2019  real estate operated at 100%.Groupid can be joined with Property Group.Phrase id -- 2019年房地产企业运营100强.集团id 与 地产集团.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "位于城市": "It's_in_the_city", "所属省份": "Provinces_to_which_they_belong", "年销售额": "Annual_sales", "销售额同比增长": "Growth_in_sales_on_a_year-on-year_basis", "销售额市场占比": "Market_share_of_sales", "商品房销售面积": "Area_of_sale_of_merchandise_rooms", "销售面积同比增长": "Increase_in_sales_area_per_year", "销售面积": "Area_of_sale", "市场占比": "Market_share", "集团id": "Groupid", "总排名": "Total_ranking", "发展潜力排名": "Development_potential_ranking", "成长速度排名": "Growing_speed_ranking", "综合发展排名": "Integrated_development_ranking", "创新能力排名": "Innovability_ranking", "运营效率排名": "Performance_efficiency_ranking", "区域运营排名": "Regional_operational_rankings", "稳健运营排名": "Robust_Operations_Rating", "商业地产运营排名": "Rank_of_commercial_real_estate_operations", "社区文化运营排名": "Community_cultural_operations_ranking", "长租公寓运营排名": "Long-rent_apartment_operations_ranking", "城市": "Urban", "排名": "Rank", "销售额": "Sales", "项目名称": "Title_of_the_project", "所属集团id": "Group_to_which_id", "占地面积": "Area_of_land_area", "总户数": "Total_number_of_households", "户型面积": "Household_size"}, "table_en": {"地产集团": "Property_Group", "2019年房地产企业500强": "In_2019__real_estate_companies_were_500_strong", "2019年房地产企业运营100强": "In_2019__real_estate_operated_at_100%", "房地产各城市排名": "Real_estate_rankings_by_city", "房产公司典型项目": "Typical_real_estate_company_projects"}}, "地图软件": {"sqlite": "CREATE TABLE Map software (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Online time VARCHAR(50), -- 上线时间\n  Operating company DATETIME, -- 运营公司\n  Number of countries and areas covered VARCHAR(50), -- 覆盖国家和地区数量\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE Map software-supported platforms (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Platform INTEGER, -- 平台\n  First-time support for version number VARCHAR(50), -- 首次支持版本号\n  Release Time INTEGER, -- 发布时间\n);\nCREATE TABLE Map software-supported functionality (\n  Softwareid DATETIME PRIMARY KEY, -- 软件id\n  Functions INTEGER, -- 功能\n  Whether or not to innovate bright spots VARCHAR(50), -- 是否创新亮点\n  First-time support for version number BINARY, -- 首次支持版本号\n  Release Time INTEGER, -- 发布时间\n);\nCREATE TABLE Software-supported taxiing APP (\n  Softwareid DATETIME PRIMARY KEY, -- 软件id\n  Taxi app INTEGER, -- 打车app\n  Number of models VARCHAR(50), -- 车型数量\n  Average number of days INTEGER, -- 日均单数\n);\n-- Map software-supported functionality.Softwareid can be joined with Map software.Phrase id -- 地图软件支持的功能.软件id 与 地图软件.词条id\n-- Map software-supported platforms.Softwareid can be joined with Map software.Phrase id -- 地图软件支持的平台.软件id 与 地图软件.词条id\n-- Software-supported taxiing APP.Softwareid can be joined with Map software.Phrase id -- 软件支持的打车APP.软件id 与 地图软件.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "上线时间": "Online_time", "运营公司": "Operating_company", "覆盖国家和地区数量": "Number_of_countries_and_areas_covered", "评分": "Rating", "软件id": "Softwareid", "平台": "Platform", "首次支持版本号": "First-time_support_for_version_number", "发布时间": "Release_Time", "功能": "Functions", "是否创新亮点": "Whether_or_not_to_innovate_bright_spots", "打车app": "Taxi_app", "车型数量": "Number_of_models", "日均单数": "Average_number_of_days"}, "table_en": {"地图软件": "Map_software", "地图软件支持的平台": "Map_software-supported_platforms", "地图软件支持的功能": "Map_software-supported_functionality", "软件支持的打车APP": "Software-supported_taxiing_APP"}}, "中国演员和电视剧": {"sqlite": "CREATE TABLE Actors (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationalities VARCHAR(50), -- 民族\n  Constellation VARCHAR(50), -- 星座\n  Blood type VARCHAR(50), -- 血型\n  Height VARCHAR(50), -- 身高\n  body weight INTEGER, -- 体重\n  Place of birth INTEGER, -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Graduate schools DATETIME, -- 毕业院校\n);\nCREATE TABLE Director (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Place of birth VARCHAR(50), -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Graduate schools DATETIME, -- 毕业院校\n);\nCREATE TABLE Role (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Actor id VARCHAR(50), -- 饰演演员id\n  Musical actor id INTEGER, -- 配音演员id\n  It's an exhibition INTEGER, -- 出场作品\n);\nCREATE TABLE A TV show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  Director VARCHAR(50), -- 导演\n  A screenwriter VARCHAR(50), -- 编剧\n  Producer VARCHAR(50), -- 制片人\n  Collections VARCHAR(50), -- 集数\n  Type INTEGER, -- 类型\n);\nCREATE TABLE An actor and a director (\n  Actor id VARCHAR(50) PRIMARY KEY, -- 演员id\n  Director id INTEGER, -- 导演id\n  Co-author id INTEGER, -- 合作作品id\n  Time of production INTEGER, -- 作品出品时间\n);\nCREATE TABLE An actor's collaboration with a director (\n  Actor id DATETIME PRIMARY KEY, -- 演员id\n  Director id INTEGER, -- 导演id\n  Number of cooperations INTEGER, -- 合作次数\n);\nCREATE TABLE An actor's work (\n  Actor id INTEGER PRIMARY KEY, -- 演员id\n  Worksid INTEGER, -- 作品id\n  Role Type INTEGER, -- 角色类型\n);\n-- An actor's work.Worksid can be joined with A TV show.Phrase id -- 演员的作品.作品id 与 电视剧.词条id\n-- Role.Actor id can be joined with Actors.Phrase id -- 角色.饰演演员id 与 演员.词条id\n-- An actor and a director.Actor id can be joined with Actors.Phrase id -- 演员及导演作品.演员id 与 演员.词条id\n-- An actor and a director.Co-author id can be joined with A TV show.Phrase id -- 演员及导演作品.合作作品id 与 电视剧.词条id\n-- Role.Musical actor id can be joined with Actors.Phrase id -- 角色.配音演员id 与 演员.词条id\n-- An actor's collaboration with a director.Director id can be joined with Director.Phrase id -- 演员与导演的合作.导演id 与 导演.词条id\n-- An actor and a director.Director id can be joined with Director.Phrase id -- 演员及导演作品.导演id 与 导演.词条id\n-- An actor's collaboration with a director.Actor id can be joined with Actors.Phrase id -- 演员与导演的合作.演员id 与 演员.词条id\n-- An actor's work.Actor id can be joined with Actors.Phrase id -- 演员的作品.演员id 与 演员.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "民族": "Nationalities", "星座": "Constellation", "血型": "Blood_type", "身高": "Height", "体重": "body_weight", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "毕业院校": "Graduate_schools", "饰演演员id": "Actor_id", "配音演员id": "Musical_actor_id", "出场作品": "It's_an_exhibition", "剧名": "The_title_of_the_play", "导演": "Director", "编剧": "A_screenwriter", "制片人": "Producer", "集数": "Collections", "类型": "Type", "演员id": "Actor_id", "导演id": "Director_id", "合作作品id": "Co-author_id", "作品出品时间": "Time_of_production", "合作次数": "Number_of_cooperations", "作品id": "Worksid", "角色类型": "Role_Type"}, "table_en": {"演员": "Actors", "导演": "Director", "角色": "Role", "电视剧": "A_TV_show", "演员及导演作品": "An_actor_and_a_director", "演员与导演的合作": "An_actor's_collaboration_with_a_director", "演员的作品": "An_actor's_work"}}, "奥运会参赛队伍": {"sqlite": "CREATE TABLE National (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  The continent to which they belong VARCHAR(50), -- 所属洲\n);\nCREATE TABLE Summer Olympics (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Organization of country id VARCHAR(50), -- 举办国家id\n  Host city INTEGER, -- 举办城市\n  A mascot VARCHAR(50), -- 吉祥物\n  Number of countries participating VARCHAR(50), -- 参赛国家数量\n  Number of athletes participating INTEGER, -- 参赛运动员数量\n  Number of large projects INTEGER, -- 大项项目数\n  Number of small projects INTEGER, -- 小项项目数\n);\nCREATE TABLE Company (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country id VARCHAR(50), -- 国家id\n);\nCREATE TABLE The 2008 Beijing Olympics medals (\n  Rank INTEGER PRIMARY KEY, -- 排名\n  Country id INTEGER, -- 国家id\n  Number of gold medals INTEGER, -- 金牌数\n  Number of silver medals INTEGER, -- 银牌数\n  Number of bronze medals INTEGER, -- 铜牌数\n  Total number of medals INTEGER, -- 奖牌总数\n);\nCREATE TABLE Olympics sponsors (\n  Olympic id INTEGER PRIMARY KEY, -- 奥运会id\n  Sponsorid INTEGER, -- 赞助商id\n);\n-- Olympics sponsors.Olympic id can be joined with Summer Olympics.Phrase id -- 奥运会赞助商.奥运会id 与 夏季奥运会.词条id\n-- The 2008 Beijing Olympics medals.Country id can be joined with National.Phrase id -- 2008北京奥运会奖牌榜.国家id 与 国家.词条id\n-- Summer Olympics.Organization of country id can be joined with National.Phrase id -- 夏季奥运会.举办国家id 与 国家.词条id\n-- Company.Country id can be joined with National.Phrase id -- 公司.国家id 与 国家.词条id\n-- Olympics sponsors.Sponsorid can be joined with Company.Phrase id -- 奥运会赞助商.赞助商id 与 公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属洲": "The_continent_to_which_they_belong", "举办国家id": "Organization_of_country_id", "举办城市": "Host_city", "吉祥物": "A_mascot", "参赛国家数量": "Number_of_countries_participating", "参赛运动员数量": "Number_of_athletes_participating", "大项项目数": "Number_of_large_projects", "小项项目数": "Number_of_small_projects", "国家id": "Country_id", "排名": "Rank", "金牌数": "Number_of_gold_medals", "银牌数": "Number_of_silver_medals", "铜牌数": "Number_of_bronze_medals", "奖牌总数": "Total_number_of_medals", "奥运会id": "Olympic_id", "赞助商id": "Sponsorid"}, "table_en": {"国家": "National", "夏季奥运会": "Summer_Olympics", "公司": "Company", "2008北京奥运会奖牌榜": "The_2008_Beijing_Olympics_medals", "奥运会赞助商": "Olympics_sponsors"}}, "酒店": {"sqlite": "CREATE TABLE Hotel Group (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters is located in the province VARCHAR(50), -- 总部所在省\n  Superior authorities VARCHAR(50), -- 上级主管部门\n  Number of hotels VARCHAR(50), -- 酒店数量\n  Number of guest rooms INTEGER, -- 客房数量\n  Provincial rankings INTEGER, -- 省排名\n  China’s 500 most valuable brands INTEGER, -- 中国500最具价值品牌排名\n  The Global Hotel Group is 300 top rankings INTEGER, -- 全球酒店集团300强排名\n);\nCREATE TABLE Hotel (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Hotel address VARCHAR(50), -- 酒店地址\n  Opening hours VARCHAR(50), -- 开业时间\n  Hotel Star Level DATETIME, -- 酒店星级\n  Group to which id INTEGER, -- 所属集团id\n  Number of guest rooms INTEGER, -- 客房数量\n  Number of persons accommodated in the lobby INTEGER, -- 大厅容纳人数\n);\nCREATE TABLE Airport (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  City to which you belong VARCHAR(50), -- 所属城市\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE Train station (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  City to which you belong VARCHAR(50), -- 所属城市\n  Type VARCHAR(50), -- 类型\n);\nCREATE TABLE The hotel's a long way from the airport (\n  Hotel id VARCHAR(50) PRIMARY KEY, -- 酒店id\n  Airportd INTEGER, -- 机场id\n  Distance INTEGER, -- 距离\n  Taxi fare INTEGER, -- 打车费用\n  Peak Time INTEGER, -- 高峰用时\n  Organisation INTEGER, -- 平时用时\n);\nCREATE TABLE The hotel's a long way from the train station (\n  Hotel id INTEGER PRIMARY KEY, -- 酒店id\n  Train stationid INTEGER, -- 火车站id\n  Number of bus lines INTEGER, -- 公交线路数\n  Number of metro lines INTEGER, -- 地铁线路数\n  When you're on the subway INTEGER, -- 地铁用时\n);\nCREATE TABLE Hotel activity costs (\n  Hotel id INTEGER PRIMARY KEY, -- 酒店id\n  Type of activity INTEGER, -- 活动类型\n  Size of population VARCHAR(50), -- 人数规模\n  Costs INTEGER, -- 费用\n);\n-- The hotel's a long way from the airport.Airportd can be joined with Airport.Phrase id -- 酒店距离机场路程.机场id 与 机场.词条id\n-- The hotel's a long way from the train station.Hotel id can be joined with Hotel.Phrase id -- 酒店距离火车站路程.酒店id 与 酒店.词条id\n-- The hotel's a long way from the airport.Hotel id can be joined with Hotel.Phrase id -- 酒店距离机场路程.酒店id 与 酒店.词条id\n-- Hotel activity costs.Hotel id can be joined with Hotel.Phrase id -- 酒店活动费用.酒店id 与 酒店.词条id\n-- Hotel.Group to which id can be joined with Hotel Group.Phrase id -- 酒店.所属集团id 与 酒店集团.词条id\n-- The hotel's a long way from the train station.Train stationid can be joined with Train station.Phrase id -- 酒店距离火车站路程.火车站id 与 火车站.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部所在省": "Headquarters_is_located_in_the_province", "上级主管部门": "Superior_authorities", "酒店数量": "Number_of_hotels", "客房数量": "Number_of_guest_rooms", "省排名": "Provincial_rankings", "中国500最具价值品牌排名": "China’s_500_most_valuable_brands", "全球酒店集团300强排名": "The_Global_Hotel_Group_is_300_top_rankings", "酒店地址": "Hotel_address", "开业时间": "Opening_hours", "酒店星级": "Hotel_Star_Level", "所属集团id": "Group_to_which_id", "大厅容纳人数": "Number_of_persons_accommodated_in_the_lobby", "所属城市": "City_to_which_you_belong", "类型": "Type", "酒店id": "Hotel_id", "机场id": "Airportd", "距离": "Distance", "打车费用": "Taxi_fare", "高峰用时": "Peak_Time", "平时用时": "Organisation", "火车站id": "Train_stationid", "公交线路数": "Number_of_bus_lines", "地铁线路数": "Number_of_metro_lines", "地铁用时": "When_you're_on_the_subway", "活动类型": "Type_of_activity", "人数规模": "Size_of_population", "费用": "Costs"}, "table_en": {"酒店集团": "Hotel_Group", "酒店": "Hotel", "机场": "Airport", "火车站": "Train_station", "酒店距离机场路程": "The_hotel's_a_long_way_from_the_airport", "酒店距离火车站路程": "The_hotel's_a_long_way_from_the_train_station", "酒店活动费用": "Hotel_activity_costs"}}, "世博会/园博会": {"sqlite": "CREATE TABLE Expo (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time VARCHAR(50), -- 时间\n  Location DATETIME, -- 地点\n  Category VARCHAR(50), -- 种类\n  Number of days held VARCHAR(50), -- 举办天数\n  Theme INTEGER, -- 主题\n  Number of exhibitors VARCHAR(50), -- 参展方数量\n  Investment costs INTEGER, -- 投资成本\n  Space area INTEGER, -- 会场面积\n  Number of visitors INTEGER, -- 参观人数\n  One-day passenger stream INTEGER, -- 单日客流\n);\nCREATE TABLE The Expo (\n  Episode id INTEGER PRIMARY KEY, -- 世博会id\n  The courtyard INTEGER, -- 场馆\n  Country to which the pavilion belongs VARCHAR(50), -- 场馆所属国家\n  Rank VARCHAR(50), -- 排名\n  Proportion area INTEGER, -- 占比面积\n  Number of visitors INTEGER, -- 参观人数\n);\nCREATE TABLE World Parks Fair (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time VARCHAR(50), -- 时间\n  Location DATETIME, -- 地点\n  Level VARCHAR(50), -- 级别\n  Duration VARCHAR(50), -- 会期\n  Theme INTEGER, -- 主题\n  Number of premises VARCHAR(50), -- 场馆数量\n  Space area INTEGER, -- 会场面积\n  Number of visitors INTEGER, -- 参观人数\n  Tickets INTEGER, -- 票价\n);\nCREATE TABLE China Flower Gardens Fair (\n  Time INTEGER PRIMARY KEY, -- 时间\n  Number of sessions DATETIME, -- 届数\n  Host city INTEGER, -- 举办城市\n  Location VARCHAR(50), -- 地点\n  Number of parks VARCHAR(50), -- 展园数量\n  Number of participating institutions INTEGER, -- 参与机构数量\n);\n-- The Expo.Episode id can be joined with Expo.Phrase id -- 世博会场馆.世博会id 与 世博会.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "时间": "Time", "地点": "Location", "种类": "Category", "举办天数": "Number_of_days_held", "主题": "Theme", "参展方数量": "Number_of_exhibitors", "投资成本": "Investment_costs", "会场面积": "Space_area", "参观人数": "Number_of_visitors", "单日客流": "One-day_passenger_stream", "世博会id": "Episode_id", "场馆": "The_courtyard", "场馆所属国家": "Country_to_which_the_pavilion_belongs", "排名": "Rank", "占比面积": "Proportion_area", "级别": "Level", "会期": "Duration", "场馆数量": "Number_of_premises", "票价": "Tickets", "届数": "Number_of_sessions", "举办城市": "Host_city", "展园数量": "Number_of_parks", "参与机构数量": "Number_of_participating_institutions"}, "table_en": {"世博会": "Expo", "世博会场馆": "The_Expo", "世界园博会": "World_Parks_Fair", "中国花卉园博会": "China_Flower_Gardens_Fair"}}, "二手车": {"sqlite": "CREATE TABLE Type of vehicle (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Card Time VARCHAR(50), -- 上牌时间\n  Up on the deck DATETIME, -- 上牌地\n  Miles VARCHAR(50), -- 里程数\n  Queue INTEGER, -- 排量\n  Checking records INTEGER, -- 过户记录\n  Company to which it belongs INTEGER, -- 所属公司\n);\nCREATE TABLE Automotive platform sales (\n  Type of vehicle id VARCHAR(50) PRIMARY KEY, -- 车型id\n  Platform INTEGER, -- 平台\n  Price of sale VARCHAR(50), -- 售价\n  Proportion of cost of services INTEGER, -- 服务费比例\n);\n-- Automotive platform sales.Type of vehicle id can be joined with Type of vehicle.Phrase id -- 车型平台售卖.车型id 与 车型.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "上牌时间": "Card_Time", "上牌地": "Up_on_the_deck", "里程数": "Miles", "排量": "Queue", "过户记录": "Checking_records", "所属公司": "Company_to_which_it_belongs", "车型id": "Type_of_vehicle_id", "平台": "Platform", "售价": "Price_of_sale", "服务费比例": "Proportion_of_cost_of_services"}, "table_en": {"车型": "Type_of_vehicle", "车型平台售卖": "Automotive_platform_sales"}}, "在线英语教学": {"sqlite": "CREATE TABLE Platform (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of years established VARCHAR(50), -- 成立年数\n  Number of teachers INTEGER, -- 教师数量\n  Classification of the curriculum system INTEGER, -- 课程体系分级\n);\nCREATE TABLE Youth courses (\n  Platformid INTEGER PRIMARY KEY, -- 平台id\n  Appropriate for groups INTEGER, -- 适合群体\n  It's a class time VARCHAR(50), -- 一节课时间\n  Number of hours taught INTEGER, -- 课时数\n  Number of themes INTEGER, -- 主题数\n  Glossary INTEGER, -- 词汇量\n);\nCREATE TABLE Teachers (\n  Platformid INTEGER PRIMARY KEY, -- 平台id\n  Foreign education comes from the state INTEGER, -- 外教来自国家\n  Number of foreign students VARCHAR(50), -- 外教数量\n  Teacher career ratio INTEGER, -- 教师职业占比\n);\nCREATE TABLE School fees (\n  Platformid INTEGER PRIMARY KEY, -- 平台id\n  Number of hours taught INTEGER, -- 课时数\n  Original price INTEGER, -- 原价\n  Discount INTEGER, -- 折扣\n);\n-- School fees.Platformid can be joined with Platform.Phrase id -- 学费.平台id 与 平台.词条id\n-- Youth courses.Platformid can be joined with Platform.Phrase id -- 青少年课程.平台id 与 平台.词条id\n-- Teachers.Platformid can be joined with Platform.Phrase id -- 教师.平台id 与 平台.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "成立年数": "Number_of_years_established", "教师数量": "Number_of_teachers", "课程体系分级": "Classification_of_the_curriculum_system", "平台id": "Platformid", "适合群体": "Appropriate_for_groups", "一节课时间": "It's_a_class_time", "课时数": "Number_of_hours_taught", "主题数": "Number_of_themes", "词汇量": "Glossary", "外教来自国家": "Foreign_education_comes_from_the_state", "外教数量": "Number_of_foreign_students", "教师职业占比": "Teacher_career_ratio", "原价": "Original_price", "折扣": "Discount"}, "table_en": {"平台": "Platform", "青少年课程": "Youth_courses", "教师": "Teachers", "学费": "School_fees"}}, "中国城市的企业": {"sqlite": "CREATE TABLE Province (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Number of top 500 enterprises VARCHAR(50), -- 500强企业数量\n  Total revenue (millions of yuan) INTEGER, -- 总营收(亿元)\n  Total profits (millions of yuan) INTEGER, -- 总利润(亿元)\n);\nCREATE TABLE Enterprise (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Province id VARCHAR(50), -- 省份id\n   Other Organiser INTEGER, -- 成立时间\n  Type of company DATETIME, -- 公司类型\n  Classification of areas VARCHAR(50), -- 领域分类\n  Annual turnover VARCHAR(50), -- 年营业额\n  Number of employees INTEGER, -- 员工数\n  Registered capital INTEGER, -- 注册资本\n  500 rankings INTEGER, -- 500强排名\n);\n-- Enterprise.Province id can be joined with Province.Phrase id -- 企业.省份id 与 省份.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "500强企业数量": "Number_of_top_500_enterprises", "总营收(亿元)": "Total_revenue_(millions_of_yuan)", "总利润(亿元)": "Total_profits_(millions_of_yuan)", "省份id": "Province_id", "成立时间": "_Other_Organiser", "公司类型": "Type_of_company", "领域分类": "Classification_of_areas", "年营业额": "Annual_turnover", "员工数": "Number_of_employees", "注册资本": "Registered_capital", "500强排名": "500_rankings"}, "table_en": {"省份": "Province", "企业": "Enterprise"}}, "汽车": {"sqlite": "CREATE TABLE Automotive company (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Country of nationality VARCHAR(50), -- 所属国家\n  Scope of operation VARCHAR(50), -- 经营范围\n  The parent company VARCHAR(50), -- 母公司\n  Number of major departments VARCHAR(50), -- 主要车系数量\n  The world's top 500 INTEGER, -- 世界500强排名\n  Main honours INTEGER, -- 主要荣誉\n);\nCREATE TABLE China Enterprise  Automotive Company (\n  Companyid VARCHAR(50) PRIMARY KEY, -- 公司id\n  Name of Ministry of Industry of China INTEGER, -- 中国事业部名称\n  It's in the city VARCHAR(50), -- 位于城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Total amount invested VARCHAR(50), -- 总投资金额\n  Number of products in charge INTEGER, -- 负责产品数量\n  Main products INTEGER, -- 主要产品\n);\nCREATE TABLE Automobile products (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Launch Time VARCHAR(50), -- 推出时间\n  Type of vehicle DATETIME, -- 车型\n  Number of vehicles VARCHAR(50), -- 车款数量\n  Persistence rate INTEGER, -- 保值率\n  Production companiesd INTEGER, -- 生产公司id\n);\nCREATE TABLE Type of vehicle (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Queue VARCHAR(50), -- 排量\n  Fuel consumption INTEGER, -- 油耗\n  Price of sale INTEGER, -- 售价\n  Product to which id INTEGER, -- 所属产品id\n  Concern index INTEGER, -- 关注指数\n  Cumulative sales INTEGER, -- 累计销量\n  Secure Lines INTEGER, -- 安全排行\n  Performance Row INTEGER, -- 性能排行\n  Gas consumption rows INTEGER, -- 油耗排行\n  Space Row INTEGER, -- 空间排行\n  Comfortable line INTEGER, -- 舒适排行\n);\n-- Type of vehicle.Product to which id can be joined with Automobile products.Phrase id -- 车型.所属产品id 与 汽车产品.词条id\n-- China Enterprise  Automotive Company.Companyid can be joined with Automotive company.Phrase id -- 汽车公司中国事业部.公司id 与 汽车公司.词条id\n-- Automobile products.Production companiesd can be joined with Automotive company.Phrase id -- 汽车产品.生产公司id 与 汽车公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属国家": "Country_of_nationality", "经营范围": "Scope_of_operation", "母公司": "The_parent_company", "主要车系数量": "Number_of_major_departments", "世界500强排名": "The_world's_top_500", "主要荣誉": "Main_honours", "公司id": "Companyid", "中国事业部名称": "Name_of_Ministry_of_Industry_of_China", "位于城市": "It's_in_the_city", "所属省份": "Provinces_to_which_they_belong", "总投资金额": "Total_amount_invested", "负责产品数量": "Number_of_products_in_charge", "主要产品": "Main_products", "推出时间": "Launch_Time", "车型": "Type_of_vehicle", "车款数量": "Number_of_vehicles", "保值率": "Persistence_rate", "生产公司id": "Production_companiesd", "排量": "Queue", "油耗": "Fuel_consumption", "售价": "Price_of_sale", "所属产品id": "Product_to_which_id", "关注指数": "Concern_index", "累计销量": "Cumulative_sales", "安全排行": "Secure_Lines", "性能排行": "Performance_Row", "油耗排行": "Gas_consumption_rows", "空间排行": "Space_Row", "舒适排行": "Comfortable_line"}, "table_en": {"汽车公司": "Automotive_company", "汽车公司中国事业部": "China_Enterprise__Automotive_Company", "汽车产品": "Automobile_products", "车型": "Type_of_vehicle"}}, "相亲软件": {"sqlite": "CREATE TABLE Accompaniment software (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Authentication of real name VARCHAR(50), -- 是否实名认证\n  Certification of assets BINARY, -- 是否资产认证\n  Are you crossing the city? BINARY, -- 是否跨城\n  Business life BINARY, -- 经营年限\n  Number of registered members INTEGER, -- 注册会员数\n);\nCREATE TABLE Accompaniment software dues (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Type of membership INTEGER, -- 会员类型\n  Contributions VARCHAR(50), -- 会费\n);\nCREATE TABLE Member age distribution (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Gender of membership INTEGER, -- 会员性别\n  Number of members aged 25-30 VARCHAR(50), -- 25~30岁会员数量\n  Number of members aged 31 to 35 INTEGER, -- 31~35岁会员数量\n  Number of members aged 36-40 INTEGER, -- 36~40岁会员数量\n  Number of members aged 41-45 INTEGER, -- 41~45岁会员数量\n  Number of members aged 45-55 INTEGER, -- 45~55岁会员数量\n);\nCREATE TABLE Urban distribution of members (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Gender of membership INTEGER, -- 会员性别\n  Urban VARCHAR(50), -- 城市\n  Number of members VARCHAR(50), -- 会员数量\n  Success rate INTEGER, -- 成功率\n);\n-- Member age distribution.Softwareid can be joined with Accompaniment software.Phrase id -- 会员年龄分布.软件id 与 相亲软件.词条id\n-- Accompaniment software dues.Softwareid can be joined with Accompaniment software.Phrase id -- 相亲软件会费.软件id 与 相亲软件.词条id\n-- Urban distribution of members.Softwareid can be joined with Accompaniment software.Phrase id -- 会员城市分布.软件id 与 相亲软件.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "是否实名认证": "Authentication_of_real_name", "是否资产认证": "Certification_of_assets", "是否跨城": "Are_you_crossing_the_city?", "经营年限": "Business_life", "注册会员数": "Number_of_registered_members", "软件id": "Softwareid", "会员类型": "Type_of_membership", "会费": "Contributions", "会员性别": "Gender_of_membership", "25~30岁会员数量": "Number_of_members_aged_25-30", "31~35岁会员数量": "Number_of_members_aged_31_to_35", "36~40岁会员数量": "Number_of_members_aged_36-40", "41~45岁会员数量": "Number_of_members_aged_41-45", "45~55岁会员数量": "Number_of_members_aged_45-55", "城市": "Urban", "会员数量": "Number_of_members", "成功率": "Success_rate"}, "table_en": {"相亲软件": "Accompaniment_software", "相亲软件会费": "Accompaniment_software_dues", "会员年龄分布": "Member_age_distribution", "会员城市分布": "Urban_distribution_of_members"}}, "城市外资吸引力": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Administrative level VARCHAR(50), -- 行政级别\n  Car plate code VARCHAR(50), -- 车牌代码\n);\nCREATE TABLE City building (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Urban id DATETIME, -- 城市id\n  Urban area INTEGER, -- 市区面积\n  Size of area constructed INTEGER, -- 建成区面积\n  Land area for urban construction INTEGER, -- 城市建设用地面积\n  Land area in the current year INTEGER, -- 本年征地面积\n  Number of built-up areas INTEGER, -- 建成区排名\n);\nCREATE TABLE Urban FDI attraction (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Urban id DATETIME, -- 城市id\n  Gross industrial product (millions) INTEGER, -- 工业总产值(亿)\n  Domestic resources (millions) INTEGER, -- 内资(亿)\n  Foreign capital (billions) INTEGER, -- 外资(亿)\n  Intra-provincial rankings INTEGER, -- 省内排名\n);\nCREATE TABLE Real use of foreign capital in cities (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Urban id DATETIME, -- 城市id\n  Actual utilization of foreign direct investment (US$ billion) INTEGER, -- 实际利用外资(亿美元)\n  The same speed as before INTEGER, -- 同比增速\n);\n-- Real use of foreign capital in cities.Urban id can be joined with Urban.Phrase id -- 城市实际利用外资.城市id 与 城市.词条id\n-- Urban FDI attraction.Urban id can be joined with Urban.Phrase id -- 城市外资吸引力.城市id 与 城市.词条id\n-- City building.Urban id can be joined with Urban.Phrase id -- 城市城建.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "行政级别": "Administrative_level", "车牌代码": "Car_plate_code", "年份": "Year", "城市id": "Urban_id", "市区面积": "Urban_area", "建成区面积": "Size_of_area_constructed", "城市建设用地面积": "Land_area_for_urban_construction", "本年征地面积": "Land_area_in_the_current_year", "建成区排名": "Number_of_built-up_areas", "工业总产值(亿)": "Gross_industrial_product_(millions)", "内资(亿)": "Domestic_resources_(millions)", "外资(亿)": "Foreign_capital_(billions)", "省内排名": "Intra-provincial_rankings", "实际利用外资(亿美元)": "Actual_utilization_of_foreign_direct_investment_(US$_billion)", "同比增速": "The_same_speed_as_before"}, "table_en": {"城市": "Urban", "城市城建": "City_building", "城市外资吸引力": "Urban_FDI_attraction", "城市实际利用外资": "Real_use_of_foreign_capital_in_cities"}}, "朝代": {"sqlite": "CREATE TABLE Dynasty! (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Start Time VARCHAR(50), -- 起始时间\n  End Time DATETIME, -- 结束时间\n  The capital DATETIME, -- 都城\n  Number of population VARCHAR(50), -- 人口数量\n  Land area INTEGER, -- 国土面积\n);\nCREATE TABLE Emperor (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Chinese Name INTEGER, -- 中文名\n  ♪ Where the dynasty is id ♪ VARCHAR(50), -- 所处朝代id\n  Date of birth INTEGER, -- 出生时间\n  Time of death DATETIME, -- 去世时间\n  Main achievements DATETIME, -- 主要成就\n  Year VARCHAR(50), -- 年号\n);\nCREATE TABLE The emperors of the dynasty (\n  Emperor id VARCHAR(50) PRIMARY KEY, -- 皇帝id\n  Dynasty id INTEGER, -- 朝代id\n  Landing time INTEGER, -- 登基时间\n   Other Organiser DATETIME, -- 在位时间\n  Number one INTEGER, -- 第几位\n);\nCREATE TABLE Year (\n  Year INTEGER PRIMARY KEY, -- 年号\n  Dynasty id VARCHAR(50), -- 朝代id\n  Last year INTEGER, -- 上一年号\n  Next year VARCHAR(50), -- 下一年号\n);\nCREATE TABLE Minister (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  ♪ Where the dynasty is id ♪ VARCHAR(50), -- 所处朝代id\n  Date of birth INTEGER, -- 出生时间\n  Time of death DATETIME, -- 去世时间\n  Occupation DATETIME, -- 职业\n);\nCREATE TABLE The Emperor of the Secretary of State (\n  Minister id VARCHAR(50) PRIMARY KEY, -- 大臣id\n  Emperor id INTEGER, -- 皇帝id\n  Auxiliary Time INTEGER, -- 辅佐时间\n);\n-- The Emperor of the Secretary of State.Emperor id can be joined with Emperor.Phrase id -- 大臣辅佐的皇帝.皇帝id 与 皇帝.词条id\n-- Minister.♪ Where the dynasty is id ♪ can be joined with Dynasty!.Phrase id -- 大臣.所处朝代id 与 朝代.词条id\n-- The emperors of the dynasty.Emperor id can be joined with Emperor.Phrase id -- 各朝代皇帝.皇帝id 与 皇帝.词条id\n-- Year.Dynasty id can be joined with Dynasty!.Phrase id -- 年号.朝代id 与 朝代.词条id\n-- The emperors of the dynasty.Dynasty id can be joined with Dynasty!.Phrase id -- 各朝代皇帝.朝代id 与 朝代.词条id\n-- Emperor.♪ Where the dynasty is id ♪ can be joined with Dynasty!.Phrase id -- 皇帝.所处朝代id 与 朝代.词条id\n-- The Emperor of the Secretary of State.Minister id can be joined with Minister.Phrase id -- 大臣辅佐的皇帝.大臣id 与 大臣.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "起始时间": "Start_Time", "结束时间": "End_Time", "都城": "The_capital", "人口数量": "Number_of_population", "国土面积": "Land_area", "中文名": "Chinese_Name", "所处朝代id": "♪_Where_the_dynasty_is_id_♪", "出生时间": "Date_of_birth", "去世时间": "Time_of_death", "主要成就": "Main_achievements", "年号": "Year", "皇帝id": "Emperor_id", "朝代id": "Dynasty_id", "登基时间": "Landing_time", "在位时间": "_Other_Organiser", "第几位": "Number_one", "上一年号": "Last_year", "下一年号": "Next_year", "姓名": "Name", "职业": "Occupation", "大臣id": "Minister_id", "辅佐时间": "Auxiliary_Time"}, "table_en": {"朝代": "Dynasty!", "皇帝": "Emperor", "各朝代皇帝": "The_emperors_of_the_dynasty", "年号": "Year", "大臣": "Minister", "大臣辅佐的皇帝": "The_Emperor_of_the_Secretary_of_State"}}, "电视机": {"sqlite": "CREATE TABLE The TV brand (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Company to which it belongs VARCHAR(50), -- 所属公司\n  National VARCHAR(50), -- 国家\n  Market share VARCHAR(50), -- 市场份额\n);\nCREATE TABLE Type of television (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Product location VARCHAR(50), -- 产品定位\n  Screen Size VARCHAR(50), -- 屏幕尺寸\n  Screen Scale INTEGER, -- 屏幕比例\n  Resolution VARCHAR(50), -- 分辨率\n  Backlight lifetime INTEGER, -- 背光灯寿命\n  Pricing INTEGER, -- 定价\n  Brandid INTEGER, -- 品牌id\n);\nCREATE TABLE Television platform sales (\n  Model id INTEGER PRIMARY KEY, -- 型号id\n  Platform INTEGER, -- 平台\n  Price of sale VARCHAR(50), -- 售价\n  Maximum price INTEGER, -- 最高价格\n  Minimum price INTEGER, -- 最低价格\n  Sales INTEGER, -- 售卖量\n  User Rating INTEGER, -- 用户评分\n);\nCREATE TABLE All city TVs are sold (\n  Urban INTEGER PRIMARY KEY, -- 城市\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Sale of television sets VARCHAR(50), -- 电视机售卖量\n  It's an average time for watching TV days INTEGER, -- 观看电视日平均用时\n);\n-- Type of television.Brandid can be joined with The TV brand.Phrase id -- 电视机型号.品牌id 与 电视机品牌.词条id\n-- Television platform sales.Model id can be joined with Type of television.Phrase id -- 电视机平台售卖.型号id 与 电视机型号.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属公司": "Company_to_which_it_belongs", "国家": "National", "市场份额": "Market_share", "产品定位": "Product_location", "屏幕尺寸": "Screen_Size", "屏幕比例": "Screen_Scale", "分辨率": "Resolution", "背光灯寿命": "Backlight_lifetime", "定价": "Pricing", "品牌id": "Brandid", "型号id": "Model_id", "平台": "Platform", "售价": "Price_of_sale", "最高价格": "Maximum_price", "最低价格": "Minimum_price", "售卖量": "Sales", "用户评分": "User_Rating", "城市": "Urban", "所属省份": "Provinces_to_which_they_belong", "电视机售卖量": "Sale_of_television_sets", "观看电视日平均用时": "It's_an_average_time_for_watching_TV_days"}, "table_en": {"电视机品牌": "The_TV_brand", "电视机型号": "Type_of_television", "电视机平台售卖": "Television_platform_sales", "各城市电视机售卖": "All_city_TVs_are_sold"}}, "中国城市产业结构": {"sqlite": "CREATE TABLE Provincial industries (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Income from primary industries VARCHAR(50), -- 第一产业收入\n  Growth of the primary sector INTEGER, -- 第一产业增长\n  Income from the secondary sector INTEGER, -- 第二产业收入\n  Growth in the secondary sector INTEGER, -- 第二产业增长\n  Income from the tertiary sector INTEGER, -- 第三产业收入\n  Growth in the tertiary sector INTEGER, -- 第三产业增长\n);\nCREATE TABLE Urban transport (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Province to which id belongs VARCHAR(50), -- 所属省份id\n  Number of airports INTEGER, -- 机场数量\n  Number of railway stations INTEGER, -- 火车站数量\n  Number of subway lines INTEGER, -- 地铁线数量\n  Number of bus lines INTEGER, -- 公交线数量\n);\nCREATE TABLE High Iron City (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Province id VARCHAR(50), -- 省份id\n  Number of high railway stations INTEGER, -- 高铁站数量\n  Number of cities connected INTEGER, -- 联通城市数量\n);\nCREATE TABLE The pier (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Urban id VARCHAR(50), -- 城市id\n  Passenger throughput INTEGER, -- 旅客吞吐量\n);\n-- Urban transport.Province to which id belongs can be joined with Provincial industries.Phrase id -- 城市交通.所属省份id 与 省份产业.词条id\n-- The pier.Urban id can be joined with Urban transport.Phrase id -- 码头.城市id 与 城市交通.词条id\n-- High Iron City.Province id can be joined with Provincial industries.Phrase id -- 高铁城市.省份id 与 省份产业.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "第一产业收入": "Income_from_primary_industries", "第一产业增长": "Growth_of_the_primary_sector", "第二产业收入": "Income_from_the_secondary_sector", "第二产业增长": "Growth_in_the_secondary_sector", "第三产业收入": "Income_from_the_tertiary_sector", "第三产业增长": "Growth_in_the_tertiary_sector", "所属省份id": "Province_to_which_id_belongs", "机场数量": "Number_of_airports", "火车站数量": "Number_of_railway_stations", "地铁线数量": "Number_of_subway_lines", "公交线数量": "Number_of_bus_lines", "省份id": "Province_id", "高铁站数量": "Number_of_high_railway_stations", "联通城市数量": "Number_of_cities_connected", "城市id": "Urban_id", "旅客吞吐量": "Passenger_throughput"}, "table_en": {"省份产业": "Provincial_industries", "城市交通": "Urban_transport", "高铁城市": "High_Iron_City", "码头": "The_pier"}}, "高考": {"sqlite": "CREATE TABLE Regional candidates  2018 (\n  The candidate is in the province VARCHAR(50) PRIMARY KEY, -- 考生所在省份\n  Category of candidates VARCHAR(50), -- 考生类别\n  Examination type VARCHAR(50), -- 考卷类型\n  Lines of Numeric Fractions VARCHAR(50), -- 状元分数线\n  Number of candidates INTEGER, -- 考生数量\n  Number of candidates over 700 INTEGER, -- 700以上考生数量\n);\nCREATE TABLE Regional fraction lines  2018 (\n  The candidate is in the province INTEGER PRIMARY KEY, -- 考生所在省份\n  Category of candidates VARCHAR(50), -- 考生类别\n  Batch VARCHAR(50), -- 批次\n  Fraction Lines VARCHAR(50), -- 分数线\n  Admission rate INTEGER, -- 录取率\n);\nCREATE TABLE High school scores line  2018 (\n  Name of institution INTEGER PRIMARY KEY, -- 院校名称\n  The candidate is in the province VARCHAR(50), -- 考生所在省份\n  Category of candidates VARCHAR(50), -- 考生类别\n  Batch VARCHAR(50), -- 批次\n  Fraction Lines VARCHAR(50), -- 分数线\n  Highest score INTEGER, -- 最高分\n  Average score INTEGER, -- 平均分\n  Number of students enrolled INTEGER, -- 招生人数\n);\nCREATE TABLE One down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down  one down (\n  The candidate is in the province INTEGER PRIMARY KEY, -- 考生所在省份\n  Category of candidates VARCHAR(50), -- 考生类别\n  Fraction VARCHAR(50), -- 分数段\n  Number of personnel in this paragraph INTEGER, -- 本段人数\n  Cumulative INTEGER, -- 累计人数\n);\n", "columns_en": {"考生所在省份": "The_candidate_is_in_the_province", "考生类别": "Category_of_candidates", "考卷类型": "Examination_type", "状元分数线": "Lines_of_Numeric_Fractions", "考生数量": "Number_of_candidates", "700以上考生数量": "Number_of_candidates_over_700", "批次": "Batch", "分数线": "Fraction_Lines", "录取率": "Admission_rate", "院校名称": "Name_of_institution", "最高分": "Highest_score", "平均分": "Average_score", "招生人数": "Number_of_students_enrolled", "分数段": "Fraction", "本段人数": "Number_of_personnel_in_this_paragraph", "累计人数": "Cumulative"}, "table_en": {"2018年各地区考生": "Regional_candidates__2018", "2018年各地区分数线": "Regional_fraction_lines__2018", "2018年高校分数线": "High_school_scores_line__2018", "一分一档": "One_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down__one_down"}}, "城市图书馆": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Number of libraries VARCHAR(50), -- 图书馆数量\n  Education ranking INTEGER, -- 教育排名\n);\nCREATE TABLE Library (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Address VARCHAR(50), -- 地址\n   Other Organiser VARCHAR(50), -- 所属城市id\n  Properties INTEGER, -- 属性\n  Building time VARCHAR(50), -- 建馆时间\n  Area DATETIME, -- 面积\n  Number of collections INTEGER, -- 藏品数量\n  Number of reading rooms INTEGER, -- 阅览室数量\n  Number of seats INTEGER, -- 座位数量\n  Ancient INTEGER, -- 古籍数\n  Digital resources INTEGER, -- 数字资源\n);\nCREATE TABLE Number of employees (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Library id DATETIME, -- 图书馆id\n  Number of employees in service INTEGER, -- 在编职工数量\n  Percentage of post-graduate education INTEGER, -- 研究生学历占比\n  Percentage of scientific history INTEGER, -- 本科学历占比\n);\n-- Number of employees.Library id can be joined with Library.Phrase id -- 员工数量.图书馆id 与 图书馆.词条id\n-- Library. Other Organiser can be joined with Urban.Phrase id -- 图书馆.所属城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "图书馆数量": "Number_of_libraries", "教育排名": "Education_ranking", "地址": "Address", "所属城市id": "_Other_Organiser", "属性": "Properties", "建馆时间": "Building_time", "面积": "Area", "藏品数量": "Number_of_collections", "阅览室数量": "Number_of_reading_rooms", "座位数量": "Number_of_seats", "古籍数": "Ancient", "数字资源": "Digital_resources", "年份": "Year", "图书馆id": "Library_id", "在编职工数量": "Number_of_employees_in_service", "研究生学历占比": "Percentage_of_post-graduate_education", "本科学历占比": "Percentage_of_scientific_history"}, "table_en": {"城市": "Urban", "图书馆": "Library", "员工数量": "Number_of_employees"}}, "企业股东": {"sqlite": "CREATE TABLE Enterprise (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of enterprise INTEGER, -- 企业名称\n  Market value VARCHAR(50), -- 市值\n  Current stock price INTEGER, -- 当前股价\n);\nCREATE TABLE Shareholders (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Age VARCHAR(50), -- 年龄\n  Highest level of education INTEGER, -- 最高学历\n);\nCREATE TABLE Shareholders of an enterprise (\n  Shareholdersid VARCHAR(50) PRIMARY KEY, -- 股东id\n  Enterprise id INTEGER, -- 企业id\n  Positions held INTEGER, -- 任职职位\n  Ownership of shares VARCHAR(50), -- 拥有股份\n);\n-- Shareholders of an enterprise.Shareholdersid can be joined with Shareholders.Phrase id -- 企业股东.股东id 与 股东.词条id\n-- Shareholders of an enterprise.Enterprise id can be joined with Enterprise.Phrase id -- 企业股东.企业id 与 企业.词条id", "columns_en": {"词条id": "Phrase_id", "企业名称": "Name_of_enterprise", "市值": "Market_value", "当前股价": "Current_stock_price", "姓名": "Name", "年龄": "Age", "最高学历": "Highest_level_of_education", "股东id": "Shareholdersid", "企业id": "Enterprise_id", "任职职位": "Positions_held", "拥有股份": "Ownership_of_shares"}, "table_en": {"企业": "Enterprise", "股东": "Shareholders", "企业股东": "Shareholders_of_an_enterprise"}}, "人口出生死亡及结婚离婚率": {"sqlite": "CREATE TABLE Birth and death rates among the population of the provinces (\n  Year VARCHAR(50) PRIMARY KEY, -- 年份\n  Province DATETIME, -- 省份\n  Infant birth rate VARCHAR(50), -- 婴儿出生率\n  Second birth rate INTEGER, -- 二胎出生率\n  Mortality rate of the population INTEGER, -- 人口死亡率\n  Total population INTEGER, -- 总人口\n);\nCREATE TABLE Marriage and divorce rates in the provinces (\n  Year INTEGER PRIMARY KEY, -- 年份\n  Province DATETIME, -- 省份\n  Registration of marriages VARCHAR(50), -- 结婚登记\n  Registration of divorces INTEGER, -- 离婚登记\n  Divorce rate INTEGER, -- 离婚率\n);\nCREATE TABLE Age distribution of the single population in the provinces (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Gender VARCHAR(50), -- 性别\n  Age group VARCHAR(50), -- 年龄段\n  Singles VARCHAR(50), -- 单身人数\n  Percentage of total singles INTEGER, -- 占总单身人数比例\n);\n", "columns_en": {"年份": "Year", "省份": "Province", "婴儿出生率": "Infant_birth_rate", "二胎出生率": "Second_birth_rate", "人口死亡率": "Mortality_rate_of_the_population", "总人口": "Total_population", "结婚登记": "Registration_of_marriages", "离婚登记": "Registration_of_divorces", "离婚率": "Divorce_rate", "性别": "Gender", "年龄段": "Age_group", "单身人数": "Singles", "占总单身人数比例": "Percentage_of_total_singles"}, "table_en": {"各省人口出生及死亡率": "Birth_and_death_rates_among_the_population_of_the_provinces", "各省结婚及离婚率": "Marriage_and_divorce_rates_in_the_provinces", "省份单身人口年龄分布": "Age_distribution_of_the_single_population_in_the_provinces"}}, "世界语言分布": {"sqlite": "CREATE TABLE Languages (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Department(s) of language VARCHAR(50), -- 所属语系\n  Glossary VARCHAR(50), -- 词汇量\n  Number of users INTEGER, -- 使用人数\n  Share of global population INTEGER, -- 占全球人口比例\n  International scoring INTEGER, -- 国际评分\n  Learning difficulties INTEGER, -- 学习难度\n  Number of branches VARCHAR(50), -- 分支数量\n  Number of official language countries INTEGER, -- 官方语言国家数量\n);\nCREATE TABLE National languages (\n  Language id INTEGER PRIMARY KEY, -- 语言id\n  National INTEGER, -- 国家\n  Status VARCHAR(50), -- 地位\n  Number of users VARCHAR(50), -- 使用人数\n  Proportion of population INTEGER, -- 人口占比\n);\nCREATE TABLE Chinese English Examination (\n  Applicant State INTEGER PRIMARY KEY, -- 申请国家\n  Type of examination VARCHAR(50), -- 考试类型\n  Through fractions VARCHAR(50), -- 通过分数\n);\n-- National languages.Language id can be joined with Languages.Phrase id -- 各国家语言.语言id 与 语言.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属语系": "Department(s)_of_language", "词汇量": "Glossary", "使用人数": "Number_of_users", "占全球人口比例": "Share_of_global_population", "国际评分": "International_scoring", "学习难度": "Learning_difficulties", "分支数量": "Number_of_branches", "官方语言国家数量": "Number_of_official_language_countries", "语言id": "Language_id", "国家": "National", "地位": "Status", "人口占比": "Proportion_of_population", "申请国家": "Applicant_State", "考试类型": "Type_of_examination", "通过分数": "Through_fractions"}, "table_en": {"语言": "Languages", "各国家语言": "National_languages", "中国英语考试": "Chinese_English_Examination"}}, "中国城市潜力": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Provinces to which they belong VARCHAR(50), -- 所属省份\n  Percentage of towns and cities VARCHAR(50), -- 城镇比例\n  Total GDP INTEGER, -- GDP总额\n  Average wage INTEGER, -- 平均工资\n  Rental income as a percentage INTEGER, -- 房租收入占比\n);\nCREATE TABLE Top ten cities (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Total consumption INTEGER, -- 消费总额\n  Per capita consumption INTEGER, -- 人均消费\n);\nCREATE TABLE Population structure (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Name INTEGER, -- 名称\n  Proportion of births VARCHAR(50), -- 出生比例\n  Proportion of deaths INTEGER, -- 死亡比例\n  Proportion of elderly population INTEGER, -- 老年人口比例\n  Inflow ratio INTEGER, -- 流入比例\n);\nCREATE TABLE The top ten cities (\n  Urban id INTEGER PRIMARY KEY, -- 城市id\n  Name INTEGER, -- 名称\n  The price of the house INTEGER, -- 房价\n  Area of sale of merchandise rooms INTEGER, -- 商品房销售面积\n);\n-- Population structure.Urban id can be joined with Urban.Phrase id -- 人口结构.城市id 与 城市.词条id\n-- Top ten cities.Urban id can be joined with Urban.Phrase id -- 消费力前十城市.城市id 与 城市.词条id\n-- The top ten cities.Urban id can be joined with Urban.Phrase id -- 房价前十城市.城市id 与 城市.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所属省份": "Provinces_to_which_they_belong", "城镇比例": "Percentage_of_towns_and_cities", "GDP总额": "Total_GDP", "平均工资": "Average_wage", "房租收入占比": "Rental_income_as_a_percentage", "城市id": "Urban_id", "消费总额": "Total_consumption", "人均消费": "Per_capita_consumption", "出生比例": "Proportion_of_births", "死亡比例": "Proportion_of_deaths", "老年人口比例": "Proportion_of_elderly_population", "流入比例": "Inflow_ratio", "房价": "The_price_of_the_house", "商品房销售面积": "Area_of_sale_of_merchandise_rooms"}, "table_en": {"城市": "Urban", "消费力前十城市": "Top_ten_cities", "人口结构": "Population_structure", "房价前十城市": "The_top_ten_cities"}}, "二手车软件": {"sqlite": "CREATE TABLE Second-hand vehicle software (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Online time VARCHAR(50), -- 上线时间\n  Founder DATETIME, -- 创始人\n  Official Network VARCHAR(50), -- 官网\n  Number of provinces covered VARCHAR(50), -- 覆盖省份数量\n  Number of cities covered INTEGER, -- 覆盖城市数量\n  Number of used vehicles INTEGER, -- 二手车数量\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE Second-hand vehicle software covering provinces (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Province INTEGER, -- 省份\n  Overwrite Time VARCHAR(50), -- 覆盖时间\n  Number of used vehicles DATETIME, -- 二手车数量\n  Number of tradable vehicles INTEGER, -- 交易车数量\n  Cumulative transactions INTEGER, -- 累计交易额\n   Other Organiser INTEGER, -- 所在省排名\n);\nCREATE TABLE Second-hand car software advocate (\n  Softwareid INTEGER PRIMARY KEY, -- 软件id\n  Advocate INTEGER, -- 代言人\n  Year VARCHAR(50), -- 年份\n);\n-- Second-hand car software advocate.Softwareid can be joined with Second-hand vehicle software.Phrase id -- 二手车软件代言人.软件id 与 二手车软件.词条id\n-- Second-hand vehicle software covering provinces.Softwareid can be joined with Second-hand vehicle software.Phrase id -- 二手车软件覆盖省份.软件id 与 二手车软件.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "上线时间": "Online_time", "创始人": "Founder", "官网": "Official_Network", "覆盖省份数量": "Number_of_provinces_covered", "覆盖城市数量": "Number_of_cities_covered", "二手车数量": "Number_of_used_vehicles", "评分": "Rating", "软件id": "Softwareid", "省份": "Province", "覆盖时间": "Overwrite_Time", "交易车数量": "Number_of_tradable_vehicles", "累计交易额": "Cumulative_transactions", "所在省排名": "_Other_Organiser", "代言人": "Advocate", "年份": "Year"}, "table_en": {"二手车软件": "Second-hand_vehicle_software", "二手车软件覆盖省份": "Second-hand_vehicle_software_covering_provinces", "二手车软件代言人": "Second-hand_car_software_advocate"}}, "世界湖泊": {"sqlite": "CREATE TABLE Lakes (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Geographical location VARCHAR(50), -- 地理位置\n  Area of land area VARCHAR(50), -- 占地面积\n  Water storage INTEGER, -- 蓄水量\n  Maximum depth INTEGER, -- 最大深度\n  Properties INTEGER, -- 属性\n  Number of countries bordering BINARY, -- 接壤国家数\n);\nCREATE TABLE Countries bordering lakes (\n  Lakesid INTEGER PRIMARY KEY, -- 湖泊id\n  National INTEGER, -- 国家\n  Means of bordering VARCHAR(50), -- 接壤方式\n);\nCREATE TABLE Lakes-coastal cities (\n  Lakesid BINARY PRIMARY KEY, -- 湖泊id\n  Urban INTEGER, -- 城市\n  National VARCHAR(50), -- 国家\n);\nCREATE TABLE River (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Watershed area VARCHAR(50), -- 流域面积\n  River Leader INTEGER, -- 河长\n);\nCREATE TABLE The lake pours into the river (\n  Lakesid INTEGER PRIMARY KEY, -- 湖泊id\n  Riverid INTEGER, -- 河流id\n);\nCREATE TABLE The lake flows out of the river (\n  Lakesid INTEGER PRIMARY KEY, -- 湖泊id\n  Riverid INTEGER, -- 河流id\n);\n-- The lake flows out of the river.Lakesid can be joined with Lakes.Phrase id -- 湖泊流出河流.湖泊id 与 湖泊.词条id\n-- The lake pours into the river.Riverid can be joined with River.Phrase id -- 湖泊注入河流.河流id 与 河流.词条id\n-- Lakes-coastal cities.Lakesid can be joined with Lakes.Phrase id -- 湖泊沿岸城市.湖泊id 与 湖泊.词条id\n-- The lake flows out of the river.Riverid can be joined with River.Phrase id -- 湖泊流出河流.河流id 与 河流.词条id\n-- The lake pours into the river.Lakesid can be joined with Lakes.Phrase id -- 湖泊注入河流.湖泊id 与 湖泊.词条id\n-- Countries bordering lakes.Lakesid can be joined with Lakes.Phrase id -- 湖泊接壤国家.湖泊id 与 湖泊.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "地理位置": "Geographical_location", "占地面积": "Area_of_land_area", "蓄水量": "Water_storage", "最大深度": "Maximum_depth", "属性": "Properties", "接壤国家数": "Number_of_countries_bordering", "湖泊id": "Lakesid", "国家": "National", "接壤方式": "Means_of_bordering", "城市": "Urban", "流域面积": "Watershed_area", "河长": "River_Leader", "河流id": "Riverid"}, "table_en": {"湖泊": "Lakes", "湖泊接壤国家": "Countries_bordering_lakes", "湖泊沿岸城市": "Lakes-coastal_cities", "河流": "River", "湖泊注入河流": "The_lake_pours_into_the_river", "湖泊流出河流": "The_lake_flows_out_of_the_river"}}, "银行贷款": {"sqlite": "CREATE TABLE Urban (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  First suite down payment ratio VARCHAR(50), -- 首套房首付比例\n  The first payment rate for the second suite INTEGER, -- 二套房首付比例\n  Average house price INTEGER, -- 平均房价\n);\nCREATE TABLE Bank (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Type of company VARCHAR(50), -- 公司类型\n  500 rankings VARCHAR(50), -- 500强排名\n);\nCREATE TABLE Interest rate on bank mortgages (\n  Bankid INTEGER PRIMARY KEY, -- 银行id\n  Urban id INTEGER, -- 城市id\n  First suite loan rate INTEGER, -- 首套房贷款利率\n  Interest rate on second-bedroom loan INTEGER, -- 二套房贷款利率\n  Minimum age for advance repayment INTEGER, -- 提前还款最低年限\n);\n-- Interest rate on bank mortgages.Urban id can be joined with Urban.Phrase id -- 银行房贷利率.城市id 与 城市.词条id\n-- Interest rate on bank mortgages.Bankid can be joined with Bank.Phrase id -- 银行房贷利率.银行id 与 银行.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "首套房首付比例": "First_suite_down_payment_ratio", "二套房首付比例": "The_first_payment_rate_for_the_second_suite", "平均房价": "Average_house_price", "公司类型": "Type_of_company", "500强排名": "500_rankings", "银行id": "Bankid", "城市id": "Urban_id", "首套房贷款利率": "First_suite_loan_rate", "二套房贷款利率": "Interest_rate_on_second-bedroom_loan", "提前还款最低年限": "Minimum_age_for_advance_repayment"}, "table_en": {"城市": "Urban", "银行": "Bank", "银行房贷利率": "Interest_rate_on_bank_mortgages"}}, "空难": {"sqlite": "CREATE TABLE Airlines (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Headquarters locations VARCHAR(50), -- 总部地点\n   Other Organiser VARCHAR(50), -- 成立时间\n  Operating income DATETIME, -- 营业收入\n  Net profit INTEGER, -- 净利润\n  Share of revenue from domestic passenger transport INTEGER, -- 国内客运收入占比\n  Revenue from Hong Kong and Macao passenger traffic INTEGER, -- 港澳台客运收入占比\n  Share of international passenger revenue INTEGER, -- 国际客运收入占比\n  Year-round occupancy rate INTEGER, -- 全年客座率\n);\nCREATE TABLE Air crash (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Time of occurrence VARCHAR(50), -- 发生时间\n  Number of persons killed DATETIME, -- 遇难人数\n  Number of survivors INTEGER, -- 生还人数\n  Cause of the accident INTEGER, -- 事故原因\n  Airlineid VARCHAR(50), -- 航空公司id\n  Grounds for take-off INTEGER, -- 起飞地\n  Destination VARCHAR(50), -- 目的地\n);\n-- Air crash.Airlineid can be joined with Airlines.Phrase id -- 空难.航空公司id 与 航空公司.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "总部地点": "Headquarters_locations", "成立时间": "_Other_Organiser", "营业收入": "Operating_income", "净利润": "Net_profit", "国内客运收入占比": "Share_of_revenue_from_domestic_passenger_transport", "港澳台客运收入占比": "Revenue_from_Hong_Kong_and_Macao_passenger_traffic", "国际客运收入占比": "Share_of_international_passenger_revenue", "全年客座率": "Year-round_occupancy_rate", "发生时间": "Time_of_occurrence", "遇难人数": "Number_of_persons_killed", "生还人数": "Number_of_survivors", "事故原因": "Cause_of_the_accident", "航空公司id": "Airlineid", "起飞地": "Grounds_for_take-off", "目的地": "Destination"}, "table_en": {"航空公司": "Airlines", "空难": "Air_crash"}}, "留学移民签证公司": {"sqlite": "CREATE TABLE Migrant intermediaries (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 位于城市\n   Other Organiser VARCHAR(50), -- 创立时间\n  Number of persons served DATETIME, -- 服务人数\n  Number of successful INTEGER, -- 成功人数\n  It's a good one INTEGER, -- 点赞数\n  Number of shares INTEGER, -- 分享数\n  Number of consultations INTEGER, -- 咨询数\n  Collections INTEGER, -- 收藏数\n  Number of votes obtained INTEGER, -- 总得票数\n);\nCREATE TABLE Immigration costs (\n  Migrant Brokerid INTEGER PRIMARY KEY, -- 移民中介id\n  National INTEGER, -- 国家\n  Type of immigrant VARCHAR(50), -- 移民类型\n  Minimum cost VARCHAR(50), -- 最低费用\n  Intermediary costs INTEGER, -- 中介费用\n);\nCREATE TABLE Intermediaries for study (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Application success rate VARCHAR(50), -- 申请成功率\n  Domestic rankings INTEGER, -- 国内排名\n);\nCREATE TABLE Cost of studying abroad (\n  Intermediary id INTEGER PRIMARY KEY, -- 留学中介id\n  Applicant State INTEGER, -- 申请国家\n  School ranking VARCHAR(50), -- 学校排名\n  Prior-period charges INTEGER, -- 前期收费\n  Ranking fees INTEGER, -- 排名收费\n  Percentage of non-entitled refunds INTEGER, -- 未录取退费比例\n);\n-- Immigration costs.Migrant Brokerid can be joined with Migrant intermediaries.Phrase id -- 移民费用.移民中介id 与 移民中介.词条id\n-- Cost of studying abroad.Intermediary id can be joined with Intermediaries for study.Phrase id -- 留学费用.留学中介id 与 留学中介.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "位于城市": "It's_in_the_city", "创立时间": "_Other_Organiser", "服务人数": "Number_of_persons_served", "成功人数": "Number_of_successful", "点赞数": "It's_a_good_one", "分享数": "Number_of_shares", "咨询数": "Number_of_consultations", "收藏数": "Collections", "总得票数": "Number_of_votes_obtained", "移民中介id": "Migrant_Brokerid", "国家": "National", "移民类型": "Type_of_immigrant", "最低费用": "Minimum_cost", "中介费用": "Intermediary_costs", "申请成功率": "Application_success_rate", "国内排名": "Domestic_rankings", "留学中介id": "Intermediary_id", "申请国家": "Applicant_State", "学校排名": "School_ranking", "前期收费": "Prior-period_charges", "排名收费": "Ranking_fees", "未录取退费比例": "Percentage_of_non-entitled_refunds"}, "table_en": {"移民中介": "Migrant_intermediaries", "移民费用": "Immigration_costs", "留学中介": "Intermediaries_for_study", "留学费用": "Cost_of_studying_abroad"}}, "考研": {"sqlite": "CREATE TABLE Colleges of higher education (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  It's in the city VARCHAR(50), -- 所在城市\n  Is it 985? VARCHAR(50), -- 是否985\n  Is it 211? BINARY, -- 是否211\n  Number of graduates of undergraduate studies BINARY, -- 本科毕业人数\n  Number of persons continuing their studies INTEGER, -- 继续深造人数\n  Undergraduate employment rate INTEGER, -- 本科就业率\n);\nCREATE TABLE I've got a lot of pros and pros (\n  School id INTEGER PRIMARY KEY, -- 学校id\n  Professional INTEGER, -- 专业\n  Professional national ranking VARCHAR(50), -- 专业全国排名\n  Number of professional graduates INTEGER, -- 专业毕业人数\n  Number of master ' s mentors INTEGER, -- 硕士导师数量\n  Number of master ' s students enrolled INTEGER, -- 硕士招生人数\n  Number of births INTEGER, -- 推免生人数\n);\nCREATE TABLE Registration of candidates by province (\n  Province INTEGER PRIMARY KEY, -- 省份\n  Sex of candidates VARCHAR(50), -- 考生性别\n  Number of candidates VARCHAR(50), -- 考生数量\n);\nCREATE TABLE I'm going to go to college (\n  Quest students                                                                                                                                                      INTEGER PRIMARY KEY, -- 考生生源高校id\n  Candidates for higher education ed INTEGER, -- 考生报考高校id\n  Number of candidates INTEGER, -- 考生数量\n);\n-- I'm going to go to college.Quest students                                                                                                                                                      can be joined with Colleges of higher education.Phrase id -- 报考高校.考生生源高校id 与 高校.词条id\n-- I'm going to go to college.Candidates for higher education ed can be joined with Colleges of higher education.Phrase id -- 报考高校.考生报考高校id 与 高校.词条id\n-- I've got a lot of pros and pros.School id can be joined with Colleges of higher education.Phrase id -- 各专业推免生.学校id 与 高校.词条id", "columns_en": {"词条id": "Phrase_id", "名称": "Name", "所在城市": "It's_in_the_city", "是否985": "Is_it_985?", "是否211": "Is_it_211?", "本科毕业人数": "Number_of_graduates_of_undergraduate_studies", "继续深造人数": "Number_of_persons_continuing_their_studies", "本科就业率": "Undergraduate_employment_rate", "学校id": "School_id", "专业": "Professional", "专业全国排名": "Professional_national_ranking", "专业毕业人数": "Number_of_professional_graduates", "硕士导师数量": "Number_of_master_'_s_mentors", "硕士招生人数": "Number_of_master_'_s_students_enrolled", "推免生人数": "Number_of_births", "省份": "Province", "考生性别": "Sex_of_candidates", "考生数量": "Number_of_candidates", "考生生源高校id": "Quest_students_____________________________________________________________________________________________________________________________________________________", "考生报考高校id": "Candidates_for_higher_education_ed"}, "table_en": {"高校": "Colleges_of_higher_education", "各专业推免生": "I've_got_a_lot_of_pros_and_pros", "各省考研报名情况": "Registration_of_candidates_by_province", "报考高校": "I'm_going_to_go_to_college"}}, "足球世界杯": {"sqlite": "CREATE TABLE Team (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Chinese Team Name INTEGER, -- 中文队名\n  Territory to which it belongs VARCHAR(50), -- 所属地区\n   Other Organiser VARCHAR(50), -- 成立时间\n  FIFA ranking DATETIME, -- FIFA排名\n  Number of champions INTEGER, -- 冠军次数\n);\nCREATE TABLE World Cup (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 名称\n  Date of holding VARCHAR(50), -- 举办时间\n  Host country DATETIME, -- 举办国家\n  Number of teams participating VARCHAR(50), -- 参赛球队数量\n  Number of competitions INTEGER, -- 比赛场数\n  The finals INTEGER, -- 决赛场地\n);\nCREATE TABLE World Cup goal record (\n  The players VARCHAR(50) PRIMARY KEY, -- 球员\n  Team id VARCHAR(50), -- 球队id\n  Number of goals INTEGER, -- 进球数量\n);\nCREATE TABLE World Cup Four (\n  Year INTEGER PRIMARY KEY, -- 年份\n  World Cup name DATETIME, -- 世界杯名称\n  ♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ VARCHAR(50), -- 冠军球队id\n  Yakuza id INTEGER, -- 亚军球队id\n  Seasonal team id INTEGER, -- 季军球队id\n  Quarterback id INTEGER, -- 殿军球队id\n);\nCREATE TABLE World Cup score (\n  Year INTEGER PRIMARY KEY, -- 年份\n  World Cup name DATETIME, -- 世界杯名称\n  Winner id VARCHAR(50), -- 赢方id\n  Loser id INTEGER, -- 输方id\n  Score INTEGER, -- 比分\n);\n-- World Cup Four.Yakuza id can be joined with Team.Phrase id -- 世界杯四强.亚军球队id 与 球队.词条id\n-- World Cup score.Loser id can be joined with Team.Phrase id -- 世界杯比分记录.输方id 与 球队.词条id\n-- World Cup Four.Seasonal team id can be joined with Team.Phrase id -- 世界杯四强.季军球队id 与 球队.词条id\n-- World Cup Four.Quarterback id can be joined with Team.Phrase id -- 世界杯四强.殿军球队id 与 球队.词条id\n-- World Cup score.Winner id can be joined with Team.Phrase id -- 世界杯比分记录.赢方id 与 球队.词条id\n-- World Cup Four.♪ The team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ ♪ ♪ the team of champions ♪ can be joined with Team.Phrase id -- 世界杯四强.冠军球队id 与 球队.词条id\n-- World Cup goal record.Team id can be joined with Team.Phrase id -- 世界杯进球记录.球队id 与 球队.词条id", "columns_en": {"词条id": "Phrase_id", "中文队名": "Chinese_Team_Name", "所属地区": "Territory_to_which_it_belongs", "成立时间": "_Other_Organiser", "FIFA排名": "FIFA_ranking", "冠军次数": "Number_of_champions", "名称": "Name", "举办时间": "Date_of_holding", "举办国家": "Host_country", "参赛球队数量": "Number_of_teams_participating", "比赛场数": "Number_of_competitions", "决赛场地": "The_finals", "球员": "The_players", "球队id": "Team_id", "进球数量": "Number_of_goals", "年份": "Year", "世界杯名称": "World_Cup_name", "冠军球队id": "♪_The_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪_♪_♪_the_team_of_champions_♪", "亚军球队id": "Yakuza_id", "季军球队id": "Seasonal_team_id", "殿军球队id": "Quarterback_id", "赢方id": "Winner_id", "输方id": "Loser_id", "比分": "Score"}, "table_en": {"球队": "Team", "世界杯": "World_Cup", "世界杯进球记录": "World_Cup_goal_record", "世界杯四强": "World_Cup_Four", "世界杯比分记录": "World_Cup_score"}}, "翻拍电视剧": {"sqlite": "CREATE TABLE A TV show (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  The title of the play INTEGER, -- 剧名\n  Original VARCHAR(50), -- 原著\n  Year of shoot VARCHAR(50), -- 拍摄年份\n  Director DATETIME, -- 导演\n  Rating VARCHAR(50), -- 评分\n);\nCREATE TABLE Theme (\n  Phrase id INTEGER PRIMARY KEY, -- 词条id\n  Theme song name INTEGER, -- 主题曲名称\n  Artist VARCHAR(50), -- 演唱者\n  Words VARCHAR(50), -- 作词\n  Composing VARCHAR(50), -- 作曲\n  TV dramad VARCHAR(50), -- 电视剧id\n);\nCREATE TABLE Actors (\n  Name INTEGER PRIMARY KEY, -- 姓名\n  TV dramad VARCHAR(50), -- 电视剧id\n  Play a role INTEGER, -- 饰演角色\n  Main Angle VARCHAR(50), -- 主配角\n);\n-- Actors.TV dramad can be joined with A TV show.Phrase id -- 演员.电视剧id 与 电视剧.词条id\n-- Theme.TV dramad can be joined with A TV show.Phrase id -- 主题曲.电视剧id 与 电视剧.词条id", "columns_en": {"词条id": "Phrase_id", "剧名": "The_title_of_the_play", "原著": "Original", "拍摄年份": "Year_of_shoot", "导演": "Director", "评分": "Rating", "主题曲名称": "Theme_song_name", "演唱者": "Artist", "作词": "Words", "作曲": "Composing", "电视剧id": "TV_dramad", "姓名": "Name", "饰演角色": "Play_a_role", "主配角": "Main_Angle"}, "table_en": {"电视剧": "A_TV_show", "主题曲": "Theme", "演员": "Actors"}}, "中国歌手及歌曲": {"sqlite": "CREATE TABLE Singer (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name INTEGER, -- 姓名\n  Nationalities VARCHAR(50), -- 民族\n  Height VARCHAR(50), -- 身高\n  body weight INTEGER, -- 体重\n  Place of birth INTEGER, -- 出生地\n  Date of birth VARCHAR(50), -- 出生日期\n  Graduate schools DATETIME, -- 毕业院校\n);\nCREATE TABLE Album (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Album Name INTEGER, -- 专辑名\n  Singer id VARCHAR(50), -- 歌手id\n  Number of Tracks INTEGER, -- 曲目数量\n  Release time INTEGER, -- 发行时间\n  Style DATETIME, -- 风格\n  The record company VARCHAR(50), -- 唱片公司\n);\nCREATE TABLE Songs (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Song Name INTEGER, -- 歌曲名称\n  Entitled id VARCHAR(50), -- 所属专辑id\n  Length INTEGER, -- 时长\n  Original singer id INTEGER, -- 原唱歌手id\n  Release time INTEGER, -- 发行时间\n  Fill DATETIME, -- 填词\n  Spectrum VARCHAR(50), -- 谱曲\n  Composing VARCHAR(50), -- 编曲\n  Languages VARCHAR(50), -- 语言\n);\nCREATE TABLE ♪ Rolling a song ♪ (\n  Songid VARCHAR(50) PRIMARY KEY, -- 歌曲id\n  Singer id INTEGER, -- 歌手id\n  Rating INTEGER, -- 评分\n);\nCREATE TABLE Singers and phonographers (\n  Singer id INTEGER PRIMARY KEY, -- 歌手id\n  Lyric INTEGER, -- 作词人\n  Number of collaborative tracks VARCHAR(50), -- 合作曲目数量\n);\nCREATE TABLE Taiwan Golden Argument (\n  Number of sessions INTEGER PRIMARY KEY, -- 届数\n  Specific awards INTEGER, -- 具体奖项\n  Personal id VARCHAR(50), -- 人物id\n  Songid INTEGER, -- 歌曲id\n);\n-- Taiwan Golden Argument.Songid can be joined with Songs.Phrase id -- 台湾金曲奖.歌曲id 与 歌曲.词条id\n-- Album.Singer id can be joined with Singer.Phrase id -- 专辑.歌手id 与 歌手.词条id\n-- Taiwan Golden Argument.Personal id can be joined with Singer.Phrase id -- 台湾金曲奖.人物id 与 歌手.词条id\n-- Songs.Entitled id can be joined with Album.Phrase id -- 歌曲.所属专辑id 与 专辑.词条id\n-- Songs.Original singer id can be joined with Singer.Phrase id -- 歌曲.原唱歌手id 与 歌手.词条id\n-- ♪ Rolling a song ♪.Songid can be joined with Songs.Phrase id -- 翻唱歌曲.歌曲id 与 歌曲.词条id\n-- Singers and phonographers.Singer id can be joined with Singer.Phrase id -- 歌手与作词人.歌手id 与 歌手.词条id\n-- ♪ Rolling a song ♪.Singer id can be joined with Singer.Phrase id -- 翻唱歌曲.歌手id 与 歌手.词条id", "columns_en": {"词条id": "Phrase_id", "姓名": "Name", "民族": "Nationalities", "身高": "Height", "体重": "body_weight", "出生地": "Place_of_birth", "出生日期": "Date_of_birth", "毕业院校": "Graduate_schools", "专辑名": "Album_Name", "歌手id": "Singer_id", "曲目数量": "Number_of_Tracks", "发行时间": "Release_time", "风格": "Style", "唱片公司": "The_record_company", "歌曲名称": "Song_Name", "所属专辑id": "Entitled_id", "时长": "Length", "原唱歌手id": "Original_singer_id", "填词": "Fill", "谱曲": "Spectrum", "编曲": "Composing", "语言": "Languages", "歌曲id": "Songid", "评分": "Rating", "作词人": "Lyric", "合作曲目数量": "Number_of_collaborative_tracks", "届数": "Number_of_sessions", "具体奖项": "Specific_awards", "人物id": "Personal_id"}, "table_en": {"歌手": "Singer", "专辑": "Album", "歌曲": "Songs", "翻唱歌曲": "♪_Rolling_a_song_♪", "歌手与作词人": "Singers_and_phonographers", "台湾金曲奖": "Taiwan_Golden_Argument"}}, "企业营收": {"sqlite": "CREATE TABLE Enterprise (\n  Phrase id VARCHAR(50) PRIMARY KEY, -- 词条id\n  Name of company INTEGER, -- 公司名\n  Stock Code VARCHAR(50), -- 股票代码\n  Registered capital INTEGER, -- 注册资本\n   Other Organiser INTEGER, -- 成立日期\n  Industry DATETIME, -- 行业领域\n  Scope of operation VARCHAR(50), -- 经营范围\n);\nCREATE TABLE Enterprise annual report (\n  Enterprise id VARCHAR(50) PRIMARY KEY, -- 企业id\n  Year INTEGER, -- 年份\n  Collection DATETIME, -- 营收\n  Income growth rate INTEGER, -- 收入增长率\n  Net profit INTEGER, -- 净利润\n  Net profit growth rate INTEGER, -- 净利润增长率\n  Income per share INTEGER, -- 每股收益\n);\nCREATE TABLE Enterprise share price (\n  Stock Code INTEGER PRIMARY KEY, -- 股票代码\n  Year INTEGER, -- 年份\n  Highest share price DATETIME, -- 最高股价\n  Minimum share price INTEGER, -- 最低股价\n  Target price INTEGER, -- 目标价\n);\nCREATE TABLE Current share price of the enterprise (\n  Stock Code INTEGER PRIMARY KEY, -- 股票代码\n  The stock price was collected yesterday INTEGER, -- 昨收股价\n  Let's start with the stock price INTEGER, -- 今开股价\n  Minimum share price INTEGER, -- 最低股价\n  Highest share price INTEGER, -- 最高股价\n  Current price INTEGER, -- 当前价\n  Deal INTEGER, -- 成交量\n);\n-- Enterprise annual report.Enterprise id can be joined with Enterprise.Phrase id -- 企业年报.企业id 与 企业.词条id\n-- Enterprise share price.Stock Code can be joined with Enterprise.Stock Code -- 企业股价.股票代码 与 企业.股票代码\n-- Current share price of the enterprise.Stock Code can be joined with Enterprise.Stock Code -- 企业当前股价.股票代码 与 企业.股票代码", "columns_en": {"词条id": "Phrase_id", "公司名": "Name_of_company", "股票代码": "Stock_Code", "注册资本": "Registered_capital", "成立日期": "_Other_Organiser", "行业领域": "Industry", "经营范围": "Scope_of_operation", "企业id": "Enterprise_id", "年份": "Year", "营收": "Collection", "收入增长率": "Income_growth_rate", "净利润": "Net_profit", "净利润增长率": "Net_profit_growth_rate", "每股收益": "Income_per_share", "最高股价": "Highest_share_price", "最低股价": "Minimum_share_price", "目标价": "Target_price", "昨收股价": "The_stock_price_was_collected_yesterday", "今开股价": "Let's_start_with_the_stock_price", "当前价": "Current_price", "成交量": "Deal"}, "table_en": {"企业": "Enterprise", "企业年报": "Enterprise_annual_report", "企业股价": "Enterprise_share_price", "企业当前股价": "Current_share_price_of_the_enterprise"}}}